/* automatically generated by rust-bindgen 0.60.1 */

pub const THOST_FTDC_EXP_Normal: u8 = 48u8;
pub const THOST_FTDC_EXP_GenOrderByTrade: u8 = 49u8;
pub const THOST_FTDC_ICT_EID: u8 = 48u8;
pub const THOST_FTDC_ICT_IDCard: u8 = 49u8;
pub const THOST_FTDC_ICT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_ICT_PoliceIDCard: u8 = 51u8;
pub const THOST_FTDC_ICT_SoldierIDCard: u8 = 52u8;
pub const THOST_FTDC_ICT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_ICT_Passport: u8 = 54u8;
pub const THOST_FTDC_ICT_TaiwanCompatriotIDCard: u8 = 55u8;
pub const THOST_FTDC_ICT_HomeComingCard: u8 = 56u8;
pub const THOST_FTDC_ICT_LicenseNo: u8 = 57u8;
pub const THOST_FTDC_ICT_TaxNo: u8 = 65u8;
pub const THOST_FTDC_ICT_HMMainlandTravelPermit: u8 = 66u8;
pub const THOST_FTDC_ICT_TwMainlandTravelPermit: u8 = 67u8;
pub const THOST_FTDC_ICT_DrivingLicense: u8 = 68u8;
pub const THOST_FTDC_ICT_SocialID: u8 = 70u8;
pub const THOST_FTDC_ICT_LocalID: u8 = 71u8;
pub const THOST_FTDC_ICT_BusinessRegistration: u8 = 72u8;
pub const THOST_FTDC_ICT_HKMCIDCard: u8 = 73u8;
pub const THOST_FTDC_ICT_AccountsPermits: u8 = 74u8;
pub const THOST_FTDC_ICT_FrgPrmtRdCard: u8 = 75u8;
pub const THOST_FTDC_ICT_CptMngPrdLetter: u8 = 76u8;
pub const THOST_FTDC_ICT_UniformSocialCreditCode: u8 = 78u8;
pub const THOST_FTDC_ICT_CorporationCertNo: u8 = 79u8;
pub const THOST_FTDC_ICT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_IR_All: u8 = 49u8;
pub const THOST_FTDC_IR_Group: u8 = 50u8;
pub const THOST_FTDC_IR_Single: u8 = 51u8;
pub const THOST_FTDC_DR_All: u8 = 49u8;
pub const THOST_FTDC_DR_Group: u8 = 50u8;
pub const THOST_FTDC_DR_Single: u8 = 51u8;
pub const THOST_FTDC_DS_Asynchronous: u8 = 49u8;
pub const THOST_FTDC_DS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_DS_Synchronized: u8 = 51u8;
pub const THOST_FTDC_BDS_Synchronized: u8 = 49u8;
pub const THOST_FTDC_BDS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_ECS_NoConnection: u8 = 49u8;
pub const THOST_FTDC_ECS_QryInstrumentSent: u8 = 50u8;
pub const THOST_FTDC_ECS_GotInformation: u8 = 57u8;
pub const THOST_FTDC_TCS_NotConnected: u8 = 49u8;
pub const THOST_FTDC_TCS_Connected: u8 = 50u8;
pub const THOST_FTDC_TCS_QryInstrumentSent: u8 = 51u8;
pub const THOST_FTDC_TCS_SubPrivateFlow: u8 = 52u8;
pub const THOST_FTDC_FC_DataAsync: u8 = 49u8;
pub const THOST_FTDC_FC_ForceUserLogout: u8 = 50u8;
pub const THOST_FTDC_FC_UserPasswordUpdate: u8 = 51u8;
pub const THOST_FTDC_FC_BrokerPasswordUpdate: u8 = 52u8;
pub const THOST_FTDC_FC_InvestorPasswordUpdate: u8 = 53u8;
pub const THOST_FTDC_FC_OrderInsert: u8 = 54u8;
pub const THOST_FTDC_FC_OrderAction: u8 = 55u8;
pub const THOST_FTDC_FC_SyncSystemData: u8 = 56u8;
pub const THOST_FTDC_FC_SyncBrokerData: u8 = 57u8;
pub const THOST_FTDC_FC_BachSyncBrokerData: u8 = 65u8;
pub const THOST_FTDC_FC_SuperQuery: u8 = 66u8;
pub const THOST_FTDC_FC_ParkedOrderInsert: u8 = 67u8;
pub const THOST_FTDC_FC_ParkedOrderAction: u8 = 68u8;
pub const THOST_FTDC_FC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_FC_DeleteOrder: u8 = 70u8;
pub const THOST_FTDC_BFC_ForceUserLogout: u8 = 49u8;
pub const THOST_FTDC_BFC_UserPasswordUpdate: u8 = 50u8;
pub const THOST_FTDC_BFC_SyncBrokerData: u8 = 51u8;
pub const THOST_FTDC_BFC_BachSyncBrokerData: u8 = 52u8;
pub const THOST_FTDC_BFC_OrderInsert: u8 = 53u8;
pub const THOST_FTDC_BFC_OrderAction: u8 = 54u8;
pub const THOST_FTDC_BFC_AllQuery: u8 = 55u8;
pub const THOST_FTDC_BFC_log: u8 = 97u8;
pub const THOST_FTDC_BFC_BaseQry: u8 = 98u8;
pub const THOST_FTDC_BFC_TradeQry: u8 = 99u8;
pub const THOST_FTDC_BFC_Trade: u8 = 100u8;
pub const THOST_FTDC_BFC_Virement: u8 = 101u8;
pub const THOST_FTDC_BFC_Risk: u8 = 102u8;
pub const THOST_FTDC_BFC_Session: u8 = 103u8;
pub const THOST_FTDC_BFC_RiskNoticeCtl: u8 = 104u8;
pub const THOST_FTDC_BFC_RiskNotice: u8 = 105u8;
pub const THOST_FTDC_BFC_BrokerDeposit: u8 = 106u8;
pub const THOST_FTDC_BFC_QueryFund: u8 = 107u8;
pub const THOST_FTDC_BFC_QueryOrder: u8 = 108u8;
pub const THOST_FTDC_BFC_QueryTrade: u8 = 109u8;
pub const THOST_FTDC_BFC_QueryPosition: u8 = 110u8;
pub const THOST_FTDC_BFC_QueryMarketData: u8 = 111u8;
pub const THOST_FTDC_BFC_QueryUserEvent: u8 = 112u8;
pub const THOST_FTDC_BFC_QueryRiskNotify: u8 = 113u8;
pub const THOST_FTDC_BFC_QueryFundChange: u8 = 114u8;
pub const THOST_FTDC_BFC_QueryInvestor: u8 = 115u8;
pub const THOST_FTDC_BFC_QueryTradingCode: u8 = 116u8;
pub const THOST_FTDC_BFC_ForceClose: u8 = 117u8;
pub const THOST_FTDC_BFC_PressTest: u8 = 118u8;
pub const THOST_FTDC_BFC_RemainCalc: u8 = 119u8;
pub const THOST_FTDC_BFC_NetPositionInd: u8 = 120u8;
pub const THOST_FTDC_BFC_RiskPredict: u8 = 121u8;
pub const THOST_FTDC_BFC_DataExport: u8 = 122u8;
pub const THOST_FTDC_BFC_RiskTargetSetup: u8 = 65u8;
pub const THOST_FTDC_BFC_MarketDataWarn: u8 = 66u8;
pub const THOST_FTDC_BFC_QryBizNotice: u8 = 67u8;
pub const THOST_FTDC_BFC_CfgBizNotice: u8 = 68u8;
pub const THOST_FTDC_BFC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_BFC_SendBizNotice: u8 = 70u8;
pub const THOST_FTDC_BFC_CfgRiskLevelStd: u8 = 71u8;
pub const THOST_FTDC_BFC_TbCommand: u8 = 72u8;
pub const THOST_FTDC_BFC_DeleteOrder: u8 = 74u8;
pub const THOST_FTDC_BFC_ParkedOrderInsert: u8 = 75u8;
pub const THOST_FTDC_BFC_ParkedOrderAction: u8 = 76u8;
pub const THOST_FTDC_BFC_ExecOrderNoCheck: u8 = 77u8;
pub const THOST_FTDC_BFC_Designate: u8 = 78u8;
pub const THOST_FTDC_BFC_StockDisposal: u8 = 79u8;
pub const THOST_FTDC_BFC_BrokerDepositWarn: u8 = 81u8;
pub const THOST_FTDC_BFC_CoverWarn: u8 = 83u8;
pub const THOST_FTDC_BFC_PreExecOrder: u8 = 84u8;
pub const THOST_FTDC_BFC_ExecOrderRisk: u8 = 80u8;
pub const THOST_FTDC_BFC_PosiLimitWarn: u8 = 85u8;
pub const THOST_FTDC_BFC_QryPosiLimit: u8 = 86u8;
pub const THOST_FTDC_BFC_FBSign: u8 = 87u8;
pub const THOST_FTDC_BFC_FBAccount: u8 = 88u8;
pub const THOST_FTDC_OAS_Submitted: u8 = 97u8;
pub const THOST_FTDC_OAS_Accepted: u8 = 98u8;
pub const THOST_FTDC_OAS_Rejected: u8 = 99u8;
pub const THOST_FTDC_OST_AllTraded: u8 = 48u8;
pub const THOST_FTDC_OST_PartTradedQueueing: u8 = 49u8;
pub const THOST_FTDC_OST_PartTradedNotQueueing: u8 = 50u8;
pub const THOST_FTDC_OST_NoTradeQueueing: u8 = 51u8;
pub const THOST_FTDC_OST_NoTradeNotQueueing: u8 = 52u8;
pub const THOST_FTDC_OST_Canceled: u8 = 53u8;
pub const THOST_FTDC_OST_Unknown: u8 = 97u8;
pub const THOST_FTDC_OST_NotTouched: u8 = 98u8;
pub const THOST_FTDC_OST_Touched: u8 = 99u8;
pub const THOST_FTDC_OSS_InsertSubmitted: u8 = 48u8;
pub const THOST_FTDC_OSS_CancelSubmitted: u8 = 49u8;
pub const THOST_FTDC_OSS_ModifySubmitted: u8 = 50u8;
pub const THOST_FTDC_OSS_Accepted: u8 = 51u8;
pub const THOST_FTDC_OSS_InsertRejected: u8 = 52u8;
pub const THOST_FTDC_OSS_CancelRejected: u8 = 53u8;
pub const THOST_FTDC_OSS_ModifyRejected: u8 = 54u8;
pub const THOST_FTDC_PSD_Today: u8 = 49u8;
pub const THOST_FTDC_PSD_History: u8 = 50u8;
pub const THOST_FTDC_PDT_UseHistory: u8 = 49u8;
pub const THOST_FTDC_PDT_NoUseHistory: u8 = 50u8;
pub const THOST_FTDC_ER_Broker: u8 = 49u8;
pub const THOST_FTDC_ER_Host: u8 = 50u8;
pub const THOST_FTDC_ER_Maker: u8 = 51u8;
pub const THOST_FTDC_PC_Futures: u8 = 49u8;
pub const THOST_FTDC_PC_Options: u8 = 50u8;
pub const THOST_FTDC_PC_Combination: u8 = 51u8;
pub const THOST_FTDC_PC_Spot: u8 = 52u8;
pub const THOST_FTDC_PC_EFP: u8 = 53u8;
pub const THOST_FTDC_PC_SpotOption: u8 = 54u8;
pub const THOST_FTDC_PC_TAS: u8 = 55u8;
pub const THOST_FTDC_PC_MI: u8 = 73u8;
pub const THOST_FTDC_APC_FutureSingle: u8 = 49u8;
pub const THOST_FTDC_APC_OptionSingle: u8 = 50u8;
pub const THOST_FTDC_APC_Futures: u8 = 51u8;
pub const THOST_FTDC_APC_Options: u8 = 52u8;
pub const THOST_FTDC_APC_TradingComb: u8 = 53u8;
pub const THOST_FTDC_APC_UnTradingComb: u8 = 54u8;
pub const THOST_FTDC_APC_AllTrading: u8 = 55u8;
pub const THOST_FTDC_APC_All: u8 = 56u8;
pub const THOST_FTDC_IP_NotStart: u8 = 48u8;
pub const THOST_FTDC_IP_Started: u8 = 49u8;
pub const THOST_FTDC_IP_Pause: u8 = 50u8;
pub const THOST_FTDC_IP_Expired: u8 = 51u8;
pub const THOST_FTDC_D_Buy: u8 = 48u8;
pub const THOST_FTDC_D_Sell: u8 = 49u8;
pub const THOST_FTDC_PT_Net: u8 = 49u8;
pub const THOST_FTDC_PT_Gross: u8 = 50u8;
pub const THOST_FTDC_PD_Net: u8 = 49u8;
pub const THOST_FTDC_PD_Long: u8 = 50u8;
pub const THOST_FTDC_PD_Short: u8 = 51u8;
pub const THOST_FTDC_SS_NonActive: u8 = 49u8;
pub const THOST_FTDC_SS_Startup: u8 = 50u8;
pub const THOST_FTDC_SS_Operating: u8 = 51u8;
pub const THOST_FTDC_SS_Settlement: u8 = 52u8;
pub const THOST_FTDC_SS_SettlementFinished: u8 = 53u8;
pub const THOST_FTDC_RA_Trade: u8 = 48u8;
pub const THOST_FTDC_RA_Settlement: u8 = 49u8;
pub const THOST_FTDC_HF_Speculation: u8 = 49u8;
pub const THOST_FTDC_HF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HF_Hedge: u8 = 51u8;
pub const THOST_FTDC_HF_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_HF_SpecHedge: u8 = 54u8;
pub const THOST_FTDC_HF_HedgeSpec: u8 = 55u8;
pub const THOST_FTDC_BHF_Speculation: u8 = 49u8;
pub const THOST_FTDC_BHF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_BHF_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_Speculation: u8 = 49u8;
pub const THOST_FTDC_CIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_CIDT_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_OPT_AnyPrice: u8 = 49u8;
pub const THOST_FTDC_OPT_LimitPrice: u8 = 50u8;
pub const THOST_FTDC_OPT_BestPrice: u8 = 51u8;
pub const THOST_FTDC_OPT_LastPrice: u8 = 52u8;
pub const THOST_FTDC_OPT_LastPricePlusOneTicks: u8 = 53u8;
pub const THOST_FTDC_OPT_LastPricePlusTwoTicks: u8 = 54u8;
pub const THOST_FTDC_OPT_LastPricePlusThreeTicks: u8 = 55u8;
pub const THOST_FTDC_OPT_AskPrice1: u8 = 56u8;
pub const THOST_FTDC_OPT_AskPrice1PlusOneTicks: u8 = 57u8;
pub const THOST_FTDC_OPT_AskPrice1PlusTwoTicks: u8 = 65u8;
pub const THOST_FTDC_OPT_AskPrice1PlusThreeTicks: u8 = 66u8;
pub const THOST_FTDC_OPT_BidPrice1: u8 = 67u8;
pub const THOST_FTDC_OPT_BidPrice1PlusOneTicks: u8 = 68u8;
pub const THOST_FTDC_OPT_BidPrice1PlusTwoTicks: u8 = 69u8;
pub const THOST_FTDC_OPT_BidPrice1PlusThreeTicks: u8 = 70u8;
pub const THOST_FTDC_OPT_FiveLevelPrice: u8 = 71u8;
pub const THOST_FTDC_OF_Open: u8 = 48u8;
pub const THOST_FTDC_OF_Close: u8 = 49u8;
pub const THOST_FTDC_OF_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OF_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OF_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OF_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OF_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_FCC_NotForceClose: u8 = 48u8;
pub const THOST_FTDC_FCC_LackDeposit: u8 = 49u8;
pub const THOST_FTDC_FCC_ClientOverPositionLimit: u8 = 50u8;
pub const THOST_FTDC_FCC_MemberOverPositionLimit: u8 = 51u8;
pub const THOST_FTDC_FCC_NotMultiple: u8 = 52u8;
pub const THOST_FTDC_FCC_Violation: u8 = 53u8;
pub const THOST_FTDC_FCC_Other: u8 = 54u8;
pub const THOST_FTDC_FCC_PersonDeliv: u8 = 55u8;
pub const THOST_FTDC_ORDT_Normal: u8 = 48u8;
pub const THOST_FTDC_ORDT_DeriveFromQuote: u8 = 49u8;
pub const THOST_FTDC_ORDT_DeriveFromCombination: u8 = 50u8;
pub const THOST_FTDC_ORDT_Combination: u8 = 51u8;
pub const THOST_FTDC_ORDT_ConditionalOrder: u8 = 52u8;
pub const THOST_FTDC_ORDT_Swap: u8 = 53u8;
pub const THOST_FTDC_ORDT_DeriveFromBlockTrade: u8 = 54u8;
pub const THOST_FTDC_ORDT_DeriveFromEFPTrade: u8 = 55u8;
pub const THOST_FTDC_TC_IOC: u8 = 49u8;
pub const THOST_FTDC_TC_GFS: u8 = 50u8;
pub const THOST_FTDC_TC_GFD: u8 = 51u8;
pub const THOST_FTDC_TC_GTD: u8 = 52u8;
pub const THOST_FTDC_TC_GTC: u8 = 53u8;
pub const THOST_FTDC_TC_GFA: u8 = 54u8;
pub const THOST_FTDC_VC_AV: u8 = 49u8;
pub const THOST_FTDC_VC_MV: u8 = 50u8;
pub const THOST_FTDC_VC_CV: u8 = 51u8;
pub const THOST_FTDC_CC_Immediately: u8 = 49u8;
pub const THOST_FTDC_CC_Touch: u8 = 50u8;
pub const THOST_FTDC_CC_TouchProfit: u8 = 51u8;
pub const THOST_FTDC_CC_ParkedOrder: u8 = 52u8;
pub const THOST_FTDC_CC_LastPriceGreaterThanStopPrice: u8 = 53u8;
pub const THOST_FTDC_CC_LastPriceGreaterEqualStopPrice: u8 = 54u8;
pub const THOST_FTDC_CC_LastPriceLesserThanStopPrice: u8 = 55u8;
pub const THOST_FTDC_CC_LastPriceLesserEqualStopPrice: u8 = 56u8;
pub const THOST_FTDC_CC_AskPriceGreaterThanStopPrice: u8 = 57u8;
pub const THOST_FTDC_CC_AskPriceGreaterEqualStopPrice: u8 = 65u8;
pub const THOST_FTDC_CC_AskPriceLesserThanStopPrice: u8 = 66u8;
pub const THOST_FTDC_CC_AskPriceLesserEqualStopPrice: u8 = 67u8;
pub const THOST_FTDC_CC_BidPriceGreaterThanStopPrice: u8 = 68u8;
pub const THOST_FTDC_CC_BidPriceGreaterEqualStopPrice: u8 = 69u8;
pub const THOST_FTDC_CC_BidPriceLesserThanStopPrice: u8 = 70u8;
pub const THOST_FTDC_CC_BidPriceLesserEqualStopPrice: u8 = 72u8;
pub const THOST_FTDC_AF_Delete: u8 = 48u8;
pub const THOST_FTDC_AF_Modify: u8 = 51u8;
pub const THOST_FTDC_TR_Allow: u8 = 48u8;
pub const THOST_FTDC_TR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_TR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_OSRC_Participant: u8 = 48u8;
pub const THOST_FTDC_OSRC_Administrator: u8 = 49u8;
pub const THOST_FTDC_TRDT_SplitCombination: u8 = 35u8;
pub const THOST_FTDC_TRDT_Common: u8 = 48u8;
pub const THOST_FTDC_TRDT_OptionsExecution: u8 = 49u8;
pub const THOST_FTDC_TRDT_OTC: u8 = 50u8;
pub const THOST_FTDC_TRDT_EFPDerived: u8 = 51u8;
pub const THOST_FTDC_TRDT_CombinationDerived: u8 = 52u8;
pub const THOST_FTDC_TRDT_BlockTrade: u8 = 53u8;
pub const THOST_FTDC_SPOST_Common: u8 = 35u8;
pub const THOST_FTDC_SPOST_Tas: u8 = 48u8;
pub const THOST_FTDC_PSRC_LastPrice: u8 = 48u8;
pub const THOST_FTDC_PSRC_Buy: u8 = 49u8;
pub const THOST_FTDC_PSRC_Sell: u8 = 50u8;
pub const THOST_FTDC_PSRC_OTC: u8 = 51u8;
pub const THOST_FTDC_IS_BeforeTrading: u8 = 48u8;
pub const THOST_FTDC_IS_NoTrading: u8 = 49u8;
pub const THOST_FTDC_IS_Continous: u8 = 50u8;
pub const THOST_FTDC_IS_AuctionOrdering: u8 = 51u8;
pub const THOST_FTDC_IS_AuctionBalance: u8 = 52u8;
pub const THOST_FTDC_IS_AuctionMatch: u8 = 53u8;
pub const THOST_FTDC_IS_Closed: u8 = 54u8;
pub const THOST_FTDC_IER_Automatic: u8 = 49u8;
pub const THOST_FTDC_IER_Manual: u8 = 50u8;
pub const THOST_FTDC_IER_Fuse: u8 = 51u8;
pub const THOST_FTDC_BS_NoUpload: u8 = 49u8;
pub const THOST_FTDC_BS_Uploaded: u8 = 50u8;
pub const THOST_FTDC_BS_Failed: u8 = 51u8;
pub const THOST_FTDC_RS_All: u8 = 49u8;
pub const THOST_FTDC_RS_ByProduct: u8 = 50u8;
pub const THOST_FTDC_RP_ByVolume: u8 = 49u8;
pub const THOST_FTDC_RP_ByFeeOnHand: u8 = 50u8;
pub const THOST_FTDC_RL_Level1: u8 = 49u8;
pub const THOST_FTDC_RL_Level2: u8 = 50u8;
pub const THOST_FTDC_RL_Level3: u8 = 51u8;
pub const THOST_FTDC_RL_Level4: u8 = 52u8;
pub const THOST_FTDC_RL_Level5: u8 = 53u8;
pub const THOST_FTDC_RL_Level6: u8 = 54u8;
pub const THOST_FTDC_RL_Level7: u8 = 55u8;
pub const THOST_FTDC_RL_Level8: u8 = 56u8;
pub const THOST_FTDC_RL_Level9: u8 = 57u8;
pub const THOST_FTDC_RSD_ByPeriod: u8 = 49u8;
pub const THOST_FTDC_RSD_ByStandard: u8 = 50u8;
pub const THOST_FTDC_MT_Out: u8 = 48u8;
pub const THOST_FTDC_MT_In: u8 = 49u8;
pub const THOST_FTDC_ISPI_MortgageRatio: u8 = 52u8;
pub const THOST_FTDC_ISPI_MarginWay: u8 = 53u8;
pub const THOST_FTDC_ISPI_BillDeposit: u8 = 57u8;
pub const THOST_FTDC_ESPI_MortgageRatio: u8 = 49u8;
pub const THOST_FTDC_ESPI_OtherFundItem: u8 = 50u8;
pub const THOST_FTDC_ESPI_OtherFundImport: u8 = 51u8;
pub const THOST_FTDC_ESPI_CFFEXMinPrepa: u8 = 54u8;
pub const THOST_FTDC_ESPI_CZCESettlementType: u8 = 55u8;
pub const THOST_FTDC_ESPI_ExchDelivFeeMode: u8 = 57u8;
pub const THOST_FTDC_ESPI_DelivFeeMode: u8 = 48u8;
pub const THOST_FTDC_ESPI_CZCEComMarginType: u8 = 65u8;
pub const THOST_FTDC_ESPI_DceComMarginType: u8 = 66u8;
pub const THOST_FTDC_ESPI_OptOutDisCountRate: u8 = 97u8;
pub const THOST_FTDC_ESPI_OptMiniGuarantee: u8 = 98u8;
pub const THOST_FTDC_SPI_InvestorIDMinLength: u8 = 49u8;
pub const THOST_FTDC_SPI_AccountIDMinLength: u8 = 50u8;
pub const THOST_FTDC_SPI_UserRightLogon: u8 = 51u8;
pub const THOST_FTDC_SPI_SettlementBillTrade: u8 = 52u8;
pub const THOST_FTDC_SPI_TradingCode: u8 = 53u8;
pub const THOST_FTDC_SPI_CheckFund: u8 = 54u8;
pub const THOST_FTDC_SPI_CommModelRight: u8 = 55u8;
pub const THOST_FTDC_SPI_MarginModelRight: u8 = 57u8;
pub const THOST_FTDC_SPI_IsStandardActive: u8 = 56u8;
pub const THOST_FTDC_SPI_UploadSettlementFile: u8 = 85u8;
pub const THOST_FTDC_SPI_DownloadCSRCFile: u8 = 68u8;
pub const THOST_FTDC_SPI_SettlementBillFile: u8 = 83u8;
pub const THOST_FTDC_SPI_CSRCOthersFile: u8 = 67u8;
pub const THOST_FTDC_SPI_InvestorPhoto: u8 = 80u8;
pub const THOST_FTDC_SPI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_SPI_InvestorPwdModel: u8 = 73u8;
pub const THOST_FTDC_SPI_CFFEXInvestorSettleFile: u8 = 70u8;
pub const THOST_FTDC_SPI_InvestorIDType: u8 = 97u8;
pub const THOST_FTDC_SPI_FreezeMaxReMain: u8 = 114u8;
pub const THOST_FTDC_SPI_IsSync: u8 = 65u8;
pub const THOST_FTDC_SPI_RelieveOpenLimit: u8 = 79u8;
pub const THOST_FTDC_SPI_IsStandardFreeze: u8 = 88u8;
pub const THOST_FTDC_SPI_CZCENormalProductHedge: u8 = 66u8;
pub const THOST_FTDC_TPID_EncryptionStandard: u8 = 69u8;
pub const THOST_FTDC_TPID_RiskMode: u8 = 82u8;
pub const THOST_FTDC_TPID_RiskModeGlobal: u8 = 71u8;
pub const THOST_FTDC_TPID_modeEncode: u8 = 80u8;
pub const THOST_FTDC_TPID_tickMode: u8 = 84u8;
pub const THOST_FTDC_TPID_SingleUserSessionMaxNum: u8 = 83u8;
pub const THOST_FTDC_TPID_LoginFailMaxNum: u8 = 76u8;
pub const THOST_FTDC_TPID_IsAuthForce: u8 = 65u8;
pub const THOST_FTDC_TPID_IsPosiFreeze: u8 = 70u8;
pub const THOST_FTDC_TPID_IsPosiLimit: u8 = 77u8;
pub const THOST_FTDC_TPID_ForQuoteTimeInterval: u8 = 81u8;
pub const THOST_FTDC_TPID_IsFuturePosiLimit: u8 = 66u8;
pub const THOST_FTDC_TPID_IsFutureOrderFreq: u8 = 67u8;
pub const THOST_FTDC_TPID_IsExecOrderProfit: u8 = 72u8;
pub const THOST_FTDC_TPID_IsCheckBankAcc: u8 = 73u8;
pub const THOST_FTDC_TPID_PasswordDeadLine: u8 = 74u8;
pub const THOST_FTDC_TPID_IsStrongPassword: u8 = 75u8;
pub const THOST_FTDC_TPID_BalanceMorgage: u8 = 97u8;
pub const THOST_FTDC_TPID_MinPwdLen: u8 = 79u8;
pub const THOST_FTDC_TPID_LoginFailMaxNumForIP: u8 = 85u8;
pub const THOST_FTDC_TPID_PasswordPeriod: u8 = 86u8;
pub const THOST_FTDC_FI_SettlementFund: u8 = 70u8;
pub const THOST_FTDC_FI_Trade: u8 = 84u8;
pub const THOST_FTDC_FI_InvestorPosition: u8 = 80u8;
pub const THOST_FTDC_FI_SubEntryFund: u8 = 79u8;
pub const THOST_FTDC_FI_CZCECombinationPos: u8 = 67u8;
pub const THOST_FTDC_FI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_FI_CZCEClose: u8 = 76u8;
pub const THOST_FTDC_FI_CZCENoClose: u8 = 78u8;
pub const THOST_FTDC_FI_PositionDtl: u8 = 68u8;
pub const THOST_FTDC_FI_OptionStrike: u8 = 83u8;
pub const THOST_FTDC_FI_SettlementPriceComparison: u8 = 77u8;
pub const THOST_FTDC_FI_NonTradePosChange: u8 = 66u8;
pub const THOST_FTDC_FUT_Settlement: u8 = 48u8;
pub const THOST_FTDC_FUT_Check: u8 = 49u8;
pub const THOST_FTDC_FFT_Txt: u8 = 48u8;
pub const THOST_FTDC_FFT_Zip: u8 = 49u8;
pub const THOST_FTDC_FFT_DBF: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedUpload: u8 = 49u8;
pub const THOST_FTDC_FUS_FailedUpload: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedLoad: u8 = 51u8;
pub const THOST_FTDC_FUS_PartSucceedLoad: u8 = 52u8;
pub const THOST_FTDC_FUS_FailedLoad: u8 = 53u8;
pub const THOST_FTDC_TD_Out: u8 = 48u8;
pub const THOST_FTDC_TD_In: u8 = 49u8;
pub const THOST_FTDC_SC_NoSpecialRule: u8 = 48u8;
pub const THOST_FTDC_SC_NoSpringFestival: u8 = 49u8;
pub const THOST_FTDC_IPT_LastSettlement: u8 = 49u8;
pub const THOST_FTDC_IPT_LaseClose: u8 = 50u8;
pub const THOST_FTDC_PLP_Active: u8 = 49u8;
pub const THOST_FTDC_PLP_NonActive: u8 = 50u8;
pub const THOST_FTDC_PLP_Canceled: u8 = 51u8;
pub const THOST_FTDC_DM_CashDeliv: u8 = 49u8;
pub const THOST_FTDC_DM_CommodityDeliv: u8 = 50u8;
pub const THOST_FTDC_FIOT_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOT_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOT_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FT_Deposite: u8 = 49u8;
pub const THOST_FTDC_FT_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FT_Company: u8 = 51u8;
pub const THOST_FTDC_FT_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FD_In: u8 = 49u8;
pub const THOST_FTDC_FD_Out: u8 = 50u8;
pub const THOST_FTDC_FS_Record: u8 = 49u8;
pub const THOST_FTDC_FS_Check: u8 = 50u8;
pub const THOST_FTDC_FS_Charge: u8 = 51u8;
pub const THOST_FTDC_PS_None: u8 = 49u8;
pub const THOST_FTDC_PS_Publishing: u8 = 50u8;
pub const THOST_FTDC_PS_Published: u8 = 51u8;
pub const THOST_FTDC_ES_NonActive: u8 = 49u8;
pub const THOST_FTDC_ES_Startup: u8 = 50u8;
pub const THOST_FTDC_ES_Initialize: u8 = 51u8;
pub const THOST_FTDC_ES_Initialized: u8 = 52u8;
pub const THOST_FTDC_ES_Close: u8 = 53u8;
pub const THOST_FTDC_ES_Closed: u8 = 54u8;
pub const THOST_FTDC_ES_Settlement: u8 = 55u8;
pub const THOST_FTDC_STS_Initialize: u8 = 48u8;
pub const THOST_FTDC_STS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_STS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_STS_Finished: u8 = 51u8;
pub const THOST_FTDC_CT_Person: u8 = 48u8;
pub const THOST_FTDC_CT_Company: u8 = 49u8;
pub const THOST_FTDC_CT_Fund: u8 = 50u8;
pub const THOST_FTDC_CT_SpecialOrgan: u8 = 51u8;
pub const THOST_FTDC_CT_Asset: u8 = 52u8;
pub const THOST_FTDC_BT_Trade: u8 = 48u8;
pub const THOST_FTDC_BT_TradeSettle: u8 = 49u8;
pub const THOST_FTDC_FAS_Low: u8 = 49u8;
pub const THOST_FTDC_FAS_Normal: u8 = 50u8;
pub const THOST_FTDC_FAS_Focus: u8 = 51u8;
pub const THOST_FTDC_FAS_Risk: u8 = 52u8;
pub const THOST_FTDC_FAS_ByTrade: u8 = 49u8;
pub const THOST_FTDC_FAS_ByDeliv: u8 = 50u8;
pub const THOST_FTDC_FAS_None: u8 = 51u8;
pub const THOST_FTDC_FAS_FixFee: u8 = 52u8;
pub const THOST_FTDC_PWDT_Trade: u8 = 49u8;
pub const THOST_FTDC_PWDT_Account: u8 = 50u8;
pub const THOST_FTDC_AG_All: u8 = 49u8;
pub const THOST_FTDC_AG_OnlyLost: u8 = 50u8;
pub const THOST_FTDC_AG_OnlyGain: u8 = 51u8;
pub const THOST_FTDC_AG_None: u8 = 52u8;
pub const THOST_FTDC_ICP_Include: u8 = 48u8;
pub const THOST_FTDC_ICP_NotInclude: u8 = 50u8;
pub const THOST_FTDC_AWT_Enable: u8 = 48u8;
pub const THOST_FTDC_AWT_Disable: u8 = 50u8;
pub const THOST_FTDC_AWT_NoHoldEnable: u8 = 51u8;
pub const THOST_FTDC_FPWD_UnCheck: u8 = 48u8;
pub const THOST_FTDC_FPWD_Check: u8 = 49u8;
pub const THOST_FTDC_TT_BankToFuture: u8 = 48u8;
pub const THOST_FTDC_TT_FutureToBank: u8 = 49u8;
pub const THOST_FTDC_TVF_Invalid: u8 = 48u8;
pub const THOST_FTDC_TVF_Valid: u8 = 49u8;
pub const THOST_FTDC_TVF_Reverse: u8 = 50u8;
pub const THOST_FTDC_RN_CD: u8 = 48u8;
pub const THOST_FTDC_RN_ZT: u8 = 49u8;
pub const THOST_FTDC_RN_QT: u8 = 50u8;
pub const THOST_FTDC_SEX_None: u8 = 48u8;
pub const THOST_FTDC_SEX_Man: u8 = 49u8;
pub const THOST_FTDC_SEX_Woman: u8 = 50u8;
pub const THOST_FTDC_UT_Investor: u8 = 48u8;
pub const THOST_FTDC_UT_Operator: u8 = 49u8;
pub const THOST_FTDC_UT_SuperUser: u8 = 50u8;
pub const THOST_FTDC_RATETYPE_MarginRate: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleBill: u8 = 49u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleMonth: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_CallMarginNotes: u8 = 51u8;
pub const THOST_FTDC_NOTETYPE_ForceCloseNotes: u8 = 52u8;
pub const THOST_FTDC_NOTETYPE_TradeNotes: u8 = 53u8;
pub const THOST_FTDC_NOTETYPE_DelivNotes: u8 = 54u8;
pub const THOST_FTDC_SBS_Day: u8 = 49u8;
pub const THOST_FTDC_SBS_Volume: u8 = 50u8;
pub const THOST_FTDC_ST_Day: u8 = 48u8;
pub const THOST_FTDC_ST_Month: u8 = 49u8;
pub const THOST_FTDC_URT_Logon: u8 = 49u8;
pub const THOST_FTDC_URT_Transfer: u8 = 50u8;
pub const THOST_FTDC_URT_EMail: u8 = 51u8;
pub const THOST_FTDC_URT_Fax: u8 = 52u8;
pub const THOST_FTDC_URT_ConditionOrder: u8 = 53u8;
pub const THOST_FTDC_MPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_MPT_SettlementPrice: u8 = 50u8;
pub const THOST_FTDC_MPT_AveragePrice: u8 = 51u8;
pub const THOST_FTDC_MPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_BGS_None: u8 = 48u8;
pub const THOST_FTDC_BGS_NoGenerated: u8 = 49u8;
pub const THOST_FTDC_BGS_Generated: u8 = 50u8;
pub const THOST_FTDC_AT_HandlePositionAlgo: u8 = 49u8;
pub const THOST_FTDC_AT_FindMarginRateAlgo: u8 = 50u8;
pub const THOST_FTDC_HPA_Base: u8 = 49u8;
pub const THOST_FTDC_HPA_DCE: u8 = 50u8;
pub const THOST_FTDC_HPA_CZCE: u8 = 51u8;
pub const THOST_FTDC_FMRA_Base: u8 = 49u8;
pub const THOST_FTDC_FMRA_DCE: u8 = 50u8;
pub const THOST_FTDC_FMRA_CZCE: u8 = 51u8;
pub const THOST_FTDC_HTAA_Base: u8 = 49u8;
pub const THOST_FTDC_HTAA_DCE: u8 = 50u8;
pub const THOST_FTDC_HTAA_CZCE: u8 = 51u8;
pub const THOST_FTDC_PST_Order: u8 = 49u8;
pub const THOST_FTDC_PST_Open: u8 = 50u8;
pub const THOST_FTDC_PST_Fund: u8 = 51u8;
pub const THOST_FTDC_PST_Settlement: u8 = 52u8;
pub const THOST_FTDC_PST_Company: u8 = 53u8;
pub const THOST_FTDC_PST_Corporation: u8 = 54u8;
pub const THOST_FTDC_PST_LinkMan: u8 = 55u8;
pub const THOST_FTDC_PST_Ledger: u8 = 56u8;
pub const THOST_FTDC_PST_Trustee: u8 = 57u8;
pub const THOST_FTDC_PST_TrusteeCorporation: u8 = 65u8;
pub const THOST_FTDC_PST_TrusteeOpen: u8 = 66u8;
pub const THOST_FTDC_PST_TrusteeContact: u8 = 67u8;
pub const THOST_FTDC_PST_ForeignerRefer: u8 = 68u8;
pub const THOST_FTDC_PST_CorporationRefer: u8 = 69u8;
pub const THOST_FTDC_QIR_All: u8 = 49u8;
pub const THOST_FTDC_QIR_Group: u8 = 50u8;
pub const THOST_FTDC_QIR_Single: u8 = 51u8;
pub const THOST_FTDC_IRS_Normal: u8 = 49u8;
pub const THOST_FTDC_IRS_Warn: u8 = 50u8;
pub const THOST_FTDC_IRS_Call: u8 = 51u8;
pub const THOST_FTDC_IRS_Force: u8 = 52u8;
pub const THOST_FTDC_IRS_Exception: u8 = 53u8;
pub const THOST_FTDC_UET_Login: u8 = 49u8;
pub const THOST_FTDC_UET_Logout: u8 = 50u8;
pub const THOST_FTDC_UET_Trading: u8 = 51u8;
pub const THOST_FTDC_UET_TradingError: u8 = 52u8;
pub const THOST_FTDC_UET_UpdatePassword: u8 = 53u8;
pub const THOST_FTDC_UET_Authenticate: u8 = 54u8;
pub const THOST_FTDC_UET_SubmitSysInfo: u8 = 55u8;
pub const THOST_FTDC_UET_Transfer: u8 = 56u8;
pub const THOST_FTDC_UET_Other: u8 = 57u8;
pub const THOST_FTDC_ICS_Close: u8 = 48u8;
pub const THOST_FTDC_ICS_CloseToday: u8 = 49u8;
pub const THOST_FTDC_SM_Non: u8 = 48u8;
pub const THOST_FTDC_SM_Instrument: u8 = 49u8;
pub const THOST_FTDC_SM_Product: u8 = 50u8;
pub const THOST_FTDC_SM_Investor: u8 = 51u8;
pub const THOST_FTDC_PAOS_NotSend: u8 = 49u8;
pub const THOST_FTDC_PAOS_Send: u8 = 50u8;
pub const THOST_FTDC_PAOS_Deleted: u8 = 51u8;
pub const THOST_FTDC_VDS_Dealing: u8 = 49u8;
pub const THOST_FTDC_VDS_DeaclSucceed: u8 = 50u8;
pub const THOST_FTDC_ORGS_Standard: u8 = 48u8;
pub const THOST_FTDC_ORGS_ESunny: u8 = 49u8;
pub const THOST_FTDC_ORGS_KingStarV6: u8 = 50u8;
pub const THOST_FTDC_VTS_NaturalDeal: u8 = 48u8;
pub const THOST_FTDC_VTS_SucceedEnd: u8 = 49u8;
pub const THOST_FTDC_VTS_FailedEND: u8 = 50u8;
pub const THOST_FTDC_VTS_Exception: u8 = 51u8;
pub const THOST_FTDC_VTS_ManualDeal: u8 = 52u8;
pub const THOST_FTDC_VTS_MesException: u8 = 53u8;
pub const THOST_FTDC_VTS_SysException: u8 = 54u8;
pub const THOST_FTDC_VBAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_VBAT_BankCard: u8 = 50u8;
pub const THOST_FTDC_VBAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_VMS_Natural: u8 = 48u8;
pub const THOST_FTDC_VMS_Canceled: u8 = 57u8;
pub const THOST_FTDC_VAA_NoAvailAbility: u8 = 48u8;
pub const THOST_FTDC_VAA_AvailAbility: u8 = 49u8;
pub const THOST_FTDC_VAA_Repeal: u8 = 50u8;
pub const THOST_FTDC_GEN_Program: u8 = 48u8;
pub const THOST_FTDC_GEN_HandWork: u8 = 49u8;
pub const THOST_FTDC_CFMMCKK_REQUEST: u8 = 82u8;
pub const THOST_FTDC_CFMMCKK_AUTO: u8 = 65u8;
pub const THOST_FTDC_CFMMCKK_MANUAL: u8 = 77u8;
pub const THOST_FTDC_CFT_IDCard: u8 = 48u8;
pub const THOST_FTDC_CFT_Passport: u8 = 49u8;
pub const THOST_FTDC_CFT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_CFT_SoldierIDCard: u8 = 51u8;
pub const THOST_FTDC_CFT_HomeComingCard: u8 = 52u8;
pub const THOST_FTDC_CFT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_CFT_LicenseNo: u8 = 54u8;
pub const THOST_FTDC_CFT_InstitutionCodeCard: u8 = 55u8;
pub const THOST_FTDC_CFT_TempLicenseNo: u8 = 56u8;
pub const THOST_FTDC_CFT_NoEnterpriseLicenseNo: u8 = 57u8;
pub const THOST_FTDC_CFT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_CFT_SuperDepAgree: u8 = 97u8;
pub const THOST_FTDC_FBC_Others: u8 = 48u8;
pub const THOST_FTDC_FBC_TransferDetails: u8 = 49u8;
pub const THOST_FTDC_FBC_CustAccStatus: u8 = 50u8;
pub const THOST_FTDC_FBC_AccountTradeDetails: u8 = 51u8;
pub const THOST_FTDC_FBC_FutureAccountChangeInfoDetails: u8 = 52u8;
pub const THOST_FTDC_FBC_CustMoneyDetail: u8 = 53u8;
pub const THOST_FTDC_FBC_CustCancelAccountInfo: u8 = 54u8;
pub const THOST_FTDC_FBC_CustMoneyResult: u8 = 55u8;
pub const THOST_FTDC_FBC_OthersExceptionResult: u8 = 56u8;
pub const THOST_FTDC_FBC_CustInterestNetMoneyDetails: u8 = 57u8;
pub const THOST_FTDC_FBC_CustMoneySendAndReceiveDetails: u8 = 97u8;
pub const THOST_FTDC_FBC_CorporationMoneyTotal: u8 = 98u8;
pub const THOST_FTDC_FBC_MainbodyMoneyTotal: u8 = 99u8;
pub const THOST_FTDC_FBC_MainPartMonitorData: u8 = 100u8;
pub const THOST_FTDC_FBC_PreparationMoney: u8 = 101u8;
pub const THOST_FTDC_FBC_BankMoneyMonitorData: u8 = 102u8;
pub const THOST_FTDC_CEC_Exchange: u8 = 49u8;
pub const THOST_FTDC_CEC_Cash: u8 = 50u8;
pub const THOST_FTDC_YNI_Yes: u8 = 48u8;
pub const THOST_FTDC_YNI_No: u8 = 49u8;
pub const THOST_FTDC_BLT_CurrentMoney: u8 = 48u8;
pub const THOST_FTDC_BLT_UsableMoney: u8 = 49u8;
pub const THOST_FTDC_BLT_FetchableMoney: u8 = 50u8;
pub const THOST_FTDC_BLT_FreezeMoney: u8 = 51u8;
pub const THOST_FTDC_GD_Unknown: u8 = 48u8;
pub const THOST_FTDC_GD_Male: u8 = 49u8;
pub const THOST_FTDC_GD_Female: u8 = 50u8;
pub const THOST_FTDC_FPF_BEN: u8 = 48u8;
pub const THOST_FTDC_FPF_OUR: u8 = 49u8;
pub const THOST_FTDC_FPF_SHA: u8 = 50u8;
pub const THOST_FTDC_PWKT_ExchangeKey: u8 = 48u8;
pub const THOST_FTDC_PWKT_PassWordKey: u8 = 49u8;
pub const THOST_FTDC_PWKT_MACKey: u8 = 50u8;
pub const THOST_FTDC_PWKT_MessageKey: u8 = 51u8;
pub const THOST_FTDC_PWT_Query: u8 = 48u8;
pub const THOST_FTDC_PWT_Fetch: u8 = 49u8;
pub const THOST_FTDC_PWT_Transfer: u8 = 50u8;
pub const THOST_FTDC_PWT_Trade: u8 = 51u8;
pub const THOST_FTDC_EM_NoEncry: u8 = 48u8;
pub const THOST_FTDC_EM_DES: u8 = 49u8;
pub const THOST_FTDC_EM_3DES: u8 = 50u8;
pub const THOST_FTDC_BRF_BankNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRF_BankWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRF_BankBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_BRORF_BrokerNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRORF_BrokerWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRORF_BrokerBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_TS_Bank: u8 = 48u8;
pub const THOST_FTDC_TS_Future: u8 = 49u8;
pub const THOST_FTDC_TS_Store: u8 = 50u8;
pub const THOST_FTDC_LF_Yes: u8 = 48u8;
pub const THOST_FTDC_LF_No: u8 = 49u8;
pub const THOST_FTDC_BAS_Normal: u8 = 48u8;
pub const THOST_FTDC_BAS_Freeze: u8 = 49u8;
pub const THOST_FTDC_BAS_ReportLoss: u8 = 50u8;
pub const THOST_FTDC_MAS_Normal: u8 = 48u8;
pub const THOST_FTDC_MAS_Cancel: u8 = 49u8;
pub const THOST_FTDC_MSS_Point: u8 = 48u8;
pub const THOST_FTDC_MSS_PrePoint: u8 = 49u8;
pub const THOST_FTDC_MSS_CancelPoint: u8 = 50u8;
pub const THOST_FTDC_SYT_FutureBankTransfer: u8 = 48u8;
pub const THOST_FTDC_SYT_StockBankTransfer: u8 = 49u8;
pub const THOST_FTDC_SYT_TheThirdPartStore: u8 = 50u8;
pub const THOST_FTDC_TEF_NormalProcessing: u8 = 48u8;
pub const THOST_FTDC_TEF_Success: u8 = 49u8;
pub const THOST_FTDC_TEF_Failed: u8 = 50u8;
pub const THOST_FTDC_TEF_Abnormal: u8 = 51u8;
pub const THOST_FTDC_TEF_ManualProcessedForException: u8 = 52u8;
pub const THOST_FTDC_TEF_CommuFailedNeedManualProcess: u8 = 53u8;
pub const THOST_FTDC_TEF_SysErrorNeedManualProcess: u8 = 54u8;
pub const THOST_FTDC_PSS_NotProcess: u8 = 48u8;
pub const THOST_FTDC_PSS_StartProcess: u8 = 49u8;
pub const THOST_FTDC_PSS_Finished: u8 = 50u8;
pub const THOST_FTDC_CUSTT_Person: u8 = 48u8;
pub const THOST_FTDC_CUSTT_Institution: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_OOD_Open: u8 = 49u8;
pub const THOST_FTDC_OOD_Destroy: u8 = 48u8;
pub const THOST_FTDC_AVAF_Invalid: u8 = 48u8;
pub const THOST_FTDC_AVAF_Valid: u8 = 49u8;
pub const THOST_FTDC_AVAF_Repeal: u8 = 50u8;
pub const THOST_FTDC_OT_Bank: u8 = 49u8;
pub const THOST_FTDC_OT_Future: u8 = 50u8;
pub const THOST_FTDC_OT_PlateForm: u8 = 57u8;
pub const THOST_FTDC_OL_HeadQuarters: u8 = 49u8;
pub const THOST_FTDC_OL_Branch: u8 = 50u8;
pub const THOST_FTDC_PID_FutureProtocal: u8 = 48u8;
pub const THOST_FTDC_PID_ICBCProtocal: u8 = 49u8;
pub const THOST_FTDC_PID_ABCProtocal: u8 = 50u8;
pub const THOST_FTDC_PID_CBCProtocal: u8 = 51u8;
pub const THOST_FTDC_PID_CCBProtocal: u8 = 52u8;
pub const THOST_FTDC_PID_BOCOMProtocal: u8 = 53u8;
pub const THOST_FTDC_PID_FBTPlateFormProtocal: u8 = 88u8;
pub const THOST_FTDC_CM_ShortConnect: u8 = 48u8;
pub const THOST_FTDC_CM_LongConnect: u8 = 49u8;
pub const THOST_FTDC_SRM_ASync: u8 = 48u8;
pub const THOST_FTDC_SRM_Sync: u8 = 49u8;
pub const THOST_FTDC_BAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_BAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_BAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_FAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_FAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_FAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_OS_Ready: u8 = 48u8;
pub const THOST_FTDC_OS_CheckIn: u8 = 49u8;
pub const THOST_FTDC_OS_CheckOut: u8 = 50u8;
pub const THOST_FTDC_OS_CheckFileArrived: u8 = 51u8;
pub const THOST_FTDC_OS_CheckDetail: u8 = 52u8;
pub const THOST_FTDC_OS_DayEndClean: u8 = 53u8;
pub const THOST_FTDC_OS_Invalid: u8 = 57u8;
pub const THOST_FTDC_CCBFM_ByAmount: u8 = 49u8;
pub const THOST_FTDC_CCBFM_ByMonth: u8 = 50u8;
pub const THOST_FTDC_CAPIT_Client: u8 = 49u8;
pub const THOST_FTDC_CAPIT_Server: u8 = 50u8;
pub const THOST_FTDC_CAPIT_UserApi: u8 = 51u8;
pub const THOST_FTDC_LS_Connected: u8 = 49u8;
pub const THOST_FTDC_LS_Disconnected: u8 = 50u8;
pub const THOST_FTDC_BPWDF_NoCheck: u8 = 48u8;
pub const THOST_FTDC_BPWDF_BlankCheck: u8 = 49u8;
pub const THOST_FTDC_BPWDF_EncryptCheck: u8 = 50u8;
pub const THOST_FTDC_SAT_AccountID: u8 = 49u8;
pub const THOST_FTDC_SAT_CardID: u8 = 50u8;
pub const THOST_FTDC_SAT_SHStockholderID: u8 = 51u8;
pub const THOST_FTDC_SAT_SZStockholderID: u8 = 52u8;
pub const THOST_FTDC_TRFS_Normal: u8 = 48u8;
pub const THOST_FTDC_TRFS_Repealed: u8 = 49u8;
pub const THOST_FTDC_SPTYPE_Broker: u8 = 48u8;
pub const THOST_FTDC_SPTYPE_Bank: u8 = 49u8;
pub const THOST_FTDC_REQRSP_Request: u8 = 48u8;
pub const THOST_FTDC_REQRSP_Response: u8 = 49u8;
pub const THOST_FTDC_FBTUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBTUET_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTUET_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_FBTUET_OpenAccount: u8 = 51u8;
pub const THOST_FTDC_FBTUET_CancelAccount: u8 = 52u8;
pub const THOST_FTDC_FBTUET_ChangeAccount: u8 = 53u8;
pub const THOST_FTDC_FBTUET_RepealFromBankToFuture: u8 = 54u8;
pub const THOST_FTDC_FBTUET_RepealFromFutureToBank: u8 = 55u8;
pub const THOST_FTDC_FBTUET_QueryBankAccount: u8 = 56u8;
pub const THOST_FTDC_FBTUET_QueryFutureAccount: u8 = 57u8;
pub const THOST_FTDC_FBTUET_SignOut: u8 = 65u8;
pub const THOST_FTDC_FBTUET_SyncKey: u8 = 66u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccount: u8 = 67u8;
pub const THOST_FTDC_FBTUET_CancelReserveOpenAccount: u8 = 68u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccountConfirm: u8 = 69u8;
pub const THOST_FTDC_FBTUET_Other: u8 = 90u8;
pub const THOST_FTDC_DBOP_Insert: u8 = 48u8;
pub const THOST_FTDC_DBOP_Update: u8 = 49u8;
pub const THOST_FTDC_DBOP_Delete: u8 = 50u8;
pub const THOST_FTDC_SYNF_Yes: u8 = 48u8;
pub const THOST_FTDC_SYNF_No: u8 = 49u8;
pub const THOST_FTDC_SYNT_OneOffSync: u8 = 48u8;
pub const THOST_FTDC_SYNT_TimerSync: u8 = 49u8;
pub const THOST_FTDC_SYNT_TimerFullSync: u8 = 50u8;
pub const THOST_FTDC_FBEDIR_Settlement: u8 = 48u8;
pub const THOST_FTDC_FBEDIR_Sale: u8 = 49u8;
pub const THOST_FTDC_FBERES_Success: u8 = 48u8;
pub const THOST_FTDC_FBERES_InsufficientBalance: u8 = 49u8;
pub const THOST_FTDC_FBERES_UnknownTrading: u8 = 56u8;
pub const THOST_FTDC_FBERES_Fail: u8 = 120u8;
pub const THOST_FTDC_FBEES_Normal: u8 = 48u8;
pub const THOST_FTDC_FBEES_ReExchange: u8 = 49u8;
pub const THOST_FTDC_FBEFG_DataPackage: u8 = 48u8;
pub const THOST_FTDC_FBEFG_File: u8 = 49u8;
pub const THOST_FTDC_FBEAT_NotTrade: u8 = 48u8;
pub const THOST_FTDC_FBEAT_Trade: u8 = 49u8;
pub const THOST_FTDC_FBEUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBEUET_Exchange: u8 = 49u8;
pub const THOST_FTDC_FBEUET_ReExchange: u8 = 50u8;
pub const THOST_FTDC_FBEUET_QueryBankAccount: u8 = 51u8;
pub const THOST_FTDC_FBEUET_QueryExchDetial: u8 = 52u8;
pub const THOST_FTDC_FBEUET_QueryExchSummary: u8 = 53u8;
pub const THOST_FTDC_FBEUET_QueryExchRate: u8 = 54u8;
pub const THOST_FTDC_FBEUET_CheckBankAccount: u8 = 55u8;
pub const THOST_FTDC_FBEUET_SignOut: u8 = 56u8;
pub const THOST_FTDC_FBEUET_Other: u8 = 90u8;
pub const THOST_FTDC_FBERF_UnProcessed: u8 = 48u8;
pub const THOST_FTDC_FBERF_WaitSend: u8 = 49u8;
pub const THOST_FTDC_FBERF_SendSuccess: u8 = 50u8;
pub const THOST_FTDC_FBERF_SendFailed: u8 = 51u8;
pub const THOST_FTDC_FBERF_WaitReSend: u8 = 52u8;
pub const THOST_FTDC_NC_NOERROR: u8 = 48u8;
pub const THOST_FTDC_NC_Warn: u8 = 49u8;
pub const THOST_FTDC_NC_Call: u8 = 50u8;
pub const THOST_FTDC_NC_Force: u8 = 51u8;
pub const THOST_FTDC_NC_CHUANCANG: u8 = 52u8;
pub const THOST_FTDC_NC_Exception: u8 = 53u8;
pub const THOST_FTDC_FCT_Manual: u8 = 48u8;
pub const THOST_FTDC_FCT_Single: u8 = 49u8;
pub const THOST_FTDC_FCT_Group: u8 = 50u8;
pub const THOST_FTDC_RNM_System: u8 = 48u8;
pub const THOST_FTDC_RNM_SMS: u8 = 49u8;
pub const THOST_FTDC_RNM_EMail: u8 = 50u8;
pub const THOST_FTDC_RNM_Manual: u8 = 51u8;
pub const THOST_FTDC_RNS_NotGen: u8 = 48u8;
pub const THOST_FTDC_RNS_Generated: u8 = 49u8;
pub const THOST_FTDC_RNS_SendError: u8 = 50u8;
pub const THOST_FTDC_RNS_SendOk: u8 = 51u8;
pub const THOST_FTDC_RNS_Received: u8 = 52u8;
pub const THOST_FTDC_RNS_Confirmed: u8 = 53u8;
pub const THOST_FTDC_RUE_ExportData: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceAsc: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceDesc: u8 = 49u8;
pub const THOST_FTDC_COST_AskPriceAsc: u8 = 50u8;
pub const THOST_FTDC_COST_AskPriceDesc: u8 = 51u8;
pub const THOST_FTDC_COST_BidPriceAsc: u8 = 52u8;
pub const THOST_FTDC_COST_BidPriceDesc: u8 = 53u8;
pub const THOST_FTDC_UOAST_NoSend: u8 = 48u8;
pub const THOST_FTDC_UOAST_Sended: u8 = 49u8;
pub const THOST_FTDC_UOAST_Generated: u8 = 50u8;
pub const THOST_FTDC_UOAST_SendFail: u8 = 51u8;
pub const THOST_FTDC_UOAST_Success: u8 = 52u8;
pub const THOST_FTDC_UOAST_Fail: u8 = 53u8;
pub const THOST_FTDC_UOAST_Cancel: u8 = 54u8;
pub const THOST_FTDC_UOACS_NoApply: u8 = 49u8;
pub const THOST_FTDC_UOACS_Submited: u8 = 50u8;
pub const THOST_FTDC_UOACS_Sended: u8 = 51u8;
pub const THOST_FTDC_UOACS_Success: u8 = 52u8;
pub const THOST_FTDC_UOACS_Refuse: u8 = 53u8;
pub const THOST_FTDC_UOACS_Cancel: u8 = 54u8;
pub const THOST_FTDC_QT_Radio: u8 = 49u8;
pub const THOST_FTDC_QT_Option: u8 = 50u8;
pub const THOST_FTDC_QT_Blank: u8 = 51u8;
pub const THOST_FTDC_BT_Request: u8 = 49u8;
pub const THOST_FTDC_BT_Response: u8 = 50u8;
pub const THOST_FTDC_BT_Notice: u8 = 51u8;
pub const THOST_FTDC_CRC_Success: u8 = 48u8;
pub const THOST_FTDC_CRC_Working: u8 = 49u8;
pub const THOST_FTDC_CRC_InfoFail: u8 = 50u8;
pub const THOST_FTDC_CRC_IDCardFail: u8 = 51u8;
pub const THOST_FTDC_CRC_OtherFail: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_All: u8 = 48u8;
pub const THOST_FTDC_CfMMCCT_Person: u8 = 49u8;
pub const THOST_FTDC_CfMMCCT_Company: u8 = 50u8;
pub const THOST_FTDC_CfMMCCT_Other: u8 = 51u8;
pub const THOST_FTDC_CfMMCCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_Asset: u8 = 53u8;
pub const THOST_FTDC_EIDT_SHFE: u8 = 83u8;
pub const THOST_FTDC_EIDT_CZCE: u8 = 90u8;
pub const THOST_FTDC_EIDT_DCE: u8 = 68u8;
pub const THOST_FTDC_EIDT_CFFEX: u8 = 74u8;
pub const THOST_FTDC_EIDT_INE: u8 = 78u8;
pub const THOST_FTDC_ECIDT_Hedge: u8 = 49u8;
pub const THOST_FTDC_ECIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_ECIDT_Speculation: u8 = 51u8;
pub const THOST_FTDC_UF_NoUpdate: u8 = 48u8;
pub const THOST_FTDC_UF_Success: u8 = 49u8;
pub const THOST_FTDC_UF_Fail: u8 = 50u8;
pub const THOST_FTDC_UF_TCSuccess: u8 = 51u8;
pub const THOST_FTDC_UF_TCFail: u8 = 52u8;
pub const THOST_FTDC_UF_Cancel: u8 = 53u8;
pub const THOST_FTDC_AOID_OpenInvestor: u8 = 49u8;
pub const THOST_FTDC_AOID_ModifyIDCard: u8 = 50u8;
pub const THOST_FTDC_AOID_ModifyNoIDCard: u8 = 51u8;
pub const THOST_FTDC_AOID_ApplyTradingCode: u8 = 52u8;
pub const THOST_FTDC_AOID_CancelTradingCode: u8 = 53u8;
pub const THOST_FTDC_AOID_CancelInvestor: u8 = 54u8;
pub const THOST_FTDC_AOID_FreezeAccount: u8 = 56u8;
pub const THOST_FTDC_AOID_ActiveFreezeAccount: u8 = 57u8;
pub const THOST_FTDC_ASID_NoComplete: u8 = 49u8;
pub const THOST_FTDC_ASID_Submited: u8 = 50u8;
pub const THOST_FTDC_ASID_Checked: u8 = 51u8;
pub const THOST_FTDC_ASID_Refused: u8 = 52u8;
pub const THOST_FTDC_ASID_Deleted: u8 = 53u8;
pub const THOST_FTDC_UOASM_ByAPI: u8 = 49u8;
pub const THOST_FTDC_UOASM_ByFile: u8 = 50u8;
pub const THOST_FTDC_EvM_ADD: u8 = 49u8;
pub const THOST_FTDC_EvM_UPDATE: u8 = 50u8;
pub const THOST_FTDC_EvM_DELETE: u8 = 51u8;
pub const THOST_FTDC_EvM_CHECK: u8 = 52u8;
pub const THOST_FTDC_EvM_COPY: u8 = 53u8;
pub const THOST_FTDC_EvM_CANCEL: u8 = 54u8;
pub const THOST_FTDC_EvM_Reverse: u8 = 55u8;
pub const THOST_FTDC_UOAA_ASR: u8 = 49u8;
pub const THOST_FTDC_UOAA_ASNR: u8 = 50u8;
pub const THOST_FTDC_UOAA_NSAR: u8 = 51u8;
pub const THOST_FTDC_UOAA_NSR: u8 = 52u8;
pub const THOST_FTDC_EvM_InvestorGroupFlow: u8 = 49u8;
pub const THOST_FTDC_EvM_InvestorRate: u8 = 50u8;
pub const THOST_FTDC_EvM_InvestorCommRateModel: u8 = 51u8;
pub const THOST_FTDC_CL_Zero: u8 = 48u8;
pub const THOST_FTDC_CL_One: u8 = 49u8;
pub const THOST_FTDC_CL_Two: u8 = 50u8;
pub const THOST_FTDC_CHS_Init: u8 = 48u8;
pub const THOST_FTDC_CHS_Checking: u8 = 49u8;
pub const THOST_FTDC_CHS_Checked: u8 = 50u8;
pub const THOST_FTDC_CHS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CHS_Cancel: u8 = 52u8;
pub const THOST_FTDC_CHU_Unused: u8 = 48u8;
pub const THOST_FTDC_CHU_Used: u8 = 49u8;
pub const THOST_FTDC_CHU_Fail: u8 = 50u8;
pub const THOST_FTDC_BAO_ByAccProperty: u8 = 48u8;
pub const THOST_FTDC_BAO_ByFBTransfer: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByInstrument: u8 = 48u8;
pub const THOST_FTDC_MBTS_ByDayInsPrc: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByDayIns: u8 = 50u8;
pub const THOST_FTDC_OTP_NONE: u8 = 48u8;
pub const THOST_FTDC_OTP_TOTP: u8 = 49u8;
pub const THOST_FTDC_OTPS_Unused: u8 = 48u8;
pub const THOST_FTDC_OTPS_Used: u8 = 49u8;
pub const THOST_FTDC_OTPS_Disuse: u8 = 50u8;
pub const THOST_FTDC_BUT_Investor: u8 = 49u8;
pub const THOST_FTDC_BUT_BrokerUser: u8 = 50u8;
pub const THOST_FTDC_FUTT_Commodity: u8 = 49u8;
pub const THOST_FTDC_FUTT_Financial: u8 = 50u8;
pub const THOST_FTDC_FET_Restriction: u8 = 48u8;
pub const THOST_FTDC_FET_TodayRestriction: u8 = 49u8;
pub const THOST_FTDC_FET_Transfer: u8 = 50u8;
pub const THOST_FTDC_FET_Credit: u8 = 51u8;
pub const THOST_FTDC_FET_InvestorWithdrawAlm: u8 = 52u8;
pub const THOST_FTDC_FET_BankRestriction: u8 = 53u8;
pub const THOST_FTDC_FET_Accountregister: u8 = 54u8;
pub const THOST_FTDC_FET_ExchangeFundIO: u8 = 55u8;
pub const THOST_FTDC_FET_InvestorFundIO: u8 = 56u8;
pub const THOST_FTDC_AST_FBTransfer: u8 = 48u8;
pub const THOST_FTDC_AST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_CST_UnifyAccount: u8 = 48u8;
pub const THOST_FTDC_CST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_UR_All: u8 = 48u8;
pub const THOST_FTDC_UR_Single: u8 = 49u8;
pub const THOST_FTDC_BG_Investor: u8 = 50u8;
pub const THOST_FTDC_BG_Group: u8 = 49u8;
pub const THOST_FTDC_TSSM_Instrument: u8 = 49u8;
pub const THOST_FTDC_TSSM_Product: u8 = 50u8;
pub const THOST_FTDC_TSSM_Exchange: u8 = 51u8;
pub const THOST_FTDC_ESM_Relative: u8 = 49u8;
pub const THOST_FTDC_ESM_Typical: u8 = 50u8;
pub const THOST_FTDC_RIR_All: u8 = 49u8;
pub const THOST_FTDC_RIR_Model: u8 = 50u8;
pub const THOST_FTDC_RIR_Single: u8 = 51u8;
pub const THOST_FTDC_SDS_Initialize: u8 = 48u8;
pub const THOST_FTDC_SDS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_SDS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_TSRC_NORMAL: u8 = 48u8;
pub const THOST_FTDC_TSRC_QUERY: u8 = 49u8;
pub const THOST_FTDC_FSM_Product: u8 = 49u8;
pub const THOST_FTDC_FSM_Exchange: u8 = 50u8;
pub const THOST_FTDC_FSM_All: u8 = 51u8;
pub const THOST_FTDC_BIR_Property: u8 = 49u8;
pub const THOST_FTDC_BIR_All: u8 = 50u8;
pub const THOST_FTDC_PIR_All: u8 = 49u8;
pub const THOST_FTDC_PIR_Property: u8 = 50u8;
pub const THOST_FTDC_PIR_Single: u8 = 51u8;
pub const THOST_FTDC_FIS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_FIS_Created: u8 = 49u8;
pub const THOST_FTDC_FIS_Failed: u8 = 50u8;
pub const THOST_FTDC_FGS_FileTransmit: u8 = 48u8;
pub const THOST_FTDC_FGS_FileGen: u8 = 49u8;
pub const THOST_FTDC_SoM_Add: u8 = 49u8;
pub const THOST_FTDC_SoM_Update: u8 = 50u8;
pub const THOST_FTDC_SoM_Delete: u8 = 51u8;
pub const THOST_FTDC_SoM_Copy: u8 = 52u8;
pub const THOST_FTDC_SoM_AcTive: u8 = 53u8;
pub const THOST_FTDC_SoM_CanCel: u8 = 54u8;
pub const THOST_FTDC_SoM_ReSet: u8 = 55u8;
pub const THOST_FTDC_SoT_UpdatePassword: u8 = 48u8;
pub const THOST_FTDC_SoT_UserDepartment: u8 = 49u8;
pub const THOST_FTDC_SoT_RoleManager: u8 = 50u8;
pub const THOST_FTDC_SoT_RoleFunction: u8 = 51u8;
pub const THOST_FTDC_SoT_BaseParam: u8 = 52u8;
pub const THOST_FTDC_SoT_SetUserID: u8 = 53u8;
pub const THOST_FTDC_SoT_SetUserRole: u8 = 54u8;
pub const THOST_FTDC_SoT_UserIpRestriction: u8 = 55u8;
pub const THOST_FTDC_SoT_DepartmentManager: u8 = 56u8;
pub const THOST_FTDC_SoT_DepartmentCopy: u8 = 57u8;
pub const THOST_FTDC_SoT_Tradingcode: u8 = 65u8;
pub const THOST_FTDC_SoT_InvestorStatus: u8 = 66u8;
pub const THOST_FTDC_SoT_InvestorAuthority: u8 = 67u8;
pub const THOST_FTDC_SoT_PropertySet: u8 = 68u8;
pub const THOST_FTDC_SoT_ReSetInvestorPasswd: u8 = 69u8;
pub const THOST_FTDC_SoT_InvestorPersonalityInfo: u8 = 70u8;
pub const THOST_FTDC_CSRCQ_Current: u8 = 48u8;
pub const THOST_FTDC_CSRCQ_History: u8 = 49u8;
pub const THOST_FTDC_FRS_Normal: u8 = 49u8;
pub const THOST_FTDC_FRS_Freeze: u8 = 48u8;
pub const THOST_FTDC_STST_Standard: u8 = 48u8;
pub const THOST_FTDC_STST_NonStandard: u8 = 49u8;
pub const THOST_FTDC_RPT_Freeze: u8 = 49u8;
pub const THOST_FTDC_RPT_FreezeActive: u8 = 50u8;
pub const THOST_FTDC_RPT_OpenLimit: u8 = 51u8;
pub const THOST_FTDC_RPT_RelieveOpenLimit: u8 = 52u8;
pub const THOST_FTDC_AMLDS_Normal: u8 = 48u8;
pub const THOST_FTDC_AMLDS_Deleted: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Init: u8 = 48u8;
pub const THOST_FTDC_AMLCHS_Checking: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Checked: u8 = 50u8;
pub const THOST_FTDC_AMLCHS_RefuseReport: u8 = 51u8;
pub const THOST_FTDC_AMLDT_DrawDay: u8 = 48u8;
pub const THOST_FTDC_AMLDT_TouchDay: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel0: u8 = 48u8;
pub const THOST_FTDC_AMLCL_CheckLevel1: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel2: u8 = 50u8;
pub const THOST_FTDC_AMLCL_CheckLevel3: u8 = 51u8;
pub const THOST_FTDC_EFT_CSV: u8 = 48u8;
pub const THOST_FTDC_EFT_EXCEL: u8 = 49u8;
pub const THOST_FTDC_EFT_DBF: u8 = 50u8;
pub const THOST_FTDC_SMT_Before: u8 = 49u8;
pub const THOST_FTDC_SMT_Settlement: u8 = 50u8;
pub const THOST_FTDC_SMT_After: u8 = 51u8;
pub const THOST_FTDC_SMT_Settlemented: u8 = 52u8;
pub const THOST_FTDC_SML_Must: u8 = 49u8;
pub const THOST_FTDC_SML_Alarm: u8 = 50u8;
pub const THOST_FTDC_SML_Prompt: u8 = 51u8;
pub const THOST_FTDC_SML_Ignore: u8 = 52u8;
pub const THOST_FTDC_SMG_Exhcange: u8 = 49u8;
pub const THOST_FTDC_SMG_ASP: u8 = 50u8;
pub const THOST_FTDC_SMG_CSRC: u8 = 51u8;
pub const THOST_FTDC_LUT_Repeatable: u8 = 49u8;
pub const THOST_FTDC_LUT_Unrepeatable: u8 = 50u8;
pub const THOST_FTDC_DAR_Settle: u8 = 49u8;
pub const THOST_FTDC_DAR_Exchange: u8 = 50u8;
pub const THOST_FTDC_DAR_CSRC: u8 = 51u8;
pub const THOST_FTDC_MGT_ExchMarginRate: u8 = 48u8;
pub const THOST_FTDC_MGT_InstrMarginRate: u8 = 49u8;
pub const THOST_FTDC_MGT_InstrMarginRateTrade: u8 = 50u8;
pub const THOST_FTDC_ACT_Intraday: u8 = 49u8;
pub const THOST_FTDC_ACT_Long: u8 = 50u8;
pub const THOST_FTDC_MRT_Exchange: u8 = 49u8;
pub const THOST_FTDC_MRT_Investor: u8 = 50u8;
pub const THOST_FTDC_MRT_InvestorTrade: u8 = 51u8;
pub const THOST_FTDC_BUS_UnBak: u8 = 48u8;
pub const THOST_FTDC_BUS_BakUp: u8 = 49u8;
pub const THOST_FTDC_BUS_BakUped: u8 = 50u8;
pub const THOST_FTDC_BUS_BakFail: u8 = 51u8;
pub const THOST_FTDC_SIS_UnInitialize: u8 = 48u8;
pub const THOST_FTDC_SIS_Initialize: u8 = 49u8;
pub const THOST_FTDC_SIS_Initialized: u8 = 50u8;
pub const THOST_FTDC_SRS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_SRS_Create: u8 = 49u8;
pub const THOST_FTDC_SRS_Created: u8 = 50u8;
pub const THOST_FTDC_SRS_CreateFail: u8 = 51u8;
pub const THOST_FTDC_SSS_UnSaveData: u8 = 48u8;
pub const THOST_FTDC_SSS_SaveDatad: u8 = 49u8;
pub const THOST_FTDC_SAS_UnArchived: u8 = 48u8;
pub const THOST_FTDC_SAS_Archiving: u8 = 49u8;
pub const THOST_FTDC_SAS_Archived: u8 = 50u8;
pub const THOST_FTDC_SAS_ArchiveFail: u8 = 51u8;
pub const THOST_FTDC_CTPT_Unkown: u8 = 48u8;
pub const THOST_FTDC_CTPT_MainCenter: u8 = 49u8;
pub const THOST_FTDC_CTPT_BackUp: u8 = 50u8;
pub const THOST_FTDC_CDT_Normal: u8 = 48u8;
pub const THOST_FTDC_CDT_SpecFirst: u8 = 49u8;
pub const THOST_FTDC_MFUR_None: u8 = 48u8;
pub const THOST_FTDC_MFUR_Margin: u8 = 49u8;
pub const THOST_FTDC_MFUR_All: u8 = 50u8;
pub const THOST_FTDC_MFUR_CNY3: u8 = 51u8;
pub const THOST_FTDC_SPT_CzceHedge: u8 = 49u8;
pub const THOST_FTDC_SPT_IneForeignCurrency: u8 = 50u8;
pub const THOST_FTDC_SPT_DceOpenClose: u8 = 51u8;
pub const THOST_FTDC_FMT_Mortgage: u8 = 49u8;
pub const THOST_FTDC_FMT_Redemption: u8 = 50u8;
pub const THOST_FTDC_ASPI_BaseMargin: u8 = 49u8;
pub const THOST_FTDC_ASPI_LowestInterest: u8 = 50u8;
pub const THOST_FTDC_FMD_In: u8 = 49u8;
pub const THOST_FTDC_FMD_Out: u8 = 50u8;
pub const THOST_FTDC_BT_Profit: u8 = 48u8;
pub const THOST_FTDC_BT_Loss: u8 = 49u8;
pub const THOST_FTDC_BT_Other: u8 = 90u8;
pub const THOST_FTDC_SST_Manual: u8 = 48u8;
pub const THOST_FTDC_SST_Automatic: u8 = 49u8;
pub const THOST_FTDC_CED_Settlement: u8 = 48u8;
pub const THOST_FTDC_CED_Sale: u8 = 49u8;
pub const THOST_FTDC_CSS_Entry: u8 = 49u8;
pub const THOST_FTDC_CSS_Approve: u8 = 50u8;
pub const THOST_FTDC_CSS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CSS_Revoke: u8 = 52u8;
pub const THOST_FTDC_CSS_Send: u8 = 53u8;
pub const THOST_FTDC_CSS_Success: u8 = 54u8;
pub const THOST_FTDC_CSS_Failure: u8 = 55u8;
pub const THOST_FTDC_REQF_NoSend: u8 = 48u8;
pub const THOST_FTDC_REQF_SendSuccess: u8 = 49u8;
pub const THOST_FTDC_REQF_SendFailed: u8 = 50u8;
pub const THOST_FTDC_REQF_WaitReSend: u8 = 51u8;
pub const THOST_FTDC_RESF_Success: u8 = 48u8;
pub const THOST_FTDC_RESF_InsuffiCient: u8 = 49u8;
pub const THOST_FTDC_RESF_UnKnown: u8 = 56u8;
pub const THOST_FTDC_EXS_Before: u8 = 48u8;
pub const THOST_FTDC_EXS_After: u8 = 49u8;
pub const THOST_FTDC_CR_Domestic: u8 = 49u8;
pub const THOST_FTDC_CR_GMT: u8 = 50u8;
pub const THOST_FTDC_CR_Foreign: u8 = 51u8;
pub const THOST_FTDC_HB_No: u8 = 48u8;
pub const THOST_FTDC_HB_Yes: u8 = 49u8;
pub const THOST_FTDC_SM_Normal: u8 = 49u8;
pub const THOST_FTDC_SM_Emerge: u8 = 50u8;
pub const THOST_FTDC_SM_Restore: u8 = 51u8;
pub const THOST_FTDC_TPT_Full: u8 = 49u8;
pub const THOST_FTDC_TPT_Increment: u8 = 50u8;
pub const THOST_FTDC_TPT_BackUp: u8 = 51u8;
pub const THOST_FTDC_LM_Trade: u8 = 48u8;
pub const THOST_FTDC_LM_Transfer: u8 = 49u8;
pub const THOST_FTDC_CPT_Instrument: u8 = 49u8;
pub const THOST_FTDC_CPT_Margin: u8 = 50u8;
pub const THOST_FTDC_HT_Yes: u8 = 49u8;
pub const THOST_FTDC_HT_No: u8 = 48u8;
pub const THOST_FTDC_AMT_Bank: u8 = 49u8;
pub const THOST_FTDC_AMT_Securities: u8 = 50u8;
pub const THOST_FTDC_AMT_Fund: u8 = 51u8;
pub const THOST_FTDC_AMT_Insurance: u8 = 52u8;
pub const THOST_FTDC_AMT_Trust: u8 = 53u8;
pub const THOST_FTDC_AMT_Other: u8 = 57u8;
pub const THOST_FTDC_CFIOT_FundIO: u8 = 48u8;
pub const THOST_FTDC_CFIOT_SwapCurrency: u8 = 49u8;
pub const THOST_FTDC_CAT_Futures: u8 = 49u8;
pub const THOST_FTDC_CAT_AssetmgrFuture: u8 = 50u8;
pub const THOST_FTDC_CAT_AssetmgrTrustee: u8 = 51u8;
pub const THOST_FTDC_CAT_AssetmgrTransfer: u8 = 52u8;
pub const THOST_FTDC_LT_Chinese: u8 = 49u8;
pub const THOST_FTDC_LT_English: u8 = 50u8;
pub const THOST_FTDC_AMCT_Person: u8 = 49u8;
pub const THOST_FTDC_AMCT_Organ: u8 = 50u8;
pub const THOST_FTDC_AMCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_ASST_Futures: u8 = 51u8;
pub const THOST_FTDC_ASST_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CIT_HasExch: u8 = 48u8;
pub const THOST_FTDC_CIT_HasATP: u8 = 49u8;
pub const THOST_FTDC_CIT_HasDiff: u8 = 50u8;
pub const THOST_FTDC_DT_HandDeliv: u8 = 49u8;
pub const THOST_FTDC_DT_PersonDeliv: u8 = 50u8;
pub const THOST_FTDC_MMSA_NO: u8 = 48u8;
pub const THOST_FTDC_MMSA_YES: u8 = 49u8;
pub const THOST_FTDC_CACT_Person: u8 = 48u8;
pub const THOST_FTDC_CACT_Company: u8 = 49u8;
pub const THOST_FTDC_CACT_Other: u8 = 50u8;
pub const THOST_FTDC_UOAAT_Futures: u8 = 49u8;
pub const THOST_FTDC_UOAAT_SpecialOrgan: u8 = 50u8;
pub const THOST_FTDC_DEN_Buy: u8 = 48u8;
pub const THOST_FTDC_DEN_Sell: u8 = 49u8;
pub const THOST_FTDC_OFEN_Open: u8 = 48u8;
pub const THOST_FTDC_OFEN_Close: u8 = 49u8;
pub const THOST_FTDC_OFEN_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OFEN_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OFEN_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OFEN_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OFEN_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_HFEN_Speculation: u8 = 49u8;
pub const THOST_FTDC_HFEN_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HFEN_Hedge: u8 = 51u8;
pub const THOST_FTDC_FIOTEN_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOTEN_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOTEN_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FTEN_Deposite: u8 = 49u8;
pub const THOST_FTDC_FTEN_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FTEN_Company: u8 = 51u8;
pub const THOST_FTDC_FTEN_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FDEN_In: u8 = 49u8;
pub const THOST_FTDC_FDEN_Out: u8 = 50u8;
pub const THOST_FTDC_FMDEN_In: u8 = 49u8;
pub const THOST_FTDC_FMDEN_Out: u8 = 50u8;
pub const THOST_FTDC_CP_CallOptions: u8 = 49u8;
pub const THOST_FTDC_CP_PutOptions: u8 = 50u8;
pub const THOST_FTDC_STM_Continental: u8 = 48u8;
pub const THOST_FTDC_STM_American: u8 = 49u8;
pub const THOST_FTDC_STM_Bermuda: u8 = 50u8;
pub const THOST_FTDC_STT_Hedge: u8 = 48u8;
pub const THOST_FTDC_STT_Match: u8 = 49u8;
pub const THOST_FTDC_APPT_NotStrikeNum: u8 = 52u8;
pub const THOST_FTDC_GUDS_Gen: u8 = 48u8;
pub const THOST_FTDC_GUDS_Hand: u8 = 49u8;
pub const THOST_FTDC_OER_NoExec: u8 = 110u8;
pub const THOST_FTDC_OER_Canceled: u8 = 99u8;
pub const THOST_FTDC_OER_OK: u8 = 48u8;
pub const THOST_FTDC_OER_NoPosition: u8 = 49u8;
pub const THOST_FTDC_OER_NoDeposit: u8 = 50u8;
pub const THOST_FTDC_OER_NoParticipant: u8 = 51u8;
pub const THOST_FTDC_OER_NoClient: u8 = 52u8;
pub const THOST_FTDC_OER_NoInstrument: u8 = 54u8;
pub const THOST_FTDC_OER_NoRight: u8 = 55u8;
pub const THOST_FTDC_OER_InvalidVolume: u8 = 56u8;
pub const THOST_FTDC_OER_NoEnoughHistoryTrade: u8 = 57u8;
pub const THOST_FTDC_OER_Unknown: u8 = 97u8;
pub const THOST_FTDC_COMBT_Future: u8 = 48u8;
pub const THOST_FTDC_COMBT_BUL: u8 = 49u8;
pub const THOST_FTDC_COMBT_BER: u8 = 50u8;
pub const THOST_FTDC_COMBT_STD: u8 = 51u8;
pub const THOST_FTDC_COMBT_STG: u8 = 52u8;
pub const THOST_FTDC_COMBT_PRT: u8 = 53u8;
pub const THOST_FTDC_COMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_COMBT_OPL: u8 = 55u8;
pub const THOST_FTDC_COMBT_BFO: u8 = 56u8;
pub const THOST_FTDC_COMBT_BLS: u8 = 57u8;
pub const THOST_FTDC_COMBT_BES: u8 = 97u8;
pub const THOST_FTDC_DCECOMBT_SPL: u8 = 48u8;
pub const THOST_FTDC_DCECOMBT_OPL: u8 = 49u8;
pub const THOST_FTDC_DCECOMBT_SP: u8 = 50u8;
pub const THOST_FTDC_DCECOMBT_SPC: u8 = 51u8;
pub const THOST_FTDC_DCECOMBT_BLS: u8 = 52u8;
pub const THOST_FTDC_DCECOMBT_BES: u8 = 53u8;
pub const THOST_FTDC_DCECOMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_DCECOMBT_STD: u8 = 55u8;
pub const THOST_FTDC_DCECOMBT_STG: u8 = 56u8;
pub const THOST_FTDC_DCECOMBT_BFO: u8 = 57u8;
pub const THOST_FTDC_DCECOMBT_SFO: u8 = 97u8;
pub const THOST_FTDC_ORPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_ORPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_ORPT_MaxPreSettlementPrice: u8 = 53u8;
pub const THOST_FTDC_BLAG_Default: u8 = 49u8;
pub const THOST_FTDC_BLAG_IncludeOptValLost: u8 = 50u8;
pub const THOST_FTDC_ACTP_Exec: u8 = 49u8;
pub const THOST_FTDC_ACTP_Abandon: u8 = 50u8;
pub const THOST_FTDC_FQST_Submitted: u8 = 97u8;
pub const THOST_FTDC_FQST_Accepted: u8 = 98u8;
pub const THOST_FTDC_FQST_Rejected: u8 = 99u8;
pub const THOST_FTDC_VM_Absolute: u8 = 48u8;
pub const THOST_FTDC_VM_Ratio: u8 = 49u8;
pub const THOST_FTDC_EOPF_Reserve: u8 = 48u8;
pub const THOST_FTDC_EOPF_UnReserve: u8 = 49u8;
pub const THOST_FTDC_EOCF_AutoClose: u8 = 48u8;
pub const THOST_FTDC_EOCF_NotToClose: u8 = 49u8;
pub const THOST_FTDC_PTE_Futures: u8 = 49u8;
pub const THOST_FTDC_PTE_Options: u8 = 50u8;
pub const THOST_FTDC_CUFN_CUFN_O: u8 = 79u8;
pub const THOST_FTDC_CUFN_CUFN_T: u8 = 84u8;
pub const THOST_FTDC_CUFN_CUFN_P: u8 = 80u8;
pub const THOST_FTDC_CUFN_CUFN_N: u8 = 78u8;
pub const THOST_FTDC_CUFN_CUFN_L: u8 = 76u8;
pub const THOST_FTDC_CUFN_CUFN_F: u8 = 70u8;
pub const THOST_FTDC_CUFN_CUFN_C: u8 = 67u8;
pub const THOST_FTDC_CUFN_CUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_O: u8 = 79u8;
pub const THOST_FTDC_DUFN_DUFN_T: u8 = 84u8;
pub const THOST_FTDC_DUFN_DUFN_P: u8 = 80u8;
pub const THOST_FTDC_DUFN_DUFN_F: u8 = 70u8;
pub const THOST_FTDC_DUFN_DUFN_C: u8 = 67u8;
pub const THOST_FTDC_DUFN_DUFN_D: u8 = 68u8;
pub const THOST_FTDC_DUFN_DUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_S: u8 = 83u8;
pub const THOST_FTDC_SUFN_SUFN_O: u8 = 79u8;
pub const THOST_FTDC_SUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_SUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_SUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_CFUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_CFUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_S: u8 = 83u8;
pub const THOST_FTDC_CMDR_Comb: u8 = 48u8;
pub const THOST_FTDC_CMDR_UnComb: u8 = 49u8;
pub const THOST_FTDC_CMDR_DelComb: u8 = 50u8;
pub const THOST_FTDC_STOV_RealValue: u8 = 49u8;
pub const THOST_FTDC_STOV_ProfitValue: u8 = 50u8;
pub const THOST_FTDC_STOV_RealRatio: u8 = 51u8;
pub const THOST_FTDC_STOV_ProfitRatio: u8 = 52u8;
pub const THOST_FTDC_ROAST_Processing: u8 = 48u8;
pub const THOST_FTDC_ROAST_Cancelled: u8 = 49u8;
pub const THOST_FTDC_ROAST_Opened: u8 = 50u8;
pub const THOST_FTDC_ROAST_Invalid: u8 = 51u8;
pub const THOST_FTDC_WPSR_Lib: u8 = 49u8;
pub const THOST_FTDC_WPSR_Manual: u8 = 50u8;
pub const THOST_FTDC_OSCF_CloseSelfOptionPosition: u8 = 49u8;
pub const THOST_FTDC_OSCF_ReserveOptionPosition: u8 = 50u8;
pub const THOST_FTDC_OSCF_SellCloseSelfFuturePosition: u8 = 51u8;
pub const THOST_FTDC_OSCF_ReserveFuturePosition: u8 = 52u8;
pub const THOST_FTDC_BZTP_Future: u8 = 49u8;
pub const THOST_FTDC_BZTP_Stock: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_Investor: u8 = 49u8;
pub const THOST_FTDC_APP_TYPE_InvestorRelay: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_OperatorRelay: u8 = 51u8;
pub const THOST_FTDC_APP_TYPE_UnKnown: u8 = 52u8;
pub const THOST_FTDC_RV_Right: u8 = 48u8;
pub const THOST_FTDC_RV_Refuse: u8 = 49u8;
pub const THOST_FTDC_OTC_TRDT_Block: u8 = 48u8;
pub const THOST_FTDC_OTC_TRDT_EFP: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_DV01: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_ParValue: u8 = 50u8;
pub const THOST_FTDC_AU_WHITE: u8 = 48u8;
pub const THOST_FTDC_AU_BLACK: u8 = 49u8;
pub const THOST_FTDC_INS_ALL: u8 = 48u8;
pub const THOST_FTDC_INS_FUTURE: u8 = 49u8;
pub const THOST_FTDC_INS_OPTION: u8 = 50u8;
pub const THOST_FTDC_INS_COMB: u8 = 51u8;
pub const THOST_FTDC_TD_ALL: u8 = 48u8;
pub const THOST_FTDC_TD_TRADE: u8 = 49u8;
pub const THOST_FTDC_TD_UNTRADE: u8 = 50u8;
pub const THOST_FTDC_PS_tradeable: u8 = 49u8;
pub const THOST_FTDC_PS_untradeable: u8 = 50u8;
pub const THOST_FTDC_SDS_Readable: u8 = 49u8;
pub const THOST_FTDC_SDS_Reading: u8 = 50u8;
pub const THOST_FTDC_SDS_Readend: u8 = 51u8;
pub const THOST_FTDC_SDS_OptErr: u8 = 101u8;
pub const THOST_FTDC_ACD_Add: u8 = 49u8;
pub const THOST_FTDC_ACD_Del: u8 = 50u8;
pub const THOST_FTDC_ACD_Upd: u8 = 51u8;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESTART: THOST_TE_RESUME_TYPE = 0;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESUME: THOST_TE_RESUME_TYPE = 1;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_QUICK: THOST_TE_RESUME_TYPE = 2;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_NONE: THOST_TE_RESUME_TYPE = 3;
pub type THOST_TE_RESUME_TYPE = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTraderIDType是一个交易所交易员代码类型"]
#[doc = ""]
pub type TThostFtdcTraderIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcInvestorIDType是一个投资者代码类型"]
#[doc = ""]
pub type TThostFtdcInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBrokerIDType是一个经纪公司代码类型"]
#[doc = ""]
pub type TThostFtdcBrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBrokerAbbrType是一个经纪公司简称类型"]
#[doc = ""]
pub type TThostFtdcBrokerAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcBrokerNameType是一个经纪公司名称类型"]
#[doc = ""]
pub type TThostFtdcBrokerNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOldExchangeInstIDType是一个合约在交易所的代码类型"]
#[doc = ""]
pub type TThostFtdcOldExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcExchangeInstIDType是一个合约在交易所的代码类型"]
#[doc = ""]
pub type TThostFtdcExchangeInstIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOrderRefType是一个报单引用类型"]
#[doc = ""]
pub type TThostFtdcOrderRefType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcParticipantIDType是一个会员代码类型"]
#[doc = ""]
pub type TThostFtdcParticipantIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUserIDType是一个用户代码类型"]
#[doc = ""]
pub type TThostFtdcUserIDType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcPasswordType是一个密码类型"]
#[doc = ""]
pub type TThostFtdcPasswordType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcClientIDType是一个交易编码类型"]
#[doc = ""]
pub type TThostFtdcClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcInstrumentIDType是一个合约代码类型"]
#[doc = ""]
pub type TThostFtdcInstrumentIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcOldInstrumentIDType是一个合约代码类型"]
#[doc = ""]
pub type TThostFtdcOldInstrumentIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcInstrumentCodeType是一个合约标识码类型"]
#[doc = ""]
pub type TThostFtdcInstrumentCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcMarketIDType是一个市场代码类型"]
#[doc = ""]
pub type TThostFtdcMarketIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcProductNameType是一个产品名称类型"]
#[doc = ""]
pub type TThostFtdcProductNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcExchangeIDType是一个交易所代码类型"]
#[doc = ""]
pub type TThostFtdcExchangeIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcExchangeNameType是一个交易所名称类型"]
#[doc = ""]
pub type TThostFtdcExchangeNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcExchangeAbbrType是一个交易所简称类型"]
#[doc = ""]
pub type TThostFtdcExchangeAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcExchangeFlagType是一个交易所标志类型"]
#[doc = ""]
pub type TThostFtdcExchangeFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcMacAddressType是一个Mac地址类型"]
#[doc = ""]
pub type TThostFtdcMacAddressType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSystemIDType是一个系统编号类型"]
#[doc = ""]
pub type TThostFtdcSystemIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcClientLoginRemarkType是一个客户登录备注2类型"]
#[doc = ""]
pub type TThostFtdcClientLoginRemarkType = [::std::os::raw::c_uchar; 151usize];
pub type TThostFtdcExchangePropertyType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcDateType是一个日期类型"]
#[doc = ""]
pub type TThostFtdcDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTimeType是一个时间类型"]
#[doc = ""]
pub type TThostFtdcTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcLongTimeType是一个长时间类型"]
#[doc = ""]
pub type TThostFtdcLongTimeType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcInstrumentNameType是一个合约名称类型"]
#[doc = ""]
pub type TThostFtdcInstrumentNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSettlementGroupIDType是一个结算组代码类型"]
#[doc = ""]
pub type TThostFtdcSettlementGroupIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcOrderSysIDType是一个报单编号类型"]
#[doc = ""]
pub type TThostFtdcOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcTradeIDType是一个成交编号类型"]
#[doc = ""]
pub type TThostFtdcTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCommandTypeType是一个DB命令类型类型"]
#[doc = ""]
pub type TThostFtdcCommandTypeType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcOldIPAddressType是一个IP地址类型"]
#[doc = ""]
pub type TThostFtdcOldIPAddressType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcIPAddressType是一个IP地址类型"]
#[doc = ""]
pub type TThostFtdcIPAddressType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcIPPortType是一个IP端口类型"]
#[doc = ""]
pub type TThostFtdcIPPortType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcProductInfoType是一个产品信息类型"]
#[doc = ""]
pub type TThostFtdcProductInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcProtocolInfoType是一个协议信息类型"]
#[doc = ""]
pub type TThostFtdcProtocolInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBusinessUnitType是一个业务单元类型"]
#[doc = ""]
pub type TThostFtdcBusinessUnitType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcDepositSeqNoType是一个出入金流水号类型"]
#[doc = ""]
pub type TThostFtdcDepositSeqNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = ""]
#[doc = "TFtdcIdentifiedCardNoType是一个证件号码类型"]
#[doc = ""]
pub type TThostFtdcIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
pub type TThostFtdcIdCardTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOrderLocalIDType是一个本地报单编号类型"]
#[doc = ""]
pub type TThostFtdcOrderLocalIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcUserNameType是一个用户名称类型"]
#[doc = ""]
pub type TThostFtdcUserNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcPartyNameType是一个参与人名称类型"]
#[doc = ""]
pub type TThostFtdcPartyNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcErrorMsgType是一个错误信息类型"]
#[doc = ""]
pub type TThostFtdcErrorMsgType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcFieldNameType是一个字段名类型"]
#[doc = ""]
pub type TThostFtdcFieldNameType = [::std::os::raw::c_uchar; 2049usize];
#[doc = ""]
#[doc = "TFtdcFieldContentType是一个字段内容类型"]
#[doc = ""]
pub type TThostFtdcFieldContentType = [::std::os::raw::c_uchar; 2049usize];
#[doc = ""]
#[doc = "TFtdcSystemNameType是一个系统名称类型"]
#[doc = ""]
pub type TThostFtdcSystemNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcContentType是一个消息正文类型"]
#[doc = ""]
pub type TThostFtdcContentType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDepartmentRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTraderConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderActionStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSubmitStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRoleType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcAPIProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPosiDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysSettlementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRatioAttrType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcForceCloseReasonType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTimeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcVolumeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcContingentConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRightType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSpecPosiTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPriceSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstrumentStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstStatusEnterReasonType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOrderActionRefType是一个报单操作引用类型"]
#[doc = ""]
pub type TThostFtdcOrderActionRefType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInstallCountType是一个安装数量类型"]
#[doc = ""]
pub type TThostFtdcInstallCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInstallIDType是一个安装编号类型"]
#[doc = ""]
pub type TThostFtdcInstallIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcErrorIDType是一个错误代码类型"]
#[doc = ""]
pub type TThostFtdcErrorIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSettlementIDType是一个结算编号类型"]
#[doc = ""]
pub type TThostFtdcSettlementIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcVolumeType是一个数量类型"]
#[doc = ""]
pub type TThostFtdcVolumeType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFrontIDType是一个前置编号类型"]
#[doc = ""]
pub type TThostFtdcFrontIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSessionIDType是一个会话编号类型"]
#[doc = ""]
pub type TThostFtdcSessionIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSequenceNoType是一个序号类型"]
#[doc = ""]
pub type TThostFtdcSequenceNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCommandNoType是一个DB命令序号类型"]
#[doc = ""]
pub type TThostFtdcCommandNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcMillisecType是一个时间（毫秒）类型"]
#[doc = ""]
pub type TThostFtdcMillisecType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSecType是一个时间（秒）类型"]
#[doc = ""]
pub type TThostFtdcSecType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcVolumeMultipleType是一个合约数量乘数类型"]
#[doc = ""]
pub type TThostFtdcVolumeMultipleType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradingSegmentSNType是一个交易阶段编号类型"]
#[doc = ""]
pub type TThostFtdcTradingSegmentSNType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRequestIDType是一个请求编号类型"]
#[doc = ""]
pub type TThostFtdcRequestIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcYearType是一个年份类型"]
#[doc = ""]
pub type TThostFtdcYearType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcMonthType是一个月份类型"]
#[doc = ""]
pub type TThostFtdcMonthType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBoolType是一个布尔型类型"]
#[doc = ""]
pub type TThostFtdcBoolType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcPriceType是一个价格类型"]
#[doc = ""]
pub type TThostFtdcPriceType = f64;
#[doc = ""]
#[doc = "TFtdcCombOffsetFlagType是一个组合开平标志类型"]
#[doc = ""]
pub type TThostFtdcCombOffsetFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcCombHedgeFlagType是一个组合投机套保标志类型"]
#[doc = ""]
pub type TThostFtdcCombHedgeFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcRatioType是一个比率类型"]
#[doc = ""]
pub type TThostFtdcRatioType = f64;
#[doc = ""]
#[doc = "TFtdcMoneyType是一个资金类型"]
#[doc = ""]
pub type TThostFtdcMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcLargeVolumeType是一个大额数量类型"]
#[doc = ""]
pub type TThostFtdcLargeVolumeType = f64;
#[doc = ""]
#[doc = "TFtdcSequenceSeriesType是一个序列系列号类型"]
#[doc = ""]
pub type TThostFtdcSequenceSeriesType = ::std::os::raw::c_short;
#[doc = ""]
#[doc = "TFtdcCommPhaseNoType是一个通讯时段编号类型"]
#[doc = ""]
pub type TThostFtdcCommPhaseNoType = ::std::os::raw::c_short;
#[doc = ""]
#[doc = "TFtdcSequenceLabelType是一个序列编号类型"]
#[doc = ""]
pub type TThostFtdcSequenceLabelType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcUnderlyingMultipleType是一个基础商品乘数类型"]
#[doc = ""]
pub type TThostFtdcUnderlyingMultipleType = f64;
#[doc = ""]
#[doc = "TFtdcPriorityType是一个优先级类型"]
#[doc = ""]
pub type TThostFtdcPriorityType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcContractCodeType是一个合同编号类型"]
#[doc = ""]
pub type TThostFtdcContractCodeType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcCityType是一个市类型"]
#[doc = ""]
pub type TThostFtdcCityType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcIsStockType是一个是否股民类型"]
#[doc = ""]
pub type TThostFtdcIsStockType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcChannelType是一个渠道类型"]
#[doc = ""]
pub type TThostFtdcChannelType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAddressType是一个通讯地址类型"]
#[doc = ""]
pub type TThostFtdcAddressType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcZipCodeType是一个邮政编码类型"]
#[doc = ""]
pub type TThostFtdcZipCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcTelephoneType是一个联系电话类型"]
#[doc = ""]
pub type TThostFtdcTelephoneType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcFaxType是一个传真类型"]
#[doc = ""]
pub type TThostFtdcFaxType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcMobileType是一个手机类型"]
#[doc = ""]
pub type TThostFtdcMobileType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcEMailType是一个电子邮件类型"]
#[doc = ""]
pub type TThostFtdcEMailType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcMemoType是一个备注类型"]
#[doc = ""]
pub type TThostFtdcMemoType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcCompanyCodeType是一个企业代码类型"]
#[doc = ""]
pub type TThostFtdcCompanyCodeType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcWebsiteType是一个网站地址类型"]
#[doc = ""]
pub type TThostFtdcWebsiteType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcTaxNoType是一个税务登记号类型"]
#[doc = ""]
pub type TThostFtdcTaxNoType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcBatchStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPropertyIDType是一个属性代码类型"]
#[doc = ""]
pub type TThostFtdcPropertyIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcPropertyNameType是一个属性名称类型"]
#[doc = ""]
pub type TThostFtdcPropertyNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcLicenseNoType是一个营业执照号类型"]
#[doc = ""]
pub type TThostFtdcLicenseNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAgentIDType是一个经纪人代码类型"]
#[doc = ""]
pub type TThostFtdcAgentIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAgentNameType是一个经纪人名称类型"]
#[doc = ""]
pub type TThostFtdcAgentNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcAgentGroupIDType是一个经纪人组代码类型"]
#[doc = ""]
pub type TThostFtdcAgentGroupIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAgentGroupNameType是一个经纪人组名称类型"]
#[doc = ""]
pub type TThostFtdcAgentGroupNameType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcReturnStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnPatternType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnStandardType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeParamIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSettlementParamValueType是一个参数代码值类型"]
#[doc = ""]
pub type TThostFtdcSettlementParamValueType = [::std::os::raw::c_uchar; 256usize];
#[doc = ""]
#[doc = "TFtdcCounterIDType是一个计数器代码类型"]
#[doc = ""]
pub type TThostFtdcCounterIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcInvestorGroupNameType是一个投资者分组名称类型"]
#[doc = ""]
pub type TThostFtdcInvestorGroupNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcBrandCodeType是一个牌号类型"]
#[doc = ""]
pub type TThostFtdcBrandCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcWarehouseType是一个仓库类型"]
#[doc = ""]
pub type TThostFtdcWarehouseType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcProductDateType是一个产期类型"]
#[doc = ""]
pub type TThostFtdcProductDateType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcGradeType是一个等级类型"]
#[doc = ""]
pub type TThostFtdcGradeType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcClassifyType是一个类别类型"]
#[doc = ""]
pub type TThostFtdcClassifyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcPositionType是一个货位类型"]
#[doc = ""]
pub type TThostFtdcPositionType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcYieldlyType是一个产地类型"]
#[doc = ""]
pub type TThostFtdcYieldlyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcWeightType是一个公定重量类型"]
#[doc = ""]
pub type TThostFtdcWeightType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcSubEntryFundNoType是一个分项资金流水号类型"]
#[doc = ""]
pub type TThostFtdcSubEntryFundNoType = ::std::os::raw::c_int;
pub type TThostFtdcFileIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFileNameType是一个文件名称类型"]
#[doc = ""]
pub type TThostFtdcFileNameType = [::std::os::raw::c_uchar; 257usize];
pub type TThostFtdcFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileFormatType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileUploadStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUploadModeType是一个上传文件类型类型"]
#[doc = ""]
pub type TThostFtdcUploadModeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcAccountIDType是一个投资者帐号类型"]
#[doc = ""]
pub type TThostFtdcAccountIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBankFlagType是一个银行统一标识类型类型"]
#[doc = ""]
pub type TThostFtdcBankFlagType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankAccountType是一个银行账户类型"]
#[doc = ""]
pub type TThostFtdcBankAccountType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcOpenNameType是一个银行账户的开户人名称类型"]
#[doc = ""]
pub type TThostFtdcOpenNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcOpenBankType是一个银行账户的开户行类型"]
#[doc = ""]
pub type TThostFtdcOpenBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBankNameType是一个银行名称类型"]
#[doc = ""]
pub type TThostFtdcBankNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcPublishPathType是一个发布路径类型"]
#[doc = ""]
pub type TThostFtdcPublishPathType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcOperatorIDType是一个操作员代码类型"]
#[doc = ""]
pub type TThostFtdcOperatorIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcMonthCountType是一个月份数量类型"]
#[doc = ""]
pub type TThostFtdcMonthCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAdvanceMonthArrayType是一个月份提前数组类型"]
#[doc = ""]
pub type TThostFtdcAdvanceMonthArrayType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcDateExprType是一个日期表达式类型"]
#[doc = ""]
pub type TThostFtdcDateExprType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcInstrumentIDExprType是一个合约代码表达式类型"]
#[doc = ""]
pub type TThostFtdcInstrumentIDExprType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcInstrumentNameExprType是一个合约名称表达式类型"]
#[doc = ""]
pub type TThostFtdcInstrumentNameExprType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcSpecialCreateRuleType = ::std::os::raw::c_uchar;
pub type TThostFtdcBasisPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryModeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLogLevelType是一个日志级别类型"]
#[doc = ""]
pub type TThostFtdcLogLevelType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcProcessNameType是一个存储过程名称类型"]
#[doc = ""]
pub type TThostFtdcProcessNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcOperationMemoType是一个操作摘要类型"]
#[doc = ""]
pub type TThostFtdcOperationMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBillNoType是一个票据号类型"]
#[doc = ""]
pub type TThostFtdcBillNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = ""]
#[doc = "TFtdcBillNameType是一个票据名称类型"]
#[doc = ""]
pub type TThostFtdcBillNameType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcPublishStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcEnumValueIDType是一个枚举值代码类型"]
#[doc = ""]
pub type TThostFtdcEnumValueIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcEnumValueTypeType是一个枚举值类型类型"]
#[doc = ""]
pub type TThostFtdcEnumValueTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcEnumValueLabelType是一个枚举值名称类型"]
#[doc = ""]
pub type TThostFtdcEnumValueLabelType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcEnumValueResultType是一个枚举值结果类型"]
#[doc = ""]
pub type TThostFtdcEnumValueResultType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcSystemStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRangeIntTypeType是一个限定值类型类型"]
#[doc = ""]
pub type TThostFtdcRangeIntTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcRangeIntFromType是一个限定值下限类型"]
#[doc = ""]
pub type TThostFtdcRangeIntFromType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcRangeIntToType是一个限定值上限类型"]
#[doc = ""]
pub type TThostFtdcRangeIntToType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcFunctionIDType是一个功能代码类型"]
#[doc = ""]
pub type TThostFtdcFunctionIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = ""]
#[doc = "TFtdcFunctionValueCodeType是一个功能编码类型"]
#[doc = ""]
pub type TThostFtdcFunctionValueCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcFunctionNameType是一个功能名称类型"]
#[doc = ""]
pub type TThostFtdcFunctionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcRoleIDType是一个角色编号类型"]
#[doc = ""]
pub type TThostFtdcRoleIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcRoleNameType是一个角色名称类型"]
#[doc = ""]
pub type TThostFtdcRoleNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcDescriptionType是一个描述类型"]
#[doc = ""]
pub type TThostFtdcDescriptionType = [::std::os::raw::c_uchar; 401usize];
#[doc = ""]
#[doc = "TFtdcCombineIDType是一个组合编号类型"]
#[doc = ""]
pub type TThostFtdcCombineIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = ""]
#[doc = "TFtdcCombineTypeType是一个组合类型类型"]
#[doc = ""]
pub type TThostFtdcCombineTypeType = [::std::os::raw::c_uchar; 25usize];
pub type TThostFtdcInvestorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeeAcceptStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcPasswordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcIncludeCloseProfitType = ::std::os::raw::c_uchar;
pub type TThostFtdcAllWithoutTradeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCommentType是一个盈亏算法说明类型"]
#[doc = ""]
pub type TThostFtdcCommentType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcVersionType是一个版本号类型"]
#[doc = ""]
pub type TThostFtdcVersionType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcTradeCodeType是一个交易代码类型"]
#[doc = ""]
pub type TThostFtdcTradeCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcTradeDateType是一个交易日期类型"]
#[doc = ""]
pub type TThostFtdcTradeDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeTimeType是一个交易时间类型"]
#[doc = ""]
pub type TThostFtdcTradeTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeSerialType是一个发起方流水号类型"]
#[doc = ""]
pub type TThostFtdcTradeSerialType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcTradeSerialNoType是一个发起方流水号类型"]
#[doc = ""]
pub type TThostFtdcTradeSerialNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFutureIDType是一个期货公司代码类型"]
#[doc = ""]
pub type TThostFtdcFutureIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcBankIDType是一个银行代码类型"]
#[doc = ""]
pub type TThostFtdcBankIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankBrchIDType是一个银行分中心代码类型"]
#[doc = ""]
pub type TThostFtdcBankBrchIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcBankBranchIDType是一个分中心代码类型"]
#[doc = ""]
pub type TThostFtdcBankBranchIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcOperNoType是一个交易柜员类型"]
#[doc = ""]
pub type TThostFtdcOperNoType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcDeviceIDType是一个渠道标志类型"]
#[doc = ""]
pub type TThostFtdcDeviceIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcRecordNumType是一个记录数类型"]
#[doc = ""]
pub type TThostFtdcRecordNumType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcFutureAccountType是一个期货资金账号类型"]
#[doc = ""]
pub type TThostFtdcFutureAccountType = [::std::os::raw::c_uchar; 22usize];
pub type TThostFtdcFuturePwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFutureAccPwdType是一个期货资金密码类型"]
#[doc = ""]
pub type TThostFtdcFutureAccPwdType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcCurrencyCodeType是一个币种类型"]
#[doc = ""]
pub type TThostFtdcCurrencyCodeType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcRetCodeType是一个响应代码类型"]
#[doc = ""]
pub type TThostFtdcRetCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcRetInfoType是一个响应信息类型"]
#[doc = ""]
pub type TThostFtdcRetInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcTradeAmtType是一个银行总余额类型"]
#[doc = ""]
pub type TThostFtdcTradeAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = ""]
#[doc = "TFtdcUseAmtType是一个银行可用余额类型"]
#[doc = ""]
pub type TThostFtdcUseAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = ""]
#[doc = "TFtdcFetchAmtType是一个银行可取余额类型"]
#[doc = ""]
pub type TThostFtdcFetchAmtType = [::std::os::raw::c_uchar; 20usize];
pub type TThostFtdcTransferValidFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCertCodeType是一个证件号码类型"]
#[doc = ""]
pub type TThostFtdcCertCodeType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReasonType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFundProjectIDType是一个资金项目编号类型"]
#[doc = ""]
pub type TThostFtdcFundProjectIDType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcSexType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcProfessionType是一个职业类型"]
#[doc = ""]
pub type TThostFtdcProfessionType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcNationalType是一个国籍类型"]
#[doc = ""]
pub type TThostFtdcNationalType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcProvinceType是一个省类型"]
#[doc = ""]
pub type TThostFtdcProvinceType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcRegionType是一个区类型"]
#[doc = ""]
pub type TThostFtdcRegionType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcCountryType是一个国家类型"]
#[doc = ""]
pub type TThostFtdcCountryType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcLicenseNOType是一个营业执照类型"]
#[doc = ""]
pub type TThostFtdcLicenseNOType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcCompanyTypeType是一个企业性质类型"]
#[doc = ""]
pub type TThostFtdcCompanyTypeType = [::std::os::raw::c_uchar; 16usize];
#[doc = ""]
#[doc = "TFtdcBusinessScopeType是一个经营范围类型"]
#[doc = ""]
pub type TThostFtdcBusinessScopeType = [::std::os::raw::c_uchar; 1001usize];
#[doc = ""]
#[doc = "TFtdcCapitalCurrencyType是一个注册资本币种类型"]
#[doc = ""]
pub type TThostFtdcCapitalCurrencyType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcUserTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBranchIDType是一个营业部编号类型"]
#[doc = ""]
pub type TThostFtdcBranchIDType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcNoteTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStyleType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBrokerDNSType是一个域名类型"]
#[doc = ""]
pub type TThostFtdcBrokerDNSType = [::std::os::raw::c_uchar; 256usize];
#[doc = ""]
#[doc = "TFtdcSentenceType是一个语句类型"]
#[doc = ""]
pub type TThostFtdcSentenceType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcSettlementBillTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRightTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillGenStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgoTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandlePositionAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcFindMarginRateAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandleTradingAccountAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcPersonTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcQueryInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorRiskStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLegIDType是一个单腿编号类型"]
#[doc = ""]
pub type TThostFtdcLegIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcLegMultipleType是一个单腿乘数类型"]
#[doc = ""]
pub type TThostFtdcLegMultipleType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcImplyLevelType是一个派生层数类型"]
#[doc = ""]
pub type TThostFtdcImplyLevelType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcClearAccountType是一个结算账户类型"]
#[doc = ""]
pub type TThostFtdcClearAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcOrganNOType是一个结算账户类型"]
#[doc = ""]
pub type TThostFtdcOrganNOType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearbarchIDType是一个结算账户联行号类型"]
#[doc = ""]
pub type TThostFtdcClearbarchIDType = [::std::os::raw::c_uchar; 6usize];
pub type TThostFtdcUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUserEventInfoType是一个用户事件信息类型"]
#[doc = ""]
pub type TThostFtdcUserEventInfoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcCloseStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcParkedOrderStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcParkedOrderIDType是一个预埋报单编号类型"]
#[doc = ""]
pub type TThostFtdcParkedOrderIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcParkedOrderActionIDType是一个预埋撤单编号类型"]
#[doc = ""]
pub type TThostFtdcParkedOrderActionIDType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcVirDealStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrgSystemIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirTradeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementAvailAbilityType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementTradeCodeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPhotoTypeNameType是一个影像类型名称类型"]
#[doc = ""]
pub type TThostFtdcPhotoTypeNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcPhotoTypeIDType是一个影像类型代码类型"]
#[doc = ""]
pub type TThostFtdcPhotoTypeIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcPhotoNameType是一个影像名称类型"]
#[doc = ""]
pub type TThostFtdcPhotoNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcTopicIDType是一个主题代码类型"]
#[doc = ""]
pub type TThostFtdcTopicIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcReportTypeIDType是一个交易报告类型标识类型"]
#[doc = ""]
pub type TThostFtdcReportTypeIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCharacterIDType是一个交易特征代码类型"]
#[doc = ""]
pub type TThostFtdcCharacterIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLParamIDType是一个参数代码类型"]
#[doc = ""]
pub type TThostFtdcAMLParamIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcAMLInvestorTypeType是一个投资者类型类型"]
#[doc = ""]
pub type TThostFtdcAMLInvestorTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLIdCardTypeType是一个证件类型类型"]
#[doc = ""]
pub type TThostFtdcAMLIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLTradeDirectType是一个资金进出方向类型"]
#[doc = ""]
pub type TThostFtdcAMLTradeDirectType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLTradeModelType是一个资金进出方式类型"]
#[doc = ""]
pub type TThostFtdcAMLTradeModelType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLOpParamValueType是一个业务参数代码值类型"]
#[doc = ""]
pub type TThostFtdcAMLOpParamValueType = f64;
#[doc = ""]
#[doc = "TFtdcAMLCustomerCardTypeType是一个客户身份证件/证明文件类型类型"]
#[doc = ""]
pub type TThostFtdcAMLCustomerCardTypeType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionNameType是一个金融机构网点名称类型"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcAMLDistrictIDType是一个金融机构网点所在地区行政区划代码类型"]
#[doc = ""]
pub type TThostFtdcAMLDistrictIDType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLRelationShipType是一个金融机构网点与大额交易的关系类型"]
#[doc = ""]
pub type TThostFtdcAMLRelationShipType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionTypeType是一个金融机构网点代码类型类型"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLInstitutionIDType是一个金融机构网点代码类型"]
#[doc = ""]
pub type TThostFtdcAMLInstitutionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcAMLAccountTypeType是一个账户类型类型"]
#[doc = ""]
pub type TThostFtdcAMLAccountTypeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLTradingTypeType是一个交易方式类型"]
#[doc = ""]
pub type TThostFtdcAMLTradingTypeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLTransactClassType是一个涉外收支交易分类与代码类型"]
#[doc = ""]
pub type TThostFtdcAMLTransactClassType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcAMLCapitalIOType是一个资金收付标识类型"]
#[doc = ""]
pub type TThostFtdcAMLCapitalIOType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcAMLSiteType是一个交易地点类型"]
#[doc = ""]
pub type TThostFtdcAMLSiteType = [::std::os::raw::c_uchar; 10usize];
#[doc = ""]
#[doc = "TFtdcAMLCapitalPurposeType是一个资金用途类型"]
#[doc = ""]
pub type TThostFtdcAMLCapitalPurposeType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAMLReportTypeType是一个报文类型类型"]
#[doc = ""]
pub type TThostFtdcAMLReportTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcAMLSerialNoType是一个编号类型"]
#[doc = ""]
pub type TThostFtdcAMLSerialNoType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcAMLStatusType是一个状态类型"]
#[doc = ""]
pub type TThostFtdcAMLStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcAMLGenStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAMLSeqCodeType是一个业务标识号类型"]
#[doc = ""]
pub type TThostFtdcAMLSeqCodeType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcAMLFileNameType是一个AML文件名类型"]
#[doc = ""]
pub type TThostFtdcAMLFileNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcAMLMoneyType是一个反洗钱资金类型"]
#[doc = ""]
pub type TThostFtdcAMLMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcAMLFileAmountType是一个反洗钱资金类型"]
#[doc = ""]
pub type TThostFtdcAMLFileAmountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCFMMCKeyType是一个密钥类型(保证金监管)类型"]
#[doc = ""]
pub type TThostFtdcCFMMCKeyType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCFMMCTokenType是一个令牌类型(保证金监管)类型"]
#[doc = ""]
pub type TThostFtdcCFMMCTokenType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcCFMMCKeyKindType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAMLReportNameType是一个报文名称类型"]
#[doc = ""]
pub type TThostFtdcAMLReportNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcIndividualNameType是一个个人姓名类型"]
#[doc = ""]
pub type TThostFtdcIndividualNameType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcCurrencyIDType是一个币种代码类型"]
#[doc = ""]
pub type TThostFtdcCurrencyIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcCustNumberType是一个客户编号类型"]
#[doc = ""]
pub type TThostFtdcCustNumberType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcOrganCodeType是一个机构编码类型"]
#[doc = ""]
pub type TThostFtdcOrganCodeType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcOrganNameType是一个机构名称类型"]
#[doc = ""]
pub type TThostFtdcOrganNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcSuperOrganCodeType是一个上级机构编码,即期货公司总部、银行总行类型"]
#[doc = ""]
pub type TThostFtdcSuperOrganCodeType = [::std::os::raw::c_uchar; 12usize];
#[doc = ""]
#[doc = "TFtdcSubBranchIDType是一个分支机构类型"]
#[doc = ""]
pub type TThostFtdcSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcSubBranchNameType是一个分支机构名称类型"]
#[doc = ""]
pub type TThostFtdcSubBranchNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcBranchNetCodeType是一个机构网点号类型"]
#[doc = ""]
pub type TThostFtdcBranchNetCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcBranchNetNameType是一个机构网点名称类型"]
#[doc = ""]
pub type TThostFtdcBranchNetNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcOrganFlagType是一个机构标识类型"]
#[doc = ""]
pub type TThostFtdcOrganFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcBankCodingForFutureType是一个银行对期货公司的编码类型"]
#[doc = ""]
pub type TThostFtdcBankCodingForFutureType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcBankReturnCodeType是一个银行对返回码的定义类型"]
#[doc = ""]
pub type TThostFtdcBankReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcPlateReturnCodeType是一个银期转帐平台对返回码的定义类型"]
#[doc = ""]
pub type TThostFtdcPlateReturnCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcBankSubBranchIDType是一个银行分支机构编码类型"]
#[doc = ""]
pub type TThostFtdcBankSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcFutureBranchIDType是一个期货分支机构编码类型"]
#[doc = ""]
pub type TThostFtdcFutureBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcReturnCodeType是一个返回代码类型"]
#[doc = ""]
pub type TThostFtdcReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcOperatorCodeType是一个操作员类型"]
#[doc = ""]
pub type TThostFtdcOperatorCodeType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcClearDepIDType是一个机构结算帐户机构号类型"]
#[doc = ""]
pub type TThostFtdcClearDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearBrchIDType是一个机构结算帐户联行号类型"]
#[doc = ""]
pub type TThostFtdcClearBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcClearNameType是一个机构结算帐户名称类型"]
#[doc = ""]
pub type TThostFtdcClearNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcBankAccountNameType是一个银行帐户名称类型"]
#[doc = ""]
pub type TThostFtdcBankAccountNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcInvDepIDType是一个机构投资人账号机构号类型"]
#[doc = ""]
pub type TThostFtdcInvDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcInvBrchIDType是一个机构投资人联行号类型"]
#[doc = ""]
pub type TThostFtdcInvBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = ""]
#[doc = "TFtdcMessageFormatVersionType是一个信息格式版本类型"]
#[doc = ""]
pub type TThostFtdcMessageFormatVersionType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcDigestType是一个摘要类型"]
#[doc = ""]
pub type TThostFtdcDigestType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcAuthenticDataType是一个认证数据类型"]
#[doc = ""]
pub type TThostFtdcAuthenticDataType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcPasswordKeyType是一个密钥类型"]
#[doc = ""]
pub type TThostFtdcPasswordKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureAccountNameType是一个期货帐户名称类型"]
#[doc = ""]
pub type TThostFtdcFutureAccountNameType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcMobilePhoneType是一个手机类型"]
#[doc = ""]
pub type TThostFtdcMobilePhoneType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFutureMainKeyType是一个期货公司主密钥类型"]
#[doc = ""]
pub type TThostFtdcFutureMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureWorkKeyType是一个期货公司工作密钥类型"]
#[doc = ""]
pub type TThostFtdcFutureWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcFutureTransKeyType是一个期货公司传输密钥类型"]
#[doc = ""]
pub type TThostFtdcFutureTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankMainKeyType是一个银行主密钥类型"]
#[doc = ""]
pub type TThostFtdcBankMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankWorkKeyType是一个银行工作密钥类型"]
#[doc = ""]
pub type TThostFtdcBankWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankTransKeyType是一个银行传输密钥类型"]
#[doc = ""]
pub type TThostFtdcBankTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcBankServerDescriptionType是一个银行服务器描述信息类型"]
#[doc = ""]
pub type TThostFtdcBankServerDescriptionType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAddInfoType是一个附加信息类型"]
#[doc = ""]
pub type TThostFtdcAddInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcDescrInfoForReturnCodeType是一个返回码描述类型"]
#[doc = ""]
pub type TThostFtdcDescrInfoForReturnCodeType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcCountryCodeType是一个国家代码类型"]
#[doc = ""]
pub type TThostFtdcCountryCodeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSerialType是一个流水号类型"]
#[doc = ""]
pub type TThostFtdcSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcPlateSerialType是一个平台流水号类型"]
#[doc = ""]
pub type TThostFtdcPlateSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBankSerialType是一个银行流水号类型"]
#[doc = ""]
pub type TThostFtdcBankSerialType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcCorrectSerialType是一个被冲正交易流水号类型"]
#[doc = ""]
pub type TThostFtdcCorrectSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFutureSerialType是一个期货公司流水号类型"]
#[doc = ""]
pub type TThostFtdcFutureSerialType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcApplicationIDType是一个应用标识类型"]
#[doc = ""]
pub type TThostFtdcApplicationIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcBankProxyIDType是一个银行代理标识类型"]
#[doc = ""]
pub type TThostFtdcBankProxyIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFBTCoreIDType是一个银期转帐核心系统标识类型"]
#[doc = ""]
pub type TThostFtdcFBTCoreIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServerPortType是一个服务端口号类型"]
#[doc = ""]
pub type TThostFtdcServerPortType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRepealedTimesType是一个已经冲正次数类型"]
#[doc = ""]
pub type TThostFtdcRepealedTimesType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcRepealTimeIntervalType是一个冲正时间间隔类型"]
#[doc = ""]
pub type TThostFtdcRepealTimeIntervalType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTotalTimesType是一个每日累计转帐次数类型"]
#[doc = ""]
pub type TThostFtdcTotalTimesType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcFBTRequestIDType是一个请求ID类型"]
#[doc = ""]
pub type TThostFtdcFBTRequestIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTIDType是一个交易ID类型"]
#[doc = ""]
pub type TThostFtdcTIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradeAmountType是一个交易金额（元）类型"]
#[doc = ""]
pub type TThostFtdcTradeAmountType = f64;
#[doc = ""]
#[doc = "TFtdcCustFeeType是一个应收客户费用（元）类型"]
#[doc = ""]
pub type TThostFtdcCustFeeType = f64;
#[doc = ""]
#[doc = "TFtdcFutureFeeType是一个应收期货公司费用（元）类型"]
#[doc = ""]
pub type TThostFtdcFutureFeeType = f64;
#[doc = ""]
#[doc = "TFtdcSingleMaxAmtType是一个单笔最高限额类型"]
#[doc = ""]
pub type TThostFtdcSingleMaxAmtType = f64;
#[doc = ""]
#[doc = "TFtdcSingleMinAmtType是一个单笔最低限额类型"]
#[doc = ""]
pub type TThostFtdcSingleMinAmtType = f64;
#[doc = ""]
#[doc = "TFtdcTotalAmtType是一个每日累计转帐额度类型"]
#[doc = ""]
pub type TThostFtdcTotalAmtType = f64;
pub type TThostFtdcCertificationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileBusinessCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCashExchangeCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcYesNoIndicatorType = ::std::os::raw::c_uchar;
pub type TThostFtdcBanlanceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGenderType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeePayFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcPassWordKeyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTPassWordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTEncryModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstitutionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLastFragmentType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcMoneyAccountStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcManageStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTxnEndFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProcessStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCustTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTransferDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcOpenOrDestroyType = ::std::os::raw::c_uchar;
pub type TThostFtdcAvailabilityFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcProtocalIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcConnectModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCCBFeeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCommApiTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcServiceIDType是一个服务编号类型"]
#[doc = ""]
pub type TThostFtdcServiceIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServiceLineNoType是一个服务线路编号类型"]
#[doc = ""]
pub type TThostFtdcServiceLineNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcServiceNameType是一个服务名类型"]
#[doc = ""]
pub type TThostFtdcServiceNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcLinkStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCommApiPointerType是一个通讯API指针类型"]
#[doc = ""]
pub type TThostFtdcCommApiPointerType = ::std::os::raw::c_int;
pub type TThostFtdcPwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcSecuAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSponsorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReqRspTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBankIDByBankType是一个银行自己的编码类型"]
#[doc = ""]
pub type TThostFtdcBankIDByBankType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcBankOperNoType是一个银行操作员号类型"]
#[doc = ""]
pub type TThostFtdcBankOperNoType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcBankCustNoType是一个银行客户号类型"]
#[doc = ""]
pub type TThostFtdcBankCustNoType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcDBOPSeqNoType是一个递增的序列号类型"]
#[doc = ""]
pub type TThostFtdcDBOPSeqNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTableNameType是一个FBT表名类型"]
#[doc = ""]
pub type TThostFtdcTableNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcPKNameType是一个FBT表操作主键名类型"]
#[doc = ""]
pub type TThostFtdcPKNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcPKValueType是一个FBT表操作主键值类型"]
#[doc = ""]
pub type TThostFtdcPKValueType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcDBOperationType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcTargetIDType是一个同步目标编号类型"]
#[doc = ""]
pub type TThostFtdcTargetIDType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcSyncTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBETimeType是一个各种换汇时间类型"]
#[doc = ""]
pub type TThostFtdcFBETimeType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcFBEBankNoType是一个换汇银行行号类型"]
#[doc = ""]
pub type TThostFtdcFBEBankNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcFBECertNoType是一个换汇凭证号类型"]
#[doc = ""]
pub type TThostFtdcFBECertNoType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcExDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEBankAccountType是一个换汇银行账户类型"]
#[doc = ""]
pub type TThostFtdcFBEBankAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcFBEBankAccountNameType是一个换汇银行账户名类型"]
#[doc = ""]
pub type TThostFtdcFBEBankAccountNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEAmtType是一个各种换汇金额类型"]
#[doc = ""]
pub type TThostFtdcFBEAmtType = f64;
#[doc = ""]
#[doc = "TFtdcFBEBusinessTypeType是一个换汇业务类型类型"]
#[doc = ""]
pub type TThostFtdcFBEBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcFBEPostScriptType是一个换汇附言类型"]
#[doc = ""]
pub type TThostFtdcFBEPostScriptType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBERemarkType是一个换汇备注类型"]
#[doc = ""]
pub type TThostFtdcFBERemarkType = [::std::os::raw::c_uchar; 71usize];
#[doc = ""]
#[doc = "TFtdcExRateType是一个换汇汇率类型"]
#[doc = ""]
pub type TThostFtdcExRateType = f64;
pub type TThostFtdcFBEResultFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBERtnMsgType是一个换汇返回信息类型"]
#[doc = ""]
pub type TThostFtdcFBERtnMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEExtendMsgType是一个换汇扩展信息类型"]
#[doc = ""]
pub type TThostFtdcFBEExtendMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcFBEBusinessSerialType是一个换汇记账流水号类型"]
#[doc = ""]
pub type TThostFtdcFBEBusinessSerialType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcFBESystemSerialType是一个换汇流水号类型"]
#[doc = ""]
pub type TThostFtdcFBESystemSerialType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFBETotalExCntType是一个换汇交易总笔数类型"]
#[doc = ""]
pub type TThostFtdcFBETotalExCntType = ::std::os::raw::c_int;
pub type TThostFtdcFBEExchStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEFileFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEAlreadyTradeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEOpenBankType是一个换汇账户开户行类型"]
#[doc = ""]
pub type TThostFtdcFBEOpenBankType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcFBEUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcFBEFileNameType是一个换汇相关文件名类型"]
#[doc = ""]
pub type TThostFtdcFBEFileNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcFBEBatchSerialType是一个换汇批次号类型"]
#[doc = ""]
pub type TThostFtdcFBEBatchSerialType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcFBEReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcNotifyClassType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRiskNofityInfoType是一个客户风险通知消息类型"]
#[doc = ""]
pub type TThostFtdcRiskNofityInfoType = [::std::os::raw::c_uchar; 257usize];
#[doc = ""]
#[doc = "TFtdcForceCloseSceneIdType是一个强平场景编号类型"]
#[doc = ""]
pub type TThostFtdcForceCloseSceneIdType = [::std::os::raw::c_uchar; 24usize];
pub type TThostFtdcForceCloseTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcInstrumentIDsType是一个多个产品代码,用+分隔,如cu+zn类型"]
#[doc = ""]
pub type TThostFtdcInstrumentIDsType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcRiskNotifyMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskNotifyStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskUserEventType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcParamIDType是一个参数代码类型"]
#[doc = ""]
pub type TThostFtdcParamIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcParamNameType是一个参数名类型"]
#[doc = ""]
pub type TThostFtdcParamNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcParamValueType是一个参数值类型"]
#[doc = ""]
pub type TThostFtdcParamValueType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcConditionalOrderSortTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcIndustryIDType是一个行业编码类型"]
#[doc = ""]
pub type TThostFtdcIndustryIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcQuestionIDType是一个特有信息编号类型"]
#[doc = ""]
pub type TThostFtdcQuestionIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = ""]
#[doc = "TFtdcQuestionContentType是一个特有信息说明类型"]
#[doc = ""]
pub type TThostFtdcQuestionContentType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcOptionIDType是一个选项编号类型"]
#[doc = ""]
pub type TThostFtdcOptionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcOptionContentType是一个选项说明类型"]
#[doc = ""]
pub type TThostFtdcOptionContentType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcQuestionTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcProcessIDType是一个业务流水号类型"]
#[doc = ""]
pub type TThostFtdcProcessIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSeqNoType是一个流水号类型"]
#[doc = ""]
pub type TThostFtdcSeqNoType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcUOAProcessStatusType是一个流程状态类型"]
#[doc = ""]
pub type TThostFtdcUOAProcessStatusType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcProcessTypeType是一个流程功能类型类型"]
#[doc = ""]
pub type TThostFtdcProcessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcBusinessTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCfmmcReturnCodeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcExReturnCodeType是一个交易所返回码类型"]
#[doc = ""]
pub type TThostFtdcExReturnCodeType = ::std::os::raw::c_int;
pub type TThostFtdcClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExClientIDTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcClientClassifyType是一个客户分类码类型"]
#[doc = ""]
pub type TThostFtdcClientClassifyType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAOrganTypeType是一个单位性质类型"]
#[doc = ""]
pub type TThostFtdcUOAOrganTypeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOACountryCodeType是一个国家代码类型"]
#[doc = ""]
pub type TThostFtdcUOACountryCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcAreaCodeType是一个区号类型"]
#[doc = ""]
pub type TThostFtdcAreaCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcFuturesIDType是一个监控中心为客户分配的代码类型"]
#[doc = ""]
pub type TThostFtdcFuturesIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCffmcDateType是一个日期类型"]
#[doc = ""]
pub type TThostFtdcCffmcDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCffmcTimeType是一个时间类型"]
#[doc = ""]
pub type TThostFtdcCffmcTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcNocIDType是一个组织机构代码类型"]
#[doc = ""]
pub type TThostFtdcNocIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcUpdateFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyOperateIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyStatusIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendMethodType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcEventTypeType是一个业务操作类型类型"]
#[doc = ""]
pub type TThostFtdcEventTypeType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcEventModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUOAAutoSendType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcQueryDepthType是一个查询深度类型"]
#[doc = ""]
pub type TThostFtdcQueryDepthType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcDataCenterIDType是一个数据中心代码类型"]
#[doc = ""]
pub type TThostFtdcDataCenterIDType = ::std::os::raw::c_int;
pub type TThostFtdcFlowIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcCheckLevelType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCheckNoType是一个操作次数类型"]
#[doc = ""]
pub type TThostFtdcCheckNoType = ::std::os::raw::c_int;
pub type TThostFtdcCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcUsedStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRateTemplateNameType是一个模型名称类型"]
#[doc = ""]
pub type TThostFtdcRateTemplateNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcPropertyStringType是一个用于查询的投资属性字段类型"]
#[doc = ""]
pub type TThostFtdcPropertyStringType = [::std::os::raw::c_uchar; 2049usize];
pub type TThostFtdcBankAcountOriginType = ::std::os::raw::c_uchar;
pub type TThostFtdcMonthBillTradeSumType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTradeCodeEnumType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRateTemplateIDType是一个模型代码类型"]
#[doc = ""]
pub type TThostFtdcRateTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcRiskRateType是一个风险度类型"]
#[doc = ""]
pub type TThostFtdcRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcTimestampType是一个时间戳类型"]
#[doc = ""]
pub type TThostFtdcTimestampType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcInvestorIDRuleNameType是一个号段规则名称类型"]
#[doc = ""]
pub type TThostFtdcInvestorIDRuleNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcInvestorIDRuleExprType是一个号段规则表达式类型"]
#[doc = ""]
pub type TThostFtdcInvestorIDRuleExprType = [::std::os::raw::c_uchar; 513usize];
#[doc = ""]
#[doc = "TFtdcLastDriftType是一个上次OTP漂移值类型"]
#[doc = ""]
pub type TThostFtdcLastDriftType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcLastSuccessType是一个上次OTP成功值类型"]
#[doc = ""]
pub type TThostFtdcLastSuccessType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAuthKeyType是一个令牌密钥类型"]
#[doc = ""]
pub type TThostFtdcAuthKeyType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcSerialNumberType是一个序列号类型"]
#[doc = ""]
pub type TThostFtdcSerialNumberType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcOTPTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOTPVendorsIDType是一个动态令牌提供商类型"]
#[doc = ""]
pub type TThostFtdcOTPVendorsIDType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcOTPVendorsNameType是一个动态令牌提供商名称类型"]
#[doc = ""]
pub type TThostFtdcOTPVendorsNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcOTPStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerUserTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundEventTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCodeSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcTimeSpanType是一个时间跨度类型"]
#[doc = ""]
pub type TThostFtdcTimeSpanType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcImportSequenceIDType是一个动态令牌导入批次编号类型"]
#[doc = ""]
pub type TThostFtdcImportSequenceIDType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcByGroupType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSumStatModeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcComTypeType是一个组合成交类型类型"]
#[doc = ""]
pub type TThostFtdcComTypeType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcUserProductIDType是一个产品标识类型"]
#[doc = ""]
pub type TThostFtdcUserProductIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcUserProductNameType是一个产品名称类型"]
#[doc = ""]
pub type TThostFtdcUserProductNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcUserProductMemoType是一个产品说明类型"]
#[doc = ""]
pub type TThostFtdcUserProductMemoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcCSRCCancelFlagType是一个新增或变更标志类型"]
#[doc = ""]
pub type TThostFtdcCSRCCancelFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCDateType是一个日期类型"]
#[doc = ""]
pub type TThostFtdcCSRCDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCInvestorNameType是一个客户名称类型"]
#[doc = ""]
pub type TThostFtdcCSRCInvestorNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcCSRCOpenInvestorNameType是一个客户名称类型"]
#[doc = ""]
pub type TThostFtdcCSRCOpenInvestorNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCSRCInvestorIDType是一个客户代码类型"]
#[doc = ""]
pub type TThostFtdcCSRCInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcCSRCIdentifiedCardNoType是一个证件号码类型"]
#[doc = ""]
pub type TThostFtdcCSRCIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcCSRCClientIDType是一个交易编码类型"]
#[doc = ""]
pub type TThostFtdcCSRCClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCBankFlagType是一个银行标识类型"]
#[doc = ""]
pub type TThostFtdcCSRCBankFlagType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCSRCBankAccountType是一个银行账户类型"]
#[doc = ""]
pub type TThostFtdcCSRCBankAccountType = [::std::os::raw::c_uchar; 23usize];
#[doc = ""]
#[doc = "TFtdcCSRCOpenNameType是一个开户人类型"]
#[doc = ""]
pub type TThostFtdcCSRCOpenNameType = [::std::os::raw::c_uchar; 401usize];
#[doc = ""]
#[doc = "TFtdcCSRCMemoType是一个说明类型"]
#[doc = ""]
pub type TThostFtdcCSRCMemoType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCSRCTimeType是一个时间类型"]
#[doc = ""]
pub type TThostFtdcCSRCTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcCSRCTradeIDType是一个成交流水号类型"]
#[doc = ""]
pub type TThostFtdcCSRCTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcCSRCExchangeInstIDType是一个合约代码类型"]
#[doc = ""]
pub type TThostFtdcCSRCExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCSRCMortgageNameType是一个质押品名称类型"]
#[doc = ""]
pub type TThostFtdcCSRCMortgageNameType = [::std::os::raw::c_uchar; 7usize];
#[doc = ""]
#[doc = "TFtdcCSRCReasonType是一个事由类型"]
#[doc = ""]
pub type TThostFtdcCSRCReasonType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcIsSettlementType是一个是否为非结算会员类型"]
#[doc = ""]
pub type TThostFtdcIsSettlementType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCMoneyType是一个资金类型"]
#[doc = ""]
pub type TThostFtdcCSRCMoneyType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCPriceType是一个价格类型"]
#[doc = ""]
pub type TThostFtdcCSRCPriceType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCOptionsTypeType是一个期权类型类型"]
#[doc = ""]
pub type TThostFtdcCSRCOptionsTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcCSRCStrikePriceType是一个执行价类型"]
#[doc = ""]
pub type TThostFtdcCSRCStrikePriceType = f64;
#[doc = ""]
#[doc = "TFtdcCSRCTargetProductIDType是一个标的品种类型"]
#[doc = ""]
pub type TThostFtdcCSRCTargetProductIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcCSRCTargetInstrIDType是一个标的合约类型"]
#[doc = ""]
pub type TThostFtdcCSRCTargetInstrIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCommModelNameType是一个手续费率模板名称类型"]
#[doc = ""]
pub type TThostFtdcCommModelNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcCommModelMemoType是一个手续费率模板备注类型"]
#[doc = ""]
pub type TThostFtdcCommModelMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcExprSetModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRateInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAgentBrokerIDType是一个代理经纪公司代码类型"]
#[doc = ""]
pub type TThostFtdcAgentBrokerIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcDRIdentityIDType是一个交易中心代码类型"]
#[doc = ""]
pub type TThostFtdcDRIdentityIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcDRIdentityNameType是一个交易中心名称类型"]
#[doc = ""]
pub type TThostFtdcDRIdentityNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = ""]
#[doc = "TFtdcDBLinkIDType是一个DBLink标识号类型"]
#[doc = ""]
pub type TThostFtdcDBLinkIDType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcSyncDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcFlexStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcByInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSRiskRateType是一个风险度类型"]
#[doc = ""]
pub type TThostFtdcSRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcSequenceNo12Type是一个序号类型"]
#[doc = ""]
pub type TThostFtdcSequenceNo12Type = ::std::os::raw::c_int;
pub type TThostFtdcPropertyInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileGenStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCSRCDataQueyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFreezeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcStandardStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCFreezeStatusType是一个休眠状态类型"]
#[doc = ""]
pub type TThostFtdcCSRCFreezeStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcRightParamTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRightTemplateIDType是一个模板代码类型"]
#[doc = ""]
pub type TThostFtdcRightTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcRightTemplateNameType是一个模板名称类型"]
#[doc = ""]
pub type TThostFtdcRightTemplateNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAMLCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlCheckLevelType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAmlCheckFlowType是一个反洗钱数据抽取审核流程类型"]
#[doc = ""]
pub type TThostFtdcAmlCheckFlowType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcDataTypeType是一个数据类型类型"]
#[doc = ""]
pub type TThostFtdcDataTypeType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcExportFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSettleManagerIDType是一个结算配置代码类型"]
#[doc = ""]
pub type TThostFtdcSettleManagerIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSettleManagerNameType是一个结算配置名称类型"]
#[doc = ""]
pub type TThostFtdcSettleManagerNameType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcSettleManagerLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerGroupType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCheckResultMemoType是一个核对结果说明类型"]
#[doc = ""]
pub type TThostFtdcCheckResultMemoType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcFunctionUrlType是一个功能链接类型"]
#[doc = ""]
pub type TThostFtdcFunctionUrlType = [::std::os::raw::c_uchar; 1025usize];
#[doc = ""]
#[doc = "TFtdcAuthInfoType是一个客户端认证信息类型"]
#[doc = ""]
pub type TThostFtdcAuthInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = ""]
#[doc = "TFtdcAuthCodeType是一个客户端认证码类型"]
#[doc = ""]
pub type TThostFtdcAuthCodeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcLimitUseTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataResourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcActiveTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBackUpStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInitSettlementType = ::std::os::raw::c_uchar;
pub type TThostFtdcReportStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSaveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettArchiveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCTPTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcToolIDType是一个工具代码类型"]
#[doc = ""]
pub type TThostFtdcToolIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = ""]
#[doc = "TFtdcToolNameType是一个工具名称类型"]
#[doc = ""]
pub type TThostFtdcToolNameType = [::std::os::raw::c_uchar; 81usize];
pub type TThostFtdcCloseDealTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageFundUseRangeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrencyUnitType是一个币种单位数量类型"]
#[doc = ""]
pub type TThostFtdcCurrencyUnitType = f64;
#[doc = ""]
#[doc = "TFtdcExchangeRateType是一个汇率类型"]
#[doc = ""]
pub type TThostFtdcExchangeRateType = f64;
pub type TThostFtdcSpecProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSettlementParamIDType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrencyNameType是一个币种名称类型"]
#[doc = ""]
pub type TThostFtdcCurrencyNameType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcCurrencySignType是一个币种符号类型"]
#[doc = ""]
pub type TThostFtdcCurrencySignType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcFundMortDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcBusinessClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcSwapSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrExDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrencySwapStatusType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCurrExchCertNoType是一个凭证号类型"]
#[doc = ""]
pub type TThostFtdcCurrExchCertNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = ""]
#[doc = "TFtdcBatchSerialNoType是一个批次号类型"]
#[doc = ""]
pub type TThostFtdcBatchSerialNoType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcResFlagType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcPageControlType是一个换汇页面控制类型"]
#[doc = ""]
pub type TThostFtdcPageControlType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcRecordCountType是一个记录数类型"]
#[doc = ""]
pub type TThostFtdcRecordCountType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCurrencySwapMemoType是一个换汇需确认信息类型"]
#[doc = ""]
pub type TThostFtdcCurrencySwapMemoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcExStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientRegionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcWorkPlaceType是一个工作单位类型"]
#[doc = ""]
pub type TThostFtdcWorkPlaceType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBusinessPeriodType是一个经营期限类型"]
#[doc = ""]
pub type TThostFtdcBusinessPeriodType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcWebSiteType是一个网址类型"]
#[doc = ""]
pub type TThostFtdcWebSiteType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcUOAIdCardTypeType是一个统一开户证件类型类型"]
#[doc = ""]
pub type TThostFtdcUOAIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcClientModeType是一个开户模式类型"]
#[doc = ""]
pub type TThostFtdcClientModeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcInvestorFullNameType是一个投资者全称类型"]
#[doc = ""]
pub type TThostFtdcInvestorFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcUOABrokerIDType是一个境外中介机构ID类型"]
#[doc = ""]
pub type TThostFtdcUOABrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAZipCodeType是一个邮政编码类型"]
#[doc = ""]
pub type TThostFtdcUOAZipCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcUOAEMailType是一个电子邮箱类型"]
#[doc = ""]
pub type TThostFtdcUOAEMailType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcOldCityType是一个城市类型"]
#[doc = ""]
pub type TThostFtdcOldCityType = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcCorporateIdentifiedCardNoType是一个法人代表证件号码类型"]
#[doc = ""]
pub type TThostFtdcCorporateIdentifiedCardNoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcHasBoardType = ::std::os::raw::c_uchar;
pub type TThostFtdcStartModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTemplateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLoginModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPromptTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLedgerManageIDType是一个分户管理资产编码类型"]
#[doc = ""]
pub type TThostFtdcLedgerManageIDType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcInvestVarietyType是一个投资品种类型"]
#[doc = ""]
pub type TThostFtdcInvestVarietyType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcBankAccountTypeType是一个账户类别类型"]
#[doc = ""]
pub type TThostFtdcBankAccountTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcLedgerManageBankType是一个开户银行类型"]
#[doc = ""]
pub type TThostFtdcLedgerManageBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCffexDepartmentNameType是一个开户营业部类型"]
#[doc = ""]
pub type TThostFtdcCffexDepartmentNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcCffexDepartmentCodeType是一个营业部代码类型"]
#[doc = ""]
pub type TThostFtdcCffexDepartmentCodeType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcHasTrusteeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCMemo1Type是一个说明类型"]
#[doc = ""]
pub type TThostFtdcCSRCMemo1Type = [::std::os::raw::c_uchar; 41usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrCFullNameType是一个代理资产管理业务的期货公司全称类型"]
#[doc = ""]
pub type TThostFtdcAssetmgrCFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrApprovalNOType是一个资产管理业务批文号类型"]
#[doc = ""]
pub type TThostFtdcAssetmgrApprovalNOType = [::std::os::raw::c_uchar; 51usize];
#[doc = ""]
#[doc = "TFtdcAssetmgrMgrNameType是一个资产管理业务负责人姓名类型"]
#[doc = ""]
pub type TThostFtdcAssetmgrMgrNameType = [::std::os::raw::c_uchar; 401usize];
pub type TThostFtdcAmTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCAmTypeType是一个机构类型类型"]
#[doc = ""]
pub type TThostFtdcCSRCAmTypeType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcCSRCFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCusAccountTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCSRCNationalType是一个国籍类型"]
#[doc = ""]
pub type TThostFtdcCSRCNationalType = [::std::os::raw::c_uchar; 4usize];
#[doc = ""]
#[doc = "TFtdcCSRCSecAgentIDType是一个二级代理ID类型"]
#[doc = ""]
pub type TThostFtdcCSRCSecAgentIDType = [::std::os::raw::c_uchar; 11usize];
pub type TThostFtdcLanguageTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAmAccountType是一个投资账户类型"]
#[doc = ""]
pub type TThostFtdcAmAccountType = [::std::os::raw::c_uchar; 23usize];
pub type TThostFtdcAssetmgrClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAssetmgrTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcUOMType是一个计量单位类型"]
#[doc = ""]
pub type TThostFtdcUOMType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcSHFEInstLifePhaseType是一个上期所合约生命周期状态类型"]
#[doc = ""]
pub type TThostFtdcSHFEInstLifePhaseType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcSHFEProductClassType是一个产品类型类型"]
#[doc = ""]
pub type TThostFtdcSHFEProductClassType = [::std::os::raw::c_uchar; 11usize];
#[doc = ""]
#[doc = "TFtdcPriceDecimalType是一个价格小数位类型"]
#[doc = ""]
pub type TThostFtdcPriceDecimalType = [::std::os::raw::c_uchar; 2usize];
#[doc = ""]
#[doc = "TFtdcInTheMoneyFlagType是一个平值期权标志类型"]
#[doc = ""]
pub type TThostFtdcInTheMoneyFlagType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcCheckInstrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcBigMoneyType是一个资金类型"]
#[doc = ""]
pub type TThostFtdcBigMoneyType = f64;
pub type TThostFtdcMaxMarginSideAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcDAClientTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcCombinInstrIDType是一个套利合约代码类型"]
#[doc = ""]
pub type TThostFtdcCombinInstrIDType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcCombinSettlePriceType是一个各腿结算价类型"]
#[doc = ""]
pub type TThostFtdcCombinSettlePriceType = [::std::os::raw::c_uchar; 61usize];
#[doc = ""]
#[doc = "TFtdcDCEPriorityType是一个优先级类型"]
#[doc = ""]
pub type TThostFtdcDCEPriorityType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcTradeGroupIDType是一个成交组号类型"]
#[doc = ""]
pub type TThostFtdcTradeGroupIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcIsCheckPrepaType是一个是否校验开户可用资金类型"]
#[doc = ""]
pub type TThostFtdcIsCheckPrepaType = ::std::os::raw::c_int;
pub type TThostFtdcUOAAssetmgrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundIOTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortDirectionEnType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSwapBusinessTypeType是一个换汇业务种类类型"]
#[doc = ""]
pub type TThostFtdcSwapBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcOptionsTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGiveUpDataSourceType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcExecOrderSysIDType是一个执行宣告系统编号类型"]
#[doc = ""]
pub type TThostFtdcExecOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcExecResultType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcStrikeSequenceType是一个执行序号类型"]
#[doc = ""]
pub type TThostFtdcStrikeSequenceType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcStrikeTimeType是一个执行时间类型"]
#[doc = ""]
pub type TThostFtdcStrikeTimeType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDceCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOptionRoyaltyPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBalanceAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcForQuoteStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcValueMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderPositionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCZCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcDCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcSHFEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCFFEXUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCombDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeOffsetTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReserveOpenAccStasType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcLoginRemarkType是一个登录备注类型"]
#[doc = ""]
pub type TThostFtdcLoginRemarkType = [::std::os::raw::c_uchar; 36usize];
#[doc = ""]
#[doc = "TFtdcInvestUnitIDType是一个投资单元代码类型"]
#[doc = ""]
pub type TThostFtdcInvestUnitIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = ""]
#[doc = "TFtdcBulletinIDType是一个公告编号类型"]
#[doc = ""]
pub type TThostFtdcBulletinIDType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcNewsTypeType是一个公告类型类型"]
#[doc = ""]
pub type TThostFtdcNewsTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = ""]
#[doc = "TFtdcNewsUrgencyType是一个紧急程度类型"]
#[doc = ""]
pub type TThostFtdcNewsUrgencyType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAbstractType是一个消息摘要类型"]
#[doc = ""]
pub type TThostFtdcAbstractType = [::std::os::raw::c_uchar; 81usize];
#[doc = ""]
#[doc = "TFtdcComeFromType是一个消息来源类型"]
#[doc = ""]
pub type TThostFtdcComeFromType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcURLLinkType是一个WEB地址类型"]
#[doc = ""]
pub type TThostFtdcURLLinkType = [::std::os::raw::c_uchar; 201usize];
#[doc = ""]
#[doc = "TFtdcLongIndividualNameType是一个长个人姓名类型"]
#[doc = ""]
pub type TThostFtdcLongIndividualNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcLongFBEBankAccountNameType是一个长换汇银行账户名类型"]
#[doc = ""]
pub type TThostFtdcLongFBEBankAccountNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = ""]
#[doc = "TFtdcDateTimeType是一个日期时间类型"]
#[doc = ""]
pub type TThostFtdcDateTimeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcWeakPasswordSourceType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcRandomStringType是一个随机串类型"]
#[doc = ""]
pub type TThostFtdcRandomStringType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcOptSelfCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBizTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAppTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcAppIDType是一个App代码类型"]
#[doc = ""]
pub type TThostFtdcAppIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = ""]
#[doc = "TFtdcSystemInfoLenType是一个系统信息长度类型"]
#[doc = ""]
pub type TThostFtdcSystemInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcAdditionalInfoLenType是一个补充信息长度类型"]
#[doc = ""]
pub type TThostFtdcAdditionalInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcClientSystemInfoType是一个交易终端系统信息类型"]
#[doc = ""]
pub type TThostFtdcClientSystemInfoType = [::std::os::raw::c_uchar; 273usize];
#[doc = ""]
#[doc = "TFtdcAdditionalInfoType是一个系统外部信息类型"]
#[doc = ""]
pub type TThostFtdcAdditionalInfoType = [::std::os::raw::c_uchar; 261usize];
#[doc = ""]
#[doc = "TFtdcBase64ClientSystemInfoType是一个base64交易终端系统信息类型"]
#[doc = ""]
pub type TThostFtdcBase64ClientSystemInfoType = [::std::os::raw::c_uchar; 365usize];
#[doc = ""]
#[doc = "TFtdcBase64AdditionalInfoType是一个base64系统外部信息类型"]
#[doc = ""]
pub type TThostFtdcBase64AdditionalInfoType = [::std::os::raw::c_uchar; 349usize];
#[doc = ""]
#[doc = "TFtdcCurrentAuthMethodType是一个当前可用的认证模式，0代表无需认证模式 A从低位开始最后一位代表图片验证码，倒数第二位代表动态口令，倒数第三位代表短信验证码类型"]
#[doc = ""]
pub type TThostFtdcCurrentAuthMethodType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCaptchaInfoLenType是一个图片验证信息长度类型"]
#[doc = ""]
pub type TThostFtdcCaptchaInfoLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCaptchaInfoType是一个图片验证信息类型"]
#[doc = ""]
pub type TThostFtdcCaptchaInfoType = [::std::os::raw::c_uchar; 2561usize];
#[doc = ""]
#[doc = "TFtdcUserTextSeqType是一个用户短信验证码的编号类型"]
#[doc = ""]
pub type TThostFtdcUserTextSeqType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcHandshakeDataType是一个握手数据内容类型"]
#[doc = ""]
pub type TThostFtdcHandshakeDataType = [::std::os::raw::c_uchar; 301usize];
#[doc = ""]
#[doc = "TFtdcHandshakeDataLenType是一个握手数据内容长度类型"]
#[doc = ""]
pub type TThostFtdcHandshakeDataLenType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcCryptoKeyVersionType是一个api与front通信密钥版本号类型"]
#[doc = ""]
pub type TThostFtdcCryptoKeyVersionType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcRsaKeyVersionType是一个公钥版本号类型"]
#[doc = ""]
pub type TThostFtdcRsaKeyVersionType = ::std::os::raw::c_int;
#[doc = ""]
#[doc = "TFtdcSoftwareProviderIDType是一个交易软件商ID类型"]
#[doc = ""]
pub type TThostFtdcSoftwareProviderIDType = [::std::os::raw::c_uchar; 22usize];
#[doc = ""]
#[doc = "TFtdcCollectTimeType是一个信息采集时间类型"]
#[doc = ""]
pub type TThostFtdcCollectTimeType = [::std::os::raw::c_uchar; 21usize];
#[doc = ""]
#[doc = "TFtdcQueryFreqType是一个查询频率类型"]
#[doc = ""]
pub type TThostFtdcQueryFreqType = ::std::os::raw::c_int;
pub type TThostFtdcResponseValueType = ::std::os::raw::c_uchar;
pub type TThostFtdcOTCTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMatchTypeType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcOTCTraderIDType是一个OTC交易员代码类型"]
#[doc = ""]
pub type TThostFtdcOTCTraderIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = ""]
#[doc = "TFtdcRiskValueType是一个期货风险值类型"]
#[doc = ""]
pub type TThostFtdcRiskValueType = f64;
#[doc = ""]
#[doc = "TFtdcIDBNameType是一个握手数据内容类型"]
#[doc = ""]
pub type TThostFtdcIDBNameType = [::std::os::raw::c_uchar; 100usize];
#[doc = ""]
#[doc = "TFtdcDiscountRatioType是一个折扣率类型"]
#[doc = ""]
pub type TThostFtdcDiscountRatioType = f64;
pub type TThostFtdcAuthTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClassTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncDeltaStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionDirectionType = ::std::os::raw::c_uchar;
#[doc = ""]
#[doc = "TFtdcSyncDescriptionType是一个追平描述类型"]
#[doc = ""]
pub type TThostFtdcSyncDescriptionType = [::std::os::raw::c_uchar; 257usize];
#[doc = "信息分发"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDisseminationField {
    #[doc = "序列系列号"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "序列号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "用户登录请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "动态密码"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "终端IP端口"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "终端IP地址"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[doc = "用户登录应答"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLoginField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "登录成功时间"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易系统名称"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "最大报单引用"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "上期所时间"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "大商所时间"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "郑商所时间"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "中金所时间"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "能源中心时间"]
    pub INETime: TThostFtdcTimeType,
}
#[doc = "用户登出请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserLogoutField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "强制交易员退出"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForceUserLogoutField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "客户端认证请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqAuthenticateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "认证码"]
    pub AuthCode: TThostFtdcAuthCodeType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
}
#[doc = "客户端认证响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspAuthenticateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App类型"]
    pub AppType: TThostFtdcAppTypeType,
}
#[doc = "客户端认证信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthenticationInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "认证信息"]
    pub AuthInfo: TThostFtdcAuthInfoType,
    #[doc = "是否为认证结果"]
    pub IsResult: TThostFtdcBoolType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App类型"]
    pub AppType: TThostFtdcAppTypeType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "终端IP地址"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[doc = "用户登录应答2"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLogin2Field {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "登录成功时间"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易系统名称"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "最大报单引用"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "上期所时间"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "大商所时间"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "郑商所时间"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "中金所时间"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "能源中心时间"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "随机串"]
    pub RandomString: TThostFtdcRandomStringType,
}
#[doc = "银期转帐报文头"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferHeaderField {
    #[doc = "版本号，常量，1.0"]
    pub Version: TThostFtdcVersionType,
    #[doc = "交易代码，必填"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "交易日期，必填，格式：yyyymmdd"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间，必填，格式：hhmmss"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "发起方流水号，N/A"]
    pub TradeSerial: TThostFtdcTradeSerialType,
    #[doc = "期货公司代码，必填"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "银行代码，根据查询银行得到，必填"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码，根据查询银行得到，必填"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "操作员，N/A"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "交易设备类型，N/A"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "记录数，N/A"]
    pub RecordNum: TThostFtdcRecordNumType,
    #[doc = "会话编号，N/A"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "请求编号，N/A"]
    pub RequestID: TThostFtdcRequestIDType,
}
#[doc = "银行资金转期货请求，TradeCode=202001"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureReqField {
    #[doc = "期货资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "密码标志"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "密码"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "转账金额"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "客户手续费"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "币种：RMB-人民币 USD-美圆 HKD-港元"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "银行资金转期货请求响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureRspField {
    #[doc = "响应代码"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "响应信息"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "转帐金额"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "应收客户手续费"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "币种"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "期货资金转银行请求，TradeCode=202002"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankReqField {
    #[doc = "期货资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "密码标志"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "密码"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "转账金额"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "客户手续费"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "币种：RMB-人民币 USD-美圆 HKD-港元"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "期货资金转银行请求响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankRspField {
    #[doc = "响应代码"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "响应信息"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "转帐金额"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "应收客户手续费"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "币种"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "查询银行资金请求，TradeCode=204002"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryBankReqField {
    #[doc = "期货资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "密码标志"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "密码"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "币种：RMB-人民币 USD-美圆 HKD-港元"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "查询银行资金请求响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryBankRspField {
    #[doc = "响应代码"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "响应信息"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "银行余额"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "银行可用余额"]
    pub UseAmt: TThostFtdcMoneyType,
    #[doc = "银行可取余额"]
    pub FetchAmt: TThostFtdcMoneyType,
    #[doc = "币种"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "查询银行交易明细请求，TradeCode=204999"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryDetailReqField {
    #[doc = "期货资金账户"]
    pub FutureAccount: TThostFtdcAccountIDType,
}
#[doc = "查询银行交易明细请求响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryDetailRspField {
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "交易代码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "期货流水号"]
    pub FutureSerial: TThostFtdcTradeSerialNoType,
    #[doc = "期货公司代码"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "资金帐号"]
    pub FutureAccount: TThostFtdcFutureAccountType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcTradeSerialNoType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "银行账号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "证件号码"]
    pub CertCode: TThostFtdcCertCodeType,
    #[doc = "货币代码"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
    #[doc = "发生金额"]
    pub TxAmount: TThostFtdcMoneyType,
    #[doc = "有效标志"]
    pub Flag: TThostFtdcTransferValidFlagType,
}
#[doc = "响应信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspInfoField {
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "交易所"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所名称"]
    pub ExchangeName: TThostFtdcExchangeNameType,
    #[doc = "交易所属性"]
    pub ExchangeProperty: TThostFtdcExchangePropertyType,
}
#[doc = "产品"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "产品名称"]
    pub ProductName: TThostFtdcProductNameType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品类型"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "合约数量乘数"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "最小变动价位"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "市价单最大下单量"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "市价单最小下单量"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "限价单最大下单量"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "限价单最小下单量"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "持仓类型"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "持仓日期类型"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "平仓处理类型"]
    pub CloseDealType: TThostFtdcCloseDealTypeType,
    #[doc = "交易币种类型"]
    pub TradeCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "质押资金可用范围"]
    pub MortgageFundUseRange: TThostFtdcMortgageFundUseRangeType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "合约基础商品乘数"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "交易所产品代码"]
    pub ExchangeProductID: TThostFtdcInstrumentIDType,
}
#[doc = "合约"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约名称"]
    pub InstrumentName: TThostFtdcInstrumentNameType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "产品类型"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "交割年份"]
    pub DeliveryYear: TThostFtdcYearType,
    #[doc = "交割月"]
    pub DeliveryMonth: TThostFtdcMonthType,
    #[doc = "市价单最大下单量"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "市价单最小下单量"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "限价单最大下单量"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "限价单最小下单量"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "合约数量乘数"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "最小变动价位"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "创建日"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "上市日"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "到期日"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "开始交割日"]
    pub StartDelivDate: TThostFtdcDateType,
    #[doc = "结束交割日"]
    pub EndDelivDate: TThostFtdcDateType,
    #[doc = "合约生命周期状态"]
    pub InstLifePhase: TThostFtdcInstLifePhaseType,
    #[doc = "当前是否交易"]
    pub IsTrading: TThostFtdcBoolType,
    #[doc = "持仓类型"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "持仓日期类型"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "多头保证金率"]
    pub LongMarginRatio: TThostFtdcRatioType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatio: TThostFtdcRatioType,
    #[doc = "是否使用大额单边保证金算法"]
    pub MaxMarginSideAlgorithm: TThostFtdcMaxMarginSideAlgorithmType,
    #[doc = "保留的无效字段"]
    pub reserve4: TThostFtdcOldInstrumentIDType,
    #[doc = "执行价"]
    pub StrikePrice: TThostFtdcPriceType,
    #[doc = "期权类型"]
    pub OptionsType: TThostFtdcOptionsTypeType,
    #[doc = "合约基础商品乘数"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "组合类型"]
    pub CombinationType: TThostFtdcCombinationTypeType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "基础商品代码"]
    pub UnderlyingInstrID: TThostFtdcInstrumentIDType,
}
#[doc = "经纪公司"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "经纪公司简称"]
    pub BrokerAbbr: TThostFtdcBrokerAbbrType,
    #[doc = "经纪公司名称"]
    pub BrokerName: TThostFtdcBrokerNameType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "交易所交易员"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装数量"]
    pub InstallCount: TThostFtdcInstallCountType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "投资者"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorField {
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者分组代码"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "投资者名称"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "证件类型"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "联系电话"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "通讯地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "开户日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "手机"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "手续费率模板代码"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "保证金率模板代码"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[doc = "交易编码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingCodeField {
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "交易编码类型"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "业务类型"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "会员编码和经纪公司编码对照表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcPartBrokerField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "管理用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSuperUserField {
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户名称"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "管理用户功能权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSuperUserFunctionField {
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "功能代码"]
    pub FunctionCode: TThostFtdcFunctionCodeType,
}
#[doc = "投资者组"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorGroupField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者分组代码"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "投资者分组名称"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[doc = "资金账户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "上次质押金额"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "上次信用额度"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "上次存款额"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "上次结算准备金"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "利息基数"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "利息收入"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "出金金额"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "当前保证金总额"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "期货结算准备金"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "可用资金"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "可取资金"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "基本准备金"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "信用额度"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "质押金额"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "投资者交割保证金"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "交易所交割保证金"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "保底期货结算准备金"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "上次货币质入金额"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "上次货币质出金额"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质入金额"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "货币质出金额"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质押余额"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "可质押货币金额"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "特殊产品占用保证金"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结保证金"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品手续费"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结手续费"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品持仓盈亏"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "特殊产品平仓盈亏"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "根据持仓盈亏算法计算的特殊产品持仓盈亏"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "特殊产品交易所保证金"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "业务类型"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "延时换汇冻结金额"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "剩余换汇额度"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[doc = "投资者持仓"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "持仓多空方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "持仓日期"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "上日持仓"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "今日持仓"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "多头冻结"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "空头冻结"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "开仓冻结金额"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓冻结金额"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓量"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "平仓量"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "开仓金额"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "平仓金额"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "持仓成本"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "占用的保证金"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "开仓成本"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "组合成交形成的持仓"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "组合多头冻结"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "组合空头冻结"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "逐日盯市平仓盈亏"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲平仓盈亏"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "今日持仓"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "执行冻结"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "执行冻结金额"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "放弃执行冻结"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行冻结的昨仓"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "大商所持仓成本差值，只有大商所使用"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas持仓手数"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas持仓成本"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "合约保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否相对交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "合约手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentCommissionRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "业务类型"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "深度行情"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepthMarketDataField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "最新价"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "昨收盘"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "昨持仓量"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今开盘"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "最高价"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "最低价"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交金额"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "持仓量"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今收盘"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "涨停板价"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "跌停板价"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "昨虚实度"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "今虚实度"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "最后修改毫秒"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "申买价一"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "申买量一"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "申卖价一"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "申卖量一"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "申买价二"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "申买量二"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "申卖价二"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "申卖量二"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "申买价三"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "申买量三"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "申卖价三"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "申卖量三"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "申买价四"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "申买量四"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "申卖价四"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "申卖量四"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "申买价五"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "申买量五"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "申卖价五"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "申卖量五"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "当日均价"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "上带价"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "下带价"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}

#[doc = "投资者合约交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentTradingRightField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易权限"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "经纪公司用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户名称"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "用户类型"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "是否使用令牌"]
    pub IsUsingOTP: TThostFtdcBoolType,
    #[doc = "是否强制终端认证"]
    pub IsAuthForce: TThostFtdcBoolType,
}
#[doc = "经纪公司用户口令"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserPasswordField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "上次修改时间"]
    pub LastUpdateTime: TThostFtdcDateTimeType,
    #[doc = "上次登陆时间"]
    pub LastLoginTime: TThostFtdcDateTimeType,
    #[doc = "密码过期时间"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "弱密码过期时间"]
    pub WeakExpireDate: TThostFtdcDateType,
}
#[doc = "经纪公司用户功能权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserFunctionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "经纪公司功能代码"]
    pub BrokerFunctionCode: TThostFtdcBrokerFunctionCodeType,
}
#[doc = "交易所交易员报盘机"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderOfferField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所交易员连接状态"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "发出连接请求的日期"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "发出连接请求的时间"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "上次报告日期"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "上次报告时间"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "完成连接日期"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "完成连接时间"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "启动日期"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "启动时间"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "本席位最大成交编号"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "本席位最大报单备拷"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
#[doc = "投资者结算结果"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementInfoField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "消息正文"]
    pub Content: TThostFtdcContentType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "合约保证金率调整"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateAdjustField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否相对交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所保证金率调整"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateAdjustField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "跟随交易所投资者多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "跟随交易所投资者多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "跟随交易所投资者空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "跟随交易所投资者空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "交易所多头保证金率"]
    pub ExchLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "交易所多头保证金费"]
    pub ExchLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "交易所空头保证金率"]
    pub ExchShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "交易所空头保证金费"]
    pub ExchShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "不跟随交易所投资者多头保证金率"]
    pub NoLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "不跟随交易所投资者多头保证金费"]
    pub NoLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "不跟随交易所投资者空头保证金率"]
    pub NoShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "不跟随交易所投资者空头保证金费"]
    pub NoShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "汇率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "源币种"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "源币种单位数量"]
    pub FromCurrencyUnit: TThostFtdcCurrencyUnitType,
    #[doc = "目标币种"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇率"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
}
#[doc = "结算引用"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementRefField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[doc = "当前时间"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCurrentTimeField {
    #[doc = "当前日期"]
    pub CurrDate: TThostFtdcDateType,
    #[doc = "当前时间"]
    pub CurrTime: TThostFtdcTimeType,
    #[doc = "当前时间（毫秒）"]
    pub CurrMillisec: TThostFtdcMillisecType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
}
#[doc = "通讯阶段"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCommPhaseField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "通讯时段编号"]
    pub CommPhaseNo: TThostFtdcCommPhaseNoType,
    #[doc = "系统编号"]
    pub SystemID: TThostFtdcSystemIDType,
}
#[doc = "登录信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginInfoField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "登录日期"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "登录时间"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "系统名称"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "密码,已弃用"]
    pub PasswordDeprecated: TThostFtdcPasswordType,
    #[doc = "最大报单引用"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "上期所时间"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "大商所时间"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "郑商所时间"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "中金所时间"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "动态密码"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "能源中心时间"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "查询时是否需要流控"]
    pub IsQryControl: TThostFtdcBoolType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "登录信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLogoutAllField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "系统名称"]
    pub SystemName: TThostFtdcSystemNameType,
}
#[doc = "前置状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFrontStatusField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "上次报告日期"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "上次报告时间"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "用户口令变更"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserPasswordUpdateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "原来的口令"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "新的口令"]
    pub NewPassword: TThostFtdcPasswordType,
}
#[doc = "输入报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "用户强评标志"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "互换单标志"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报单提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单来源"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "报单状态"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "报单类型"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "今成交数量"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "剩余数量"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "委托时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "激活时间"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "挂起时间"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "最后修改交易所交易员代码"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "用户强评标志"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司报单编号"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "相关报单"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "郑商所成交数量"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "互换单标志"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderField {
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报单提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单来源"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "报单状态"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "报单类型"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "今成交数量"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "剩余数量"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "委托时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "激活时间"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "挂起时间"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "最后修改交易所交易员代码"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报单插入失败"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderInsertErrorField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "输入报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量变化"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量变化"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量变化"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报单操作失败"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionErrorField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "交易所成交"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeTradeField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "成交编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易角色"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "价格"]
    pub Price: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交时期"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "成交时间"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "成交类型"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "成交价来源"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "成交来源"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "成交"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "成交编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易角色"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "价格"]
    pub Price: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交时期"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "成交时间"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "成交类型"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "成交价来源"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "经纪公司报单编号"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "成交来源"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "用户会话"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSessionField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "登录日期"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "登录时间"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询最大报单数量"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "最大允许报单数量"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "投资者结算结果确认信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementInfoConfirmField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "确认日期"]
    pub ConfirmDate: TThostFtdcDateType,
    #[doc = "确认时间"]
    pub ConfirmTime: TThostFtdcTimeType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "出入金同步"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDepositField {
    #[doc = "出入金流水号"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "是否强制进行"]
    pub IsForce: TThostFtdcBoolType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "是否是个股期权内转"]
    pub IsFromSopt: TThostFtdcBoolType,
    #[doc = "资金密码"]
    pub TradingPassword: TThostFtdcPasswordType,
}
#[doc = "货币质押同步"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncFundMortgageField {
    #[doc = "货币质押流水号"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "源币种"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "质押金额"]
    pub MortgageAmount: TThostFtdcMoneyType,
    #[doc = "目标币种"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "经纪公司同步"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerSyncField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "正在同步中的投资者"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorField {
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者分组代码"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "投资者名称"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "证件类型"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "联系电话"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "通讯地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "开户日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "手机"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "手续费率模板代码"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "保证金率模板代码"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[doc = "正在同步中的交易代码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingTradingCodeField {
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "交易编码类型"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
}
#[doc = "正在同步中的投资者分组"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorGroupField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者分组代码"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "投资者分组名称"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[doc = "正在同步中的交易账号"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingTradingAccountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "上次质押金额"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "上次信用额度"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "上次存款额"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "上次结算准备金"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "利息基数"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "利息收入"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "出金金额"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "当前保证金总额"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "期货结算准备金"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "可用资金"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "可取资金"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "基本准备金"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "信用额度"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "质押金额"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "投资者交割保证金"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "交易所交割保证金"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "保底期货结算准备金"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "上次货币质入金额"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "上次货币质出金额"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质入金额"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "货币质出金额"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质押余额"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "可质押货币金额"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "特殊产品占用保证金"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结保证金"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品手续费"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结手续费"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品持仓盈亏"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "特殊产品平仓盈亏"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "根据持仓盈亏算法计算的特殊产品持仓盈亏"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "特殊产品交易所保证金"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "延时换汇冻结金额"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "剩余换汇额度"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[doc = "正在同步中的投资者持仓"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorPositionField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "持仓多空方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "持仓日期"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "上日持仓"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "今日持仓"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "多头冻结"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "空头冻结"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "开仓冻结金额"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓冻结金额"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓量"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "平仓量"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "开仓金额"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "平仓金额"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "持仓成本"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "占用的保证金"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "开仓成本"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "组合成交形成的持仓"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "组合多头冻结"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "组合空头冻结"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "逐日盯市平仓盈亏"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲平仓盈亏"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "今日持仓"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "执行冻结"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "执行冻结金额"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "放弃执行冻结"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行冻结的昨仓"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "大商所持仓成本差值，只有大商所使用"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas持仓手数"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas持仓成本"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "正在同步中的合约保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentMarginRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否相对交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "正在同步中的合约手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentCommissionRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "正在同步中的合约交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentTradingRightField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易权限"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询成交"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "成交编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "开始时间"]
    pub TradeTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub TradeTimeEnd: TThostFtdcTimeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询投资者持仓"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询资金账户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradingAccountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "业务类型"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "查询投资者"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "查询交易编码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradingCodeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易编码类型"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "查询投资者组"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorGroupField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "查询合约保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentMarginRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentCommissionRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询合约交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentTradingRightField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询经纪公司"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "查询交易员"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTraderField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "查询管理用户功能权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySuperUserFunctionField {
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "查询用户会话"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryUserSessionField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "查询经纪公司会员代码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryPartBrokerField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
}
#[doc = "查询前置状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryFrontStatusField {
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
}
#[doc = "查询交易所报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "查询报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "查询交易所报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderActionField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "查询管理用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySuperUserField {
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "查询交易所"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "查询产品"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "产品类型"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "查询合约"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "查询行情"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryDepthMarketDataField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询经纪公司用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerUserField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "查询经纪公司用户权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerUserFunctionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "查询交易员报盘机"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTraderOfferField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "查询出入金流水"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySyncDepositField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "出入金流水号"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "查询投资者结算结果"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询交易所保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询交易所调整保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateAdjustField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询汇率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "源币种"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "目标币种"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询货币质押流水"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySyncFundMortgageField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "货币质押流水号"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "查询报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryHisOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前期权合约最小保证金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMiniMarginField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "单位（手）期权合约最小保证金"]
    pub MinMargin: TThostFtdcMoneyType,
    #[doc = "取值方式"]
    pub ValueMethod: TThostFtdcValueMethodType,
    #[doc = "是否跟随交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前期权合约保证金调整系数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMarginAdjustField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否跟随交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前期权合约手续费的详细内容"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrCommRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "执行手续费率"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "执行手续费"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "期权交易成本"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradeCostField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "期权合约保证金不变部分"]
    pub FixedMargin: TThostFtdcMoneyType,
    #[doc = "期权合约最小保证金"]
    pub MiniMargin: TThostFtdcMoneyType,
    #[doc = "期权合约权利金"]
    pub Royalty: TThostFtdcMoneyType,
    #[doc = "交易所期权合约保证金不变部分"]
    pub ExchFixedMargin: TThostFtdcMoneyType,
    #[doc = "交易所期权合约最小保证金"]
    pub ExchMiniMargin: TThostFtdcMoneyType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "期权交易成本查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradeCostField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "期权合约报价"]
    pub InputPrice: TThostFtdcPriceType,
    #[doc = "标的价格,填0则用昨结算价"]
    pub UnderlyingPrice: TThostFtdcPriceType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "期权手续费率查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrCommRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "股指现货指数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIndexPriceField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "指数现货收盘价"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "输入的执行宣告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "保留头寸申请的持仓方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "期权行权后是否保留期货头寸的标记,该字段已废弃"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "期权行权后生成的头寸是否自动平仓"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "输入执行宣告操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "执行宣告操作引用"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行宣告操作编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "执行宣告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "保留头寸申请的持仓方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "期权行权后是否保留期货头寸的标记,该字段已废弃"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "期权行权后生成的头寸是否自动平仓"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "本地执行宣告编号"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "执行宣告提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "执行宣告编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "执行结果"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司报单编号"]
    pub BrokerExecOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "执行宣告操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "执行宣告操作引用"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行宣告操作编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地执行宣告编号"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "执行宣告查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExecOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行宣告编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所执行宣告信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderField {
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "保留头寸申请的持仓方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "期权行权后是否保留期货头寸的标记,该字段已废弃"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "期权行权后生成的头寸是否自动平仓"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "本地执行宣告编号"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "执行宣告提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "执行宣告编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "执行结果"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所执行宣告查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "执行宣告操作查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExecOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "交易所执行宣告操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderActionField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行宣告操作编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地执行宣告编号"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "交易所执行宣告操作查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderActionField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "错误执行宣告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "执行类型"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "保留头寸申请的持仓方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "期权行权后是否保留期货头寸的标记,该字段已废弃"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "期权行权后生成的头寸是否自动平仓"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询错误执行宣告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "错误执行宣告操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "执行宣告操作引用"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "执行宣告引用"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行宣告操作编号"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询错误执行宣告操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "投资者期权合约交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradingRightField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "交易权限"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询期权合约交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradingRightField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "输入的询价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputForQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "询价引用"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "询价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "询价引用"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "本地询价编号"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "询价状态"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司询价编号"]
    pub BrokerForQutoSeq: TThostFtdcSequenceNoType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "询价查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所询价信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeForQuoteField {
    #[doc = "本地询价编号"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "询价状态"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所询价查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeForQuoteField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "输入的报价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报价引用"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "卖价格"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "买价格"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "卖数量"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "买数量"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "卖开平标志"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "买开平标志"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "卖投机套保标志"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买投机套保标志"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "衍生卖报单引用"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "衍生买报单引用"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "应价编号"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "被顶单编号"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
}
#[doc = "输入报价操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报价操作引用"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报价引用"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报价操作编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "报价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报价引用"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "卖价格"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "买价格"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "卖数量"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "买数量"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "卖开平标志"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "买开平标志"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "卖投机套保标志"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买投机套保标志"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "本地报价编号"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报价提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "报价提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "报价编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "报价状态"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "卖方报单编号"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "买方报单编号"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司报价编号"]
    pub BrokerQuoteSeq: TThostFtdcSequenceNoType,
    #[doc = "衍生卖报单引用"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "衍生买报单引用"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "应价编号"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "被顶单编号"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
}
#[doc = "报价操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报价操作引用"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报价引用"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报价操作编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报价编号"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "报价查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryQuoteField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报价编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所报价信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteField {
    #[doc = "卖价格"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "买价格"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "卖数量"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "买数量"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "卖开平标志"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "买开平标志"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "卖投机套保标志"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买投机套保标志"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "本地报价编号"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报价提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "报价提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "报价编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "报价状态"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "卖方报单编号"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "买方报单编号"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "应价编号"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报价查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "报价操作查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryQuoteActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "交易所报价操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteActionField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报价操作编号"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报价编号"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所报价操作查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteActionField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "期权合约delta值"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrDeltaField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Delta值"]
    pub Delta: TThostFtdcRatioType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "发给做市商的询价请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteRspField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "询价编号"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "询价时间"]
    pub ForQuoteTime: TThostFtdcTimeType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前期权合约执行偏移值的详细内容"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcStrikeOffsetField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "执行偏移值"]
    pub Offset: TThostFtdcMoneyType,
    #[doc = "执行偏移类型"]
    pub OffsetType: TThostFtdcStrikeOffsetTypeType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "期权执行偏移值查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryStrikeOffsetField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "输入批量报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputBatchOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "批量报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBatchOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所批量报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeBatchOrderActionField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询批量报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBatchOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "组合合约安全系数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombInstrumentGuardField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = ""]
    pub GuarantRatio: TThostFtdcRatioType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "组合合约安全系数查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombInstrumentGuardField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "输入的申请组合"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputCombActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "组合引用"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "组合指令方向"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "申请组合"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "组合引用"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "组合指令方向"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "本地申请组合编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "组合状态"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "组合编号"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "申请组合查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所申请组合信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeCombActionField {
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "组合指令方向"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "本地申请组合编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "组合状态"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "组合编号"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "交易所申请组合查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeCombActionField {
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "产品报价汇率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductExchRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报价币种类型"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇率"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "产品报价汇率查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductExchRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "查询询价价差参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteParamField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "询价价差参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteParamField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "最新价"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "价差"]
    pub PriceInterval: TThostFtdcPriceType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前做市商期权合约手续费的详细内容"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMOptionInstrCommRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "执行手续费率"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "执行手续费"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "做市商期权手续费率查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMOptionInstrCommRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "做市商合约手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMInstrumentCommissionRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询做市商合约手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMInstrumentCommissionRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "当前报单手续费的详细内容"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentOrderCommRateField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "报单手续费"]
    pub OrderCommByVolume: TThostFtdcRatioType,
    #[doc = "撤单手续费"]
    pub OrderActionCommByVolume: TThostFtdcRatioType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "报单手续费"]
    pub OrderCommByTrade: TThostFtdcRatioType,
    #[doc = "撤单手续费"]
    pub OrderActionCommByTrade: TThostFtdcRatioType,
}
#[doc = "报单手续费率查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentOrderCommRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeParamField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "参数代码"]
    pub TradeParamID: TThostFtdcTradeParamIDType,
    #[doc = "参数代码值"]
    pub TradeParamValue: TThostFtdcSettlementParamValueType,
    #[doc = "备注"]
    pub Memo: TThostFtdcMemoType,
}
#[doc = "合约保证金率调整"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateULField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "期货持仓限制参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureLimitPosiParamField {
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "当日投机开仓数量限制"]
    pub SpecOpenVolume: TThostFtdcVolumeType,
    #[doc = "当日套利开仓数量限制"]
    pub ArbiOpenVolume: TThostFtdcVolumeType,
    #[doc = "当日投机+套利开仓数量限制"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "禁止登录IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenIPField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "IP列表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIPListField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "是否白名单"]
    pub IsWhite: TThostFtdcBoolType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "输入的期权自对冲"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "期权自对冲引用"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "期权行权的头寸是否自对冲"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "输入期权自对冲操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "期权自对冲操作引用"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "期权自对冲引用"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "期权自对冲操作编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "期权自对冲"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "期权自对冲引用"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "期权行权的头寸是否自对冲"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "本地期权自对冲编号"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期权自对冲提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "期权自对冲编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "自对冲结果"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司报单编号"]
    pub BrokerOptionSelfCloseSeq: TThostFtdcSequenceNoType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "期权自对冲操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "期权自对冲操作引用"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "期权自对冲引用"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "期权自对冲操作编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地期权自对冲编号"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "期权自对冲查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "期权自对冲编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "开始时间"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "结束时间"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所期权自对冲信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseField {
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "期权行权的头寸是否自对冲"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "本地期权自对冲编号"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期权自对冲提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "期权自对冲编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "插入时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "自对冲结果"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "期权自对冲操作查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "交易所期权自对冲操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseActionField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "期权自对冲操作编号"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地期权自对冲编号"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "期权行权的头寸是否自对冲"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "延时换汇同步"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapField {
    #[doc = "换汇流水号"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "源币种"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "源金额"]
    pub FromAmount: TThostFtdcMoneyType,
    #[doc = "源换汇冻结金额(可用冻结)"]
    pub FromFrozenSwap: TThostFtdcMoneyType,
    #[doc = "源剩余换汇额度(可提冻结)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "目标币种"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "目标金额"]
    pub ToAmount: TThostFtdcMoneyType,
    #[doc = "是否手工换汇"]
    pub IsManualSwap: TThostFtdcBoolType,
    #[doc = "是否将所有外币的剩余换汇额度设置为0"]
    pub IsAllRemainSetZero: TThostFtdcBoolType,
}
#[doc = "查询延时换汇同步"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySyncDelaySwapField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "延时换汇流水号"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "投资单元"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestUnitField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "投资者单元名称"]
    pub InvestorUnitName: TThostFtdcPartyNameType,
    #[doc = "投资者分组代码"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "手续费率模板代码"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "保证金率模板代码"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询投资单元"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestUnitField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "二级代理商资金校验模式"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentCheckModeField {
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "币种"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "境外中介机构资金帐号"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "是否需要校验自己的资金账户"]
    pub CheckSelfAccount: TThostFtdcBoolType,
}
#[doc = "二级代理商信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentTradeInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "境外中介机构资金帐号"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "二级代理商姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "市场行情"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "最新价"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "昨收盘"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "昨持仓量"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今开盘"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "最高价"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "最低价"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交金额"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "持仓量"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今收盘"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "涨停板价"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "跌停板价"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "昨虚实度"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "今虚实度"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "最后修改毫秒"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "行情基础属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataBaseField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "昨收盘"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "昨持仓量"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "昨虚实度"]
    pub PreDelta: TThostFtdcRatioType,
}
#[doc = "行情静态属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataStaticField {
    #[doc = "今开盘"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "最高价"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "最低价"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "今收盘"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "涨停板价"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "跌停板价"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "今虚实度"]
    pub CurrDelta: TThostFtdcRatioType,
}
#[doc = "行情最新成交属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataLastMatchField {
    #[doc = "最新价"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交金额"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "持仓量"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
}
#[doc = "行情最优价属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataBestPriceField {
    #[doc = "申买价一"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "申买量一"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "申卖价一"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "申卖量一"]
    pub AskVolume1: TThostFtdcVolumeType,
}
#[doc = "行情申买二、三属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataBid23Field {
    #[doc = "申买价二"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "申买量二"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "申买价三"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "申买量三"]
    pub BidVolume3: TThostFtdcVolumeType,
}
#[doc = "行情申卖二、三属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataAsk23Field {
    #[doc = "申卖价二"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "申卖量二"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "申卖价三"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "申卖量三"]
    pub AskVolume3: TThostFtdcVolumeType,
}
#[doc = "行情申买四、五属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataBid45Field {
    #[doc = "申买价四"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "申买量四"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "申买价五"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "申买量五"]
    pub BidVolume5: TThostFtdcVolumeType,
}
#[doc = "行情申卖四、五属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataAsk45Field {
    #[doc = "申卖价四"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "申卖量四"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "申卖价五"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "申卖量五"]
    pub AskVolume5: TThostFtdcVolumeType,
}
#[doc = "行情更新时间属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataUpdateTimeField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "最后修改毫秒"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "行情上下带价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataBandingPriceField {
    #[doc = "上带价"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "下带价"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[doc = "行情交易所代码属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataExchangeField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "指定的合约"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSpecificInstrumentField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "合约状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentStatusField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "结算组代码"]
    pub SettlementGroupID: TThostFtdcSettlementGroupIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "合约交易状态"]
    pub InstrumentStatus: TThostFtdcInstrumentStatusType,
    #[doc = "交易阶段编号"]
    pub TradingSegmentSN: TThostFtdcTradingSegmentSNType,
    #[doc = "进入本状态时间"]
    pub EnterTime: TThostFtdcTimeType,
    #[doc = "进入本状态原因"]
    pub EnterReason: TThostFtdcInstStatusEnterReasonType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询合约状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentStatusField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[doc = "投资者账户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorAccountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "浮动盈亏算法"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcPositionProfitAlgorithmField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "盈亏算法"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "备注"]
    pub Memo: TThostFtdcMemoType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "会员资金折扣"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDiscountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "资金折扣比例"]
    pub Discount: TThostFtdcRatioType,
}
#[doc = "查询转帐银行"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTransferBankField {
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[doc = "转帐银行"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankField {
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "银行名称"]
    pub BankName: TThostFtdcBankNameType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "查询投资者持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionDetailField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "投资者持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionDetailField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买卖"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "开仓日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "成交编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "开仓价"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "成交类型"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "逐日盯市平仓盈亏"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲平仓盈亏"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "逐日盯市持仓盈亏"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲持仓盈亏"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "投资者保证金"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "昨结算价"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "平仓量"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "平仓金额"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "先开先平剩余数量（DCE）"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "特殊持仓标志"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "组合合约代码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "资金账户口令域"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "交易所行情报盘机"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMDTraderOfferField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所交易员连接状态"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "发出连接请求的日期"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "发出连接请求的时间"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "上次报告日期"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "上次报告时间"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "完成连接日期"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "完成连接时间"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "启动日期"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "启动时间"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "本席位最大成交编号"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "本席位最大报单备拷"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
#[doc = "查询行情报盘机"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMDTraderOfferField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "查询客户通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryNoticeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "客户通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNoticeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "消息正文"]
    pub Content: TThostFtdcContentType,
    #[doc = "经纪公司通知内容序列号"]
    pub SequenceLabel: TThostFtdcSequenceLabelType,
}
#[doc = "用户权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserRightField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "客户权限类型"]
    pub UserRightType: TThostFtdcUserRightTypeType,
    #[doc = "是否禁止"]
    pub IsForbidden: TThostFtdcBoolType,
}
#[doc = "查询结算信息确认域"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoConfirmField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "装载结算信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoadSettlementInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "经纪公司可提资金算法表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerWithdrawAlgorithmField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "可提资金算法"]
    pub WithdrawAlgorithm: TThostFtdcAlgorithmType,
    #[doc = "资金使用率"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "可提是否包含平仓盈利"]
    pub IncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "本日无仓且无成交客户是否受可提比例限制"]
    pub AllWithoutTrade: TThostFtdcAllWithoutTradeType,
    #[doc = "可用是否包含平仓盈利"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "是否启用用户事件"]
    pub IsBrokerUserEvent: TThostFtdcBoolType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "货币质押比率"]
    pub FundMortgageRatio: TThostFtdcRatioType,
    #[doc = "权益算法"]
    pub BalanceAlgorithm: TThostFtdcBalanceAlgorithmType,
}
#[doc = "资金账户口令变更域"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateV1Field {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "原来的口令"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "新的口令"]
    pub NewPassword: TThostFtdcPasswordType,
}
#[doc = "资金账户口令变更域"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "原来的口令"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "新的口令"]
    pub NewPassword: TThostFtdcPasswordType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询组合合约分腿"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombinationLegField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "单腿编号"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "组合合约代码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "单腿合约代码"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询组合合约分腿"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySyncStatusField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
}
#[doc = "组合交易合约的单腿"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombinationLegField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "单腿编号"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "单腿乘数"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "派生层数"]
    pub ImplyLevel: TThostFtdcImplyLevelType,
    #[doc = "组合合约代码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "单腿合约代码"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "数据同步状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncStatusField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "数据同步状态"]
    pub DataSyncStatus: TThostFtdcDataSyncStatusType,
}
#[doc = "查询联系人"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryLinkManField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "联系人"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLinkManField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "联系人类型"]
    pub PersonType: TThostFtdcPersonTypeType,
    #[doc = "证件类型"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "名称"]
    pub PersonName: TThostFtdcPartyNameType,
    #[doc = "联系电话"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "通讯地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮政编码"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "优先级"]
    pub Priority: TThostFtdcPriorityType,
    #[doc = "开户邮政编码"]
    pub UOAZipCode: TThostFtdcUOAZipCodeType,
    #[doc = "全称"]
    pub PersonFullName: TThostFtdcInvestorFullNameType,
}
#[doc = "查询经纪公司用户事件"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerUserEventField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户事件类型"]
    pub UserEventType: TThostFtdcUserEventTypeType,
}
#[doc = "查询经纪公司用户事件"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserEventField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户事件类型"]
    pub UserEventType: TThostFtdcUserEventTypeType,
    #[doc = "用户事件序号"]
    pub EventSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "事件发生日期"]
    pub EventDate: TThostFtdcDateType,
    #[doc = "事件发生时间"]
    pub EventTime: TThostFtdcTimeType,
    #[doc = "用户事件信息"]
    pub UserEventInfo: TThostFtdcUserEventInfoType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询签约银行请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryContractBankField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[doc = "查询签约银行响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcContractBankField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分中心代码"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "银行名称"]
    pub BankName: TThostFtdcBankNameType,
}
#[doc = "投资者组合持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionCombineDetailField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "开仓日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "组合编号"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "撮合编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买卖"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "持仓量"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "投资者保证金"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "单腿编号"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "单腿乘数"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "成交组号"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "组合持仓合约编码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "预埋单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "用户强评标志"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "预埋报单编号"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "用户类型"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "预埋单状态"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "互换单标志"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "输入预埋单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量变化"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "预埋撤单单编号"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "用户类型"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "预埋撤单状态"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询预埋单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询预埋撤单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "删除预埋单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "预埋报单编号"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "删除预埋撤单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "预埋撤单编号"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "经纪公司可提资金算法表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorWithdrawAlgorithmField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "可提资金比例"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "货币质押比率"]
    pub FundMortgageRatio: TThostFtdcRatioType,
}
#[doc = "查询组合持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionCombineDetailField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "组合持仓合约编码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "成交均价"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataAveragePriceField {
    #[doc = "当日均价"]
    pub AveragePrice: TThostFtdcPriceType,
}
#[doc = "校验投资者密码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyInvestorPasswordField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
}
#[doc = "用户IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserIPField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "IP地址掩码"]
    pub IPMask: TThostFtdcIPAddressType,
}
#[doc = "用户事件通知信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "发送时间"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "消息正文"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "序列系列号"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "序列号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "用户事件通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "序列系列号"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "发送时间"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "序列号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "消息正文"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "查询交易事件通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradingNoticeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "查询错误报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryErrOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "错误报单"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "用户强评标志"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "互换单标志"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易编码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询错误报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrorConditionalOrderField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "报单价格条件"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "组合开平标志"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "组合投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "有效期类型"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD日期"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "成交量类型"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "最小成交量"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "触发条件"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "止损价"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "强平原因"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "自动挂起标志"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "报单提交状态"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "报单提示序号"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "报单来源"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "报单状态"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "报单类型"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "今成交数量"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "剩余数量"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "报单日期"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "委托时间"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "激活时间"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "挂起时间"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "撤销时间"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "最后修改交易所交易员代码"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "结算会员编号"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "用户强评标志"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "操作用户代码"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "经纪公司报单编号"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "相关报单"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "郑商所成交数量"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "互换单标志"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "资金账号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "保留的无效字段"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询错误报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryErrOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "错误报单操作"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderActionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "报单操作引用"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "报单引用"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "前置编号"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "报单编号"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "操作标志"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "价格"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "数量变化"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "操作日期"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "操作时间"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "交易所交易员代码"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "本地报单编号"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "操作本地编号"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "客户代码"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "业务单元"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "报单操作状态"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "状态信息"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "营业部编号"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询交易所状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeSequenceField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "交易所状态"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeSequenceField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "序号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "合约交易状态"]
    pub MarketStatus: TThostFtdcInstrumentStatusType,
}
#[doc = "根据价格查询最大报单数量"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeWithPriceField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "开平标志"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "最大允许报单数量"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "报单价格"]
    pub Price: TThostFtdcPriceType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询经纪公司交易参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingParamsField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "经纪公司交易参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerTradingParamsField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保证金价格类型"]
    pub MarginPriceType: TThostFtdcMarginPriceTypeType,
    #[doc = "盈亏算法"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "可用是否包含平仓盈利"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "期权权利金价格类型"]
    pub OptionRoyaltyPriceType: TThostFtdcOptionRoyaltyPriceTypeType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "查询经纪公司交易算法"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingAlgosField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "经纪公司交易算法"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerTradingAlgosField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "持仓处理算法编号"]
    pub HandlePositionAlgoID: TThostFtdcHandlePositionAlgoIDType,
    #[doc = "寻找保证金率算法编号"]
    pub FindMarginRateAlgoID: TThostFtdcFindMarginRateAlgoIDType,
    #[doc = "资金处理算法编号"]
    pub HandleTradingAccountAlgoID: TThostFtdcHandleTradingAccountAlgoIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询经纪公司资金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQueryBrokerDepositField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "经纪公司资金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerDepositField {
    #[doc = "交易日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "会员代码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "上次结算准备金"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "当前保证金总额"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "期货结算准备金"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "出金金额"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "可提资金"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "基本准备金"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[doc = "查询保证金监管系统经纪公司密钥"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCFMMCBrokerKeyField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "保证金监管系统经纪公司密钥"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCFMMCBrokerKeyField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "经纪公司统一编码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "密钥生成日期"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "密钥生成时间"]
    pub CreateTime: TThostFtdcTimeType,
    #[doc = "密钥编号"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "动态密钥"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
    #[doc = "动态密钥类型"]
    pub KeyKind: TThostFtdcCFMMCKeyKindType,
}
#[doc = "保证金监管系统经纪公司资金账户密钥"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountKeyField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "经纪公司统一编码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "密钥编号"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "动态密钥"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
}
#[doc = "请求查询保证金监管系统经纪公司资金账户密钥"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCFMMCTradingAccountKeyField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "用户动态令牌参数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserOTPParamField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "动态令牌提供商"]
    pub OTPVendorsID: TThostFtdcOTPVendorsIDType,
    #[doc = "动态令牌序列号"]
    pub SerialNumber: TThostFtdcSerialNumberType,
    #[doc = "令牌密钥"]
    pub AuthKey: TThostFtdcAuthKeyType,
    #[doc = "漂移值"]
    pub LastDrift: TThostFtdcLastDriftType,
    #[doc = "成功值"]
    pub LastSuccess: TThostFtdcLastSuccessType,
    #[doc = "动态令牌类型"]
    pub OTPType: TThostFtdcOTPTypeType,
}
#[doc = "手工同步用户动态令牌"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcManualSyncBrokerUserOTPField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "动态令牌类型"]
    pub OTPType: TThostFtdcOTPTypeType,
    #[doc = "第一个动态密码"]
    pub FirstOTP: TThostFtdcPasswordType,
    #[doc = "第二个动态密码"]
    pub SecondOTP: TThostFtdcPasswordType,
}
#[doc = "投资者手续费率模板"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCommRateModelField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "手续费率模板代码"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "模板名称"]
    pub CommModelName: TThostFtdcCommModelNameType,
}
#[doc = "请求查询投资者手续费率模板"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCommRateModelField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "手续费率模板代码"]
    pub CommModelID: TThostFtdcInvestorIDType,
}
#[doc = "投资者保证金率模板"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarginModelField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保证金率模板代码"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "模板名称"]
    pub MarginModelName: TThostFtdcCommModelNameType,
}
#[doc = "请求查询投资者保证金率模板"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMarginModelField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "保证金率模板代码"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[doc = "仓单折抵信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcEWarrantOffsetField {
    #[doc = "交易日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询仓单折抵信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryEWarrantOffsetField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "查询投资者品种/跨品种保证金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProductGroupMarginField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "品种/跨品种标示"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[doc = "投资者品种/跨品种保证金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProductGroupMarginField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "多头冻结的保证金"]
    pub LongFrozenMargin: TThostFtdcMoneyType,
    #[doc = "空头冻结的保证金"]
    pub ShortFrozenMargin: TThostFtdcMoneyType,
    #[doc = "占用的保证金"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "多头保证金"]
    pub LongUseMargin: TThostFtdcMoneyType,
    #[doc = "空头保证金"]
    pub ShortUseMargin: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "交易所多头保证金"]
    pub LongExchMargin: TThostFtdcMoneyType,
    #[doc = "交易所空头保证金"]
    pub ShortExchMargin: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "折抵总金额"]
    pub OffsetAmount: TThostFtdcMoneyType,
    #[doc = "多头折抵总金额"]
    pub LongOffsetAmount: TThostFtdcMoneyType,
    #[doc = "空头折抵总金额"]
    pub ShortOffsetAmount: TThostFtdcMoneyType,
    #[doc = "交易所折抵总金额"]
    pub ExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "交易所多头折抵总金额"]
    pub LongExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "交易所空头折抵总金额"]
    pub ShortExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "品种/跨品种标示"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[doc = "查询监控中心用户令牌"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQueryCFMMCTradingAccountTokenField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "监控中心用户令牌"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountTokenField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "经纪公司统一编码"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "密钥编号"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "动态令牌"]
    pub Token: TThostFtdcCFMMCTokenType,
}
#[doc = "查询产品组"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductGroupField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "投资者品种/跨品种保证金产品组"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductGroupField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "保留的无效字段"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "产品组代码"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[doc = "交易所公告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBulletinField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "公告编号"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "序列号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "公告类型"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "紧急程度"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
    #[doc = "发送时间"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "消息摘要"]
    pub Abstract: TThostFtdcAbstractType,
    #[doc = "消息来源"]
    pub ComeFrom: TThostFtdcComeFromType,
    #[doc = "消息正文"]
    pub Content: TThostFtdcContentType,
    #[doc = "WEB地址"]
    pub URLLink: TThostFtdcURLLinkType,
    #[doc = "市场代码"]
    pub MarketID: TThostFtdcMarketIDType,
}
#[doc = "查询交易所公告"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBulletinField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "公告编号"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "序列号"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "公告类型"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "紧急程度"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
}
#[doc = "MulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMulticastInstrumentField {
    #[doc = "主题号"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约编号"]
    pub InstrumentNo: TThostFtdcInstallIDType,
    #[doc = "基准价"]
    pub CodePrice: TThostFtdcPriceType,
    #[doc = "合约数量乘数"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "最小变动价位"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "QryMulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMulticastInstrumentField {
    #[doc = "主题号"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "App客户端权限分配"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAppIDAuthAssignField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "交易中心代码"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "转帐开户请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqOpenAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇钞标志"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "转帐销户请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqCancelAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇钞标志"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "变更银行账户请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqChangeAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "新银行帐号"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "新银行密码"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "转账请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqTransferField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "期货可取金额"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "费用支付标志"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "应收客户费用"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "应收期货公司费用"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "发送方给接收方的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "转账交易状态"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "银行发起银行资金转期货响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspTransferField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "期货可取金额"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "费用支付标志"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "应收客户费用"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "应收期货公司费用"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "发送方给接收方的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "转账交易状态"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "冲正请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqRepealField {
    #[doc = "冲正时间间隔"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "已经冲正次数"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "银行冲正标志"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "期商冲正标志"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "被冲正平台流水号"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "被冲正银行流水号"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "被冲正期货流水号"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "期货可取金额"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "费用支付标志"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "应收客户费用"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "应收期货公司费用"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "发送方给接收方的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "转账交易状态"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "冲正响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspRepealField {
    #[doc = "冲正时间间隔"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "已经冲正次数"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "银行冲正标志"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "期商冲正标志"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "被冲正平台流水号"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "被冲正银行流水号"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "被冲正期货流水号"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "期货可取金额"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "费用支付标志"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "应收客户费用"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "应收期货公司费用"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "发送方给接收方的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "转账交易状态"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "查询账户信息请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "查询账户信息响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "银行可用金额"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "银行可取金额"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "期商签到签退"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureSignIOField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
}
#[doc = "期商签到响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignInField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN密钥"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC密钥"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[doc = "期商签退请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqFutureSignOutField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
}
#[doc = "期商签退响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignOutField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "查询指定流水号的交易结果请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryTradeResultBySerialField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "流水号"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "本流水号发布者的机构类型"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "本流水号发布者机构编码"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "查询指定流水号的交易结果响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryTradeResultBySerialField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "流水号"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "本流水号发布者的机构类型"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "本流水号发布者机构编码"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "原始返回代码"]
    pub OriginReturnCode: TThostFtdcReturnCodeType,
    #[doc = "原始返回码描述"]
    pub OriginDescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "转帐金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
}
#[doc = "日终文件就绪请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqDayEndFileReadyField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "文件业务功能"]
    pub FileBusinessCode: TThostFtdcFileBusinessCodeType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
}
#[doc = "返回结果"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReturnResultField {
    #[doc = "返回代码"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "返回码描述"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[doc = "验证期货资金密码"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "验证客户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyCustInfoField {
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "验证期货资金密码和客户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordAndCustInfoField {
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "验证期货资金密码和客户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepositResultInformField {
    #[doc = "出入金流水号，该流水号为银期报盘返回的流水号"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "返回代码"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "返回码描述"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[doc = "交易核心向银期报盘发出密钥同步请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqSyncKeyField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易核心给银期报盘的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
}
#[doc = "交易核心向银期报盘发出密钥同步响应"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspSyncKeyField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易核心给银期报盘的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "查询账户信息通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyQueryAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "银行可用金额"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "银行可取金额"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "银期转账交易流水表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferSerialField {
    #[doc = "平台流水号"]
    pub PlateSerial: TThostFtdcPlateSerialType,
    #[doc = "交易发起方日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易日期"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "交易代码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "会话编号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "银行编码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构编码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "期货公司编码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "期货公司帐号类型"]
    pub FutureAccType: TThostFtdcFutureAccTypeType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "期货公司流水号"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "交易金额"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "应收客户费用"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "应收期货公司费用"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "有效标志"]
    pub AvailabilityFlag: TThostFtdcAvailabilityFlagType,
    #[doc = "操作员"]
    pub OperatorCode: TThostFtdcOperatorCodeType,
    #[doc = "新银行帐号"]
    pub BankNewAccount: TThostFtdcBankAccountType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "请求查询转帐流水"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTransferSerialField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "银行编码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "期商签到通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignInField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN密钥"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC密钥"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[doc = "期商签退通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignOutField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "交易核心向银期报盘发出密钥同步处理结果的通知"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifySyncKeyField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易核心给银期报盘的消息"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "请求编号"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "请求查询银期签约关系"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryAccountregisterField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "银行编码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构编码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "客户开销户信息表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountregisterField {
    #[doc = "交易日期"]
    pub TradeDay: TThostFtdcTradeDateType,
    #[doc = "银行编码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构编码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "期货公司编码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期货公司分支机构编码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "开销户类别"]
    pub OpenOrDestroy: TThostFtdcOpenOrDestroyType,
    #[doc = "签约日期"]
    pub RegDate: TThostFtdcTradeDateType,
    #[doc = "解约日期"]
    pub OutDate: TThostFtdcTradeDateType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "银期开户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOpenAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇钞标志"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "银期销户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCancelAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇钞标志"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "渠道标志"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "期货单位帐号类型"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "期货单位帐号"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易柜员"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "用户标识"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "银期变更银行账号信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcChangeAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "新银行帐号"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "新银行密码"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "银行密码标志"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "期货资金密码核对标志"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "长客户姓名"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[doc = "二级代理操作员银期权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentACIDMapField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "资金账户"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "境外中介机构资金帐号"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[doc = "二级代理操作员银期权限查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySecAgentACIDMapField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "资金账户"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "币种"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "灾备中心交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserRightsAssignField {
    #[doc = "应用单元代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "交易中心代码"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "经济公司是否有在本标示的交易权限"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserRightAssignField {
    #[doc = "应用单元代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "交易中心代码"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "能否交易"]
    pub Tradeable: TThostFtdcBoolType,
}
#[doc = "灾备交易转换报文"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDRTransferField {
    #[doc = "原交易中心代码"]
    pub OrigDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "目标交易中心代码"]
    pub DestDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "原应用单元代码"]
    pub OrigBrokerID: TThostFtdcBrokerIDType,
    #[doc = "目标易用单元代码"]
    pub DestBrokerID: TThostFtdcBrokerIDType,
}
#[doc = "Fens用户信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFensUserInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "登录模式"]
    pub LoginMode: TThostFtdcLoginModeType,
}
#[doc = "当前银期所属交易中心"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCurrTransferIdentityField {
    #[doc = "交易中心代码"]
    pub IdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "禁止登录用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenUserField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询禁止登录用户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenUserField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "资金账户基本准备金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountReserveField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "基本准备金"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询禁止登录IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenIPField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询IP列表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryIPListField {
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询用户下单权限分配表"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryUserRightsAssignField {
    #[doc = "应用单元代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "银期预约开户确认请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountConfirmField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "期货密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "预约开户银行流水号"]
    pub BankReserveOpenSeq: TThostFtdcBankSerialType,
    #[doc = "预约开户日期"]
    pub BookDate: TThostFtdcTradeDateType,
    #[doc = "预约开户验证密码"]
    pub BookPsw: TThostFtdcPasswordType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "银期预约开户"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountField {
    #[doc = "业务功能码"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "银行代码"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行分支机构代码"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "期商代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "期商分支机构代码"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "交易日期"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "交易时间"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "银行流水号"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "交易系统日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "银期平台消息流水号"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "最后分片标志"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "会话号"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "客户姓名"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "证件类型"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "证件号码"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "性别"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "国家代码"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "客户类型"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "地址"]
    pub Address: TThostFtdcAddressType,
    #[doc = "邮编"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "电话号码"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "手机"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "传真"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "电子邮件"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "资金账户状态"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "银行帐号"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行密码"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "安装编号"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "验证客户证件号码标志"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "摘要"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "银行帐号类型"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "期货公司银行编码"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "交易ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "预约开户状态"]
    pub ReserveOpenAccStas: TThostFtdcReserveOpenAccStasType,
    #[doc = "错误代码"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "错误信息"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[doc = "银行账户属性"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountPropertyField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "银行统一标识类型"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "银行账户"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "银行账户的开户人名称"]
    pub OpenName: TThostFtdcInvestorFullNameType,
    #[doc = "银行账户的开户行"]
    pub OpenBank: TThostFtdcOpenBankType,
    #[doc = "是否活跃"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "账户来源"]
    pub AccountSourceType: TThostFtdcAccountSourceTypeType,
    #[doc = "开户日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "注销日期"]
    pub CancelDate: TThostFtdcDateType,
    #[doc = "录入员代码"]
    pub OperatorID: TThostFtdcOperatorIDType,
    #[doc = "录入日期"]
    pub OperateDate: TThostFtdcDateType,
    #[doc = "录入时间"]
    pub OperateTime: TThostFtdcTimeType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "查询当前交易中心"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCurrDRIdentityField {
    #[doc = "交易中心代码"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "当前交易中心"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCurrDRIdentityField {
    #[doc = "交易中心代码"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "查询二级代理商资金校验模式"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySecAgentCheckModeField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "查询二级代理商信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySecAgentTradeInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "境外中介机构资金帐号"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[doc = "用户发出获取安全安全登陆方法请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserAuthMethodField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "用户发出获取安全安全登陆方法回复"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserAuthMethodField {
    #[doc = "当前可以用的认证模式"]
    pub UsableAuthMethod: TThostFtdcCurrentAuthMethodType,
}
#[doc = "用户发出获取安全安全登陆方法请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqGenUserCaptchaField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "生成的图片验证码信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspGenUserCaptchaField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "图片信息长度"]
    pub CaptchaInfoLen: TThostFtdcCaptchaInfoLenType,
    #[doc = "图片信息"]
    pub CaptchaInfo: TThostFtdcCaptchaInfoType,
}
#[doc = "用户发出获取安全安全登陆方法请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqGenUserTextField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "短信验证码生成的回复"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspGenUserTextField {
    #[doc = "短信验证码序号"]
    pub UserTextSeq: TThostFtdcUserTextSeqType,
}
#[doc = "用户发出带图形验证码的登录请求请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithCaptchaField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "图形验证码的文字内容"]
    pub Captcha: TThostFtdcPasswordType,
    #[doc = "终端IP端口"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "终端IP地址"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[doc = "用户发出带短信验证码的登录请求请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithTextField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "短信验证码文字内容"]
    pub Text: TThostFtdcPasswordType,
    #[doc = "终端IP端口"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "终端IP地址"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[doc = "用户发出带动态验证码的登录请求请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithOTPField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "密码"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "用户端产品信息"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "接口端产品信息"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "协议信息"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac地址"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "登录备注"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "OTP密码"]
    pub OTPPassword: TThostFtdcPasswordType,
    #[doc = "终端IP端口"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "终端IP地址"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[doc = "api握手请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqApiHandshakeField {
    #[doc = "api与front通信密钥版本号"]
    pub CryptoKeyVersion: TThostFtdcCryptoKeyVersionType,
}
#[doc = "front发给api的握手回复"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspApiHandshakeField {
    #[doc = "握手回复数据长度"]
    pub FrontHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "握手回复数据"]
    pub FrontHandshakeData: TThostFtdcHandshakeDataType,
    #[doc = "API认证是否开启"]
    pub IsApiAuthEnabled: TThostFtdcBoolType,
}
#[doc = "api给front的验证key的请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqVerifyApiKeyField {
    #[doc = "握手回复数据长度"]
    pub ApiHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "握手回复数据"]
    pub ApiHandshakeData: TThostFtdcHandshakeDataType,
}
#[doc = "操作员组织架构关系"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepartmentUserField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcDepartmentRangeType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "查询频率，每秒查询比数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQueryFreqField {
    #[doc = "查询频率"]
    pub QueryFreq: TThostFtdcQueryFreqType,
}
#[doc = "禁止认证IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthForbiddenIPField {
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询禁止认证IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryAuthForbiddenIPField {
    #[doc = "IP地址"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "换汇可提冻结"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapFrozenField {
    #[doc = "换汇流水号"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "源币种"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "源剩余换汇额度(可提冻结)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "是否手工换汇"]
    pub IsManualSwap: TThostFtdcBoolType,
}
#[doc = "用户系统信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSystemInfoField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "用户端系统内部信息长度"]
    pub ClientSystemInfoLen: TThostFtdcSystemInfoLenType,
    #[doc = "用户端系统内部信息"]
    pub ClientSystemInfo: TThostFtdcClientSystemInfoType,
    #[doc = "保留的无效字段"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "终端IP端口"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "登录成功时间"]
    pub ClientLoginTime: TThostFtdcTimeType,
    #[doc = "App代码"]
    pub ClientAppID: TThostFtdcAppIDType,
    #[doc = "用户公网IP"]
    pub ClientPublicIP: TThostFtdcIPAddressType,
    #[doc = "客户登录备注2"]
    pub ClientLoginRemark: TThostFtdcClientLoginRemarkType,
}
#[doc = "终端用户绑定信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthUserIDField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "用户代码"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "校验类型"]
    pub AuthType: TThostFtdcAuthTypeType,
}
#[doc = "用户IP绑定信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthIPField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App代码"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "用户代码"]
    pub IPAddress: TThostFtdcIPAddressType,
}
#[doc = "查询分类合约"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryClassifiedInstrumentField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "合约交易状态"]
    pub TradingType: TThostFtdcTradingTypeType,
    #[doc = "合约分类类型"]
    pub ClassType: TThostFtdcClassTypeType,
}
#[doc = "查询组合优惠比例"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombPromotionParamField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "组合优惠比例"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombPromotionParamField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投机套保标志"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "期权组合保证金比例"]
    pub Xparameter: TThostFtdcDiscountRatioType,
}
#[doc = "投资者风险结算持仓查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleInvstPositionField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[doc = "风险结算产品查询"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleProductStatusField {
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[doc = "投资者风险结算持仓"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleInvstPositionField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "持仓多空方向"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "持仓日期"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "上日持仓"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "今日持仓"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "多头冻结"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "空头冻结"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "开仓冻结金额"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓冻结金额"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "开仓量"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "平仓量"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "开仓金额"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "平仓金额"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "持仓成本"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "占用的保证金"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "开仓成本"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "组合成交形成的持仓"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "组合多头冻结"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "组合空头冻结"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "逐日盯市平仓盈亏"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲平仓盈亏"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "今日持仓"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "执行冻结"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "执行冻结金额"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "放弃执行冻结"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "执行冻结的昨仓"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "投资单元代码"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "大商所持仓成本差值，只有大商所使用"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas持仓手数"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas持仓成本"]
    pub TasPositionCost: TThostFtdcMoneyType,
}
#[doc = "风险品种"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleProductStatusField {
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品编号"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "产品结算状态"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[doc = "风险结算追平信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInfoField {
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "追平状态"]
    pub SyncDeltaStatus: TThostFtdcSyncDeltaStatusType,
    #[doc = "追平描述"]
    pub SyncDescription: TThostFtdcSyncDescriptionType,
    #[doc = "是否只有资金追平"]
    pub IsOnlyTrdDelta: TThostFtdcBoolType,
}
#[doc = "风险结算追平产品信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductStatusField {
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "是否允许交易"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[doc = "风险结算追平持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosDtlField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买卖"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "开仓日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "成交编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "开仓价"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "成交类型"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "组合合约代码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "逐日盯市平仓盈亏"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲平仓盈亏"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "逐日盯市持仓盈亏"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "逐笔对冲持仓盈亏"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "投资者保证金"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "昨结算价"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "平仓量"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "平仓金额"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "先开先平剩余数量（DCE）"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "特殊持仓标志"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平组合持仓明细"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosCombDtlField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "开仓日期"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "组合编号"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "撮合编号"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "买卖"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "持仓量"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "投资者保证金"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "保证金率"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "保证金率(按手数)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "单腿编号"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "单腿乘数"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "成交组号"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平资金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaTradingAccountField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者帐号"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "上次质押金额"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "上次信用额度"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "上次存款额"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "上次结算准备金"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "上次占用的保证金"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "利息基数"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "利息收入"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "入金金额"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "出金金额"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "冻结的保证金"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "冻结的资金"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "冻结的手续费"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "当前保证金总额"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "资金差额"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "手续费"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "平仓盈亏"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "持仓盈亏"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "期货结算准备金"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "可用资金"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "可取资金"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "基本准备金"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "结算编号"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "信用额度"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "质押金额"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "交易所保证金"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "投资者交割保证金"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "交易所交割保证金"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "保底期货结算准备金"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "币种代码"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "上次货币质入金额"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "上次货币质出金额"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质入金额"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "货币质出金额"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "货币质押余额"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "可质押货币金额"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "特殊产品占用保证金"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结保证金"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "特殊产品手续费"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品冻结手续费"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "特殊产品持仓盈亏"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "特殊产品平仓盈亏"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "根据持仓盈亏算法计算的特殊产品持仓盈亏"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "特殊产品交易所保证金"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "延时换汇冻结金额"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "剩余换汇额度"]
    pub RemainSwap: TThostFtdcMoneyType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "投资者风险结算总保证金"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInitInvstMarginField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "追平前总风险保证金"]
    pub LastRiskTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "追平前交易所总风险保证金"]
    pub LastRiskTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "本次追平品种总保证金"]
    pub ThisSyncInvstMargin: TThostFtdcMoneyType,
    #[doc = "本次追平品种交易所总保证金"]
    pub ThisSyncExchMargin: TThostFtdcMoneyType,
    #[doc = "本次未追平品种总保证金"]
    pub RemainRiskInvstMargin: TThostFtdcMoneyType,
    #[doc = "本次未追平品种交易所总保证金"]
    pub RemainRiskExchMargin: TThostFtdcMoneyType,
    #[doc = "追平前总特殊产品风险保证金"]
    pub LastRiskSpecTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "追平前总特殊产品交易所风险保证金"]
    pub LastRiskSpecTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "本次追平品种特殊产品总保证金"]
    pub ThisSyncSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "本次追平品种特殊产品交易所总保证金"]
    pub ThisSyncSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "本次未追平品种特殊产品总保证金"]
    pub RemainRiskSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "本次未追平品种特殊产品交易所总保证金"]
    pub RemainRiskSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平组合优先级"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDceCombInstrumentField {
    #[doc = "合约代码"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "成交组号"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "投机套保标志"]
    pub CombHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "组合类型"]
    pub CombinationType: TThostFtdcDceCombinationTypeType,
    #[doc = "买卖"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "期权组合保证金比例"]
    pub Xparameter: TThostFtdcDiscountRatioType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平投资者期货保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否相对交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平交易所期货保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaExchMarginRateField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平中金现货期权交易所保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptExchMarginField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平中金现货期权投资者保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstMarginField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "投机空头保证金调整系数"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "保值空头保证金调整系数"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "套利空头保证金调整系数"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "是否跟随交易所收取"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "做市商空头保证金调整系数"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平期权标的调整保证金率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateULField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "多头保证金率"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "多头保证金费"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "空头保证金率"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "空头保证金费"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平期权手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstCommRateField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "执行手续费率"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "执行手续费"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平期货手续费率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstCommRateField {
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "投资者范围"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "开仓手续费率"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "开仓手续费"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "平仓手续费率"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "平仓手续费"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "平今手续费率"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "平今手续费"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平交叉汇率"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductExchRateField {
    #[doc = "产品代码"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "报价币种类型"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "汇率"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平行情"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDepthMarketDataField {
    #[doc = "交易日"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约在交易所的代码"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "最新价"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "上次结算价"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "昨收盘"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "昨持仓量"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今开盘"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "最高价"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "最低价"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "成交金额"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "持仓量"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "今收盘"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "本次结算价"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "涨停板价"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "跌停板价"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "昨虚实度"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "今虚实度"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "最后修改时间"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "最后修改毫秒"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "申买价一"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "申买量一"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "申卖价一"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "申卖量一"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "申买价二"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "申买量二"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "申卖价二"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "申卖量二"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "申买价三"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "申买量三"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "申卖价三"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "申卖量三"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "申买价四"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "申买量四"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "申卖价四"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "申卖量四"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "申买价五"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "申买量五"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "申卖价五"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "申卖量五"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "当日均价"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "业务日期"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "上带价"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "下带价"]
    pub BandingLowerPrice: TThostFtdcPriceType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平现货指数"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaIndexPriceField {
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "指数现货收盘价"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "风险结算追平仓单折抵"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaEWarrantOffsetField {
    #[doc = "交易日期"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "经纪公司代码"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "投资者代码"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "交易所代码"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "合约代码"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "买卖方向"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "投机套保标志"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "数量"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "操作标志"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "追平序号"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMdSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct CThostFtdcMdApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[doc = "创建MdApi"]
    #[doc = "@param pszFlowPath 存贮订阅信息文件的目录，默认为当前目录"]
    #[doc = "@return 创建出的UserApi"]
    #[doc = "modify for udp marketdata"]
    #[link_name = "\u{1}?CreateFtdcMdApi@CThostFtdcMdApi@@SAPEAV1@PEBD_N1@Z"]
    pub fn CThostFtdcMdApi_CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi;
}
extern "C" {
    #[doc = "获取API的版本信息"]
    #[doc = "@retrun 获取到的版本号"]
    #[link_name = "\u{1}?GetApiVersion@CThostFtdcMdApi@@SAPEBDXZ"]
    pub fn CThostFtdcMdApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcMdApi {
    #[inline]
    pub unsafe fn CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi {
        CThostFtdcMdApi_CreateFtdcMdApi(pszFlowPath, bIsUsingUdp, bIsMulticast)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcMdApi_GetApiVersion()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdApi {
    pub m_member: *mut CThostFtdcMdApi,
}
extern "C" {
    #[link_name = "\u{1}?Release@Rust_CThostFtdcMdApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcMdApi_Release(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}?Init@Rust_CThostFtdcMdApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcMdApi_Init(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}?Join@Rust_CThostFtdcMdApi@@QEAAHXZ"]
    pub fn Rust_CThostFtdcMdApi_Join(this: *mut Rust_CThostFtdcMdApi) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetTradingDay@Rust_CThostFtdcMdApi@@QEAAPEBDXZ"]
    pub fn Rust_CThostFtdcMdApi_GetTradingDay(
        this: *mut Rust_CThostFtdcMdApi,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}?RegisterFront@Rust_CThostFtdcMdApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterFront(
        this: *mut Rust_CThostFtdcMdApi,
        pszFrontAddress: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterNameServer@Rust_CThostFtdcMdApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcMdApi,
        pszNsAddress: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterFensUserInfo@Rust_CThostFtdcMdApi@@QEAAXPEAUCThostFtdcFensUserInfoField@@@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcMdApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterSpi@Rust_CThostFtdcMdApi@@QEAAXPEAVCThostFtdcMdSpi@@@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterSpi(
        this: *mut Rust_CThostFtdcMdApi,
        pSpi: *mut CThostFtdcMdSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribeMarketData@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_SubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?UnSubscribeMarketData@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SubscribeForQuoteRsp@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?UnSubscribeForQuoteRsp@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogin@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcReqUserLoginField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcMdApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogout@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcUserLogoutField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcMdApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMulticastInstrument@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcQryMulticastInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqQryMulticastInstrument(
        this: *mut Rust_CThostFtdcMdApi,
        pQryMulticastInstrument: *mut CThostFtdcQryMulticastInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcMdApi@@QEAA@PEAVCThostFtdcMdApi@@@Z"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(
        this: *mut Rust_CThostFtdcMdApi,
        member: *mut CThostFtdcMdApi,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcMdApi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(this: *mut Rust_CThostFtdcMdApi);
}
impl Rust_CThostFtdcMdApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcMdApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcMdApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_uchar {
        Rust_CThostFtdcMdApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_uchar) {
        Rust_CThostFtdcMdApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_uchar) {
        Rust_CThostFtdcMdApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcMdApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcMdSpi) {
        Rust_CThostFtdcMdApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn SubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_uchar,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMulticastInstrument(
        &mut self,
        pQryMulticastInstrument: *mut CThostFtdcQryMulticastInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqQryMulticastInstrument(self, pQryMulticastInstrument, nRequestID)
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcMdApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdSpi {
    pub _base: CThostFtdcMdSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcMdSpi@@QEAA@PEAX@Z"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(
        this: *mut Rust_CThostFtdcMdSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcMdSpi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(this: *mut Rust_CThostFtdcMdSpi);
}
impl Rust_CThostFtdcMdSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?OnFrontConnected@Rust_CThostFtdcMdSpi@@UEAAXXZ"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?OnFrontDisconnected@Rust_CThostFtdcMdSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnHeartBeatWarning@Rust_CThostFtdcMdSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogin@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcRspUserLoginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogout@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcUserLogoutField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMulticastInstrument@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcMulticastInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspQryMulticastInstrument(
        this: *mut ::std::os::raw::c_void,
        pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspError@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSubMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUnSubMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSubForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUnSubForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnDepthMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcDepthMarketDataField@@@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcForQuoteRspField@@@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[doc = "创建TraderApi"]
    #[doc = "@param pszFlowPath 存贮订阅信息文件的目录，默认为当前目录"]
    #[doc = "@return 创建出的UserApi"]
    #[link_name = "\u{1}?CreateFtdcTraderApi@CThostFtdcTraderApi@@SAPEAV1@PEBD@Z"]
    pub fn CThostFtdcTraderApi_CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_uchar,
    ) -> *mut CThostFtdcTraderApi;
}
extern "C" {
    #[doc = "获取API的版本信息"]
    #[doc = "@retrun 获取到的版本号"]
    #[link_name = "\u{1}?GetApiVersion@CThostFtdcTraderApi@@SAPEBDXZ"]
    pub fn CThostFtdcTraderApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_uchar,
    ) -> *mut CThostFtdcTraderApi {
        CThostFtdcTraderApi_CreateFtdcTraderApi(pszFlowPath)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcTraderApi_GetApiVersion()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderApi {
    pub m_member: *mut CThostFtdcTraderApi,
}
extern "C" {
    #[link_name = "\u{1}?Release@Rust_CThostFtdcTraderApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcTraderApi_Release(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}?Init@Rust_CThostFtdcTraderApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcTraderApi_Init(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}?Join@Rust_CThostFtdcTraderApi@@QEAAHXZ"]
    pub fn Rust_CThostFtdcTraderApi_Join(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetTradingDay@Rust_CThostFtdcTraderApi@@QEAAPEBDXZ"]
    pub fn Rust_CThostFtdcTraderApi_GetTradingDay(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}?RegisterFront@Rust_CThostFtdcTraderApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFront(
        this: *mut Rust_CThostFtdcTraderApi,
        pszFrontAddress: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterNameServer@Rust_CThostFtdcTraderApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcTraderApi,
        pszNsAddress: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterFensUserInfo@Rust_CThostFtdcTraderApi@@QEAAXPEAUCThostFtdcFensUserInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterSpi@Rust_CThostFtdcTraderApi@@QEAAXPEAVCThostFtdcTraderSpi@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterSpi(
        this: *mut Rust_CThostFtdcTraderApi,
        pSpi: *mut CThostFtdcTraderSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribePrivateTopic@Rust_CThostFtdcTraderApi@@QEAAXW4THOST_TE_RESUME_TYPE@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePrivateTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribePublicTopic@Rust_CThostFtdcTraderApi@@QEAAXW4THOST_TE_RESUME_TYPE@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePublicTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}?ReqAuthenticate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqAuthenticateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqAuthenticate(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?RegisterUserSystemInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserSystemInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SubmitUserSystemInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserSystemInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogout@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserLogoutField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserPasswordUpdate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserPasswordUpdateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqTradingAccountPasswordUpdate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcTradingAccountPasswordUpdateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserAuthMethod@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserAuthMethodField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserAuthMethod(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqGenUserCaptcha@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqGenUserCaptchaField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqGenUserText@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqGenUserTextField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithCaptcha@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithCaptchaField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithText@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithTextField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithOTP@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithOTPField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqParkedOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMaxOrderVolume@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMaxOrderVolumeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMaxOrderVolume(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqSettlementInfoConfirm@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcSettlementInfoConfirmField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqRemoveParkedOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcRemoveParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqRemoveParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcRemoveParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqExecOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputExecOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqExecOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputExecOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqForQuoteInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputForQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqForQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQuoteInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQuoteAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputQuoteActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqBatchOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputBatchOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqBatchOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOptionSelfCloseInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOptionSelfCloseField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOptionSelfCloseAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOptionSelfCloseActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqCombActionInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputCombActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqCombActionInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTrade@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTrade(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPosition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingAccount@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestor@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestor(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingCode@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingCodeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingCode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentMarginRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentMarginRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentCommissionRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentCommissionRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchange@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchange(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProduct@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProduct(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrument@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrument(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryDepthMarketData@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryDepthMarketDataField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySettlementInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySettlementInfoField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTransferBank@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTransferBankField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPositionDetail@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionDetailField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryNotice@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryNoticeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySettlementInfoConfirm@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySettlementInfoConfirmField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPositionCombineDetail@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionCombineDetailField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCFMMCTradingAccountKey@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCFMMCTradingAccountKeyField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryEWarrantOffset@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryEWarrantOffsetField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorProductGroupMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorProductGroupMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeMarginRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeMarginRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeMarginRateAdjust@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeMarginRateAdjustField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentACIDMap@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentACIDMapField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProductExchRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductExchRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductExchRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProductGroup@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductGroupField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductGroup(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMMInstrumentCommissionRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMMInstrumentCommissionRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMMOptionInstrCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMMOptionInstrCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentOrderCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentOrderCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentTradingAccount@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentCheckMode@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentCheckModeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentTradeInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentTradeInfoField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionInstrTradeCost@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionInstrTradeCostField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionInstrCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionInstrCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExecOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExecOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExecOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryForQuote@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryForQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryForQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryQuote@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionSelfClose@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionSelfCloseField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestUnit@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestUnitField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestUnit(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombInstrumentGuard@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombInstrumentGuardField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTransferSerial@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTransferSerialField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferSerial(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryAccountregister@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryAccountregisterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryAccountregister(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryContractBank@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryContractBankField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryContractBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryParkedOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingNotice@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingNoticeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryBrokerTradingParams@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryBrokerTradingParamsField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryBrokerTradingAlgos@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryBrokerTradingAlgosField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQueryCFMMCTradingAccountToken@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQueryCFMMCTradingAccountTokenField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
        this: *mut Rust_CThostFtdcTraderApi,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqFromBankToFutureByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqTransferField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqFromFutureToBankByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqTransferField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQueryBankAccountMoneyByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqQueryAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryClassifiedInstrument@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryClassifiedInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryClassifiedInstrument(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryClassifiedInstrument: *mut CThostFtdcQryClassifiedInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombPromotionParam@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombPromotionParamField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombPromotionParam(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombPromotionParam: *mut CThostFtdcQryCombPromotionParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRiskSettleInvstPosition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRiskSettleInvstPositionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRiskSettleInvstPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRiskSettleInvstPosition: *mut CThostFtdcQryRiskSettleInvstPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRiskSettleProductStatus@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRiskSettleProductStatusField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRiskSettleProductStatus(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRiskSettleProductStatus: *mut CThostFtdcQryRiskSettleProductStatusField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcTraderApi@@QEAA@PEAVCThostFtdcTraderApi@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(
        this: *mut Rust_CThostFtdcTraderApi,
        member: *mut CThostFtdcTraderApi,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcTraderApi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(
        this: *mut Rust_CThostFtdcTraderApi,
    );
}
impl Rust_CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcTraderApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcTraderApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_uchar {
        Rust_CThostFtdcTraderApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_uchar) {
        Rust_CThostFtdcTraderApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_uchar) {
        Rust_CThostFtdcTraderApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcTraderApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcTraderSpi) {
        Rust_CThostFtdcTraderApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribePrivateTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePrivateTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn SubscribePublicTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePublicTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn ReqAuthenticate(
        &mut self,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqAuthenticate(self, pReqAuthenticateField, nRequestID)
    }
    #[inline]
    pub unsafe fn RegisterUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn SubmitUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserPasswordUpdate(
        &mut self,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(self, pUserPasswordUpdate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqTradingAccountPasswordUpdate(
        &mut self,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
            self,
            pTradingAccountPasswordUpdate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqUserAuthMethod(
        &mut self,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserAuthMethod(self, pReqUserAuthMethod, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserCaptcha(
        &mut self,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(self, pReqGenUserCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserText(
        &mut self,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserText(self, pReqGenUserText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithCaptcha(
        &mut self,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(self, pReqUserLoginWithCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithText(
        &mut self,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithText(self, pReqUserLoginWithText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithOTP(
        &mut self,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(self, pReqUserLoginWithOTP, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderInsert(
        &mut self,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderInsert(self, pInputOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderInsert(
        &mut self,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(self, pParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderAction(
        &mut self,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderAction(self, pParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderAction(
        &mut self,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderAction(self, pInputOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMaxOrderVolume(
        &mut self,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMaxOrderVolume(self, pQryMaxOrderVolume, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqSettlementInfoConfirm(
        &mut self,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(self, pSettlementInfoConfirm, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrder(
        &mut self,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(self, pRemoveParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrderAction(
        &mut self,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
            self,
            pRemoveParkedOrderAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqExecOrderInsert(
        &mut self,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderInsert(self, pInputExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqExecOrderAction(
        &mut self,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderAction(self, pInputExecOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqForQuoteInsert(
        &mut self,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqForQuoteInsert(self, pInputForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteInsert(
        &mut self,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteInsert(self, pInputQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteAction(
        &mut self,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteAction(self, pInputQuoteAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqBatchOrderAction(
        &mut self,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqBatchOrderAction(self, pInputBatchOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseInsert(
        &mut self,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(self, pInputOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseAction(
        &mut self,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
            self,
            pInputOptionSelfCloseAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqCombActionInsert(
        &mut self,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqCombActionInsert(self, pInputCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOrder(
        &mut self,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOrder(self, pQryOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTrade(
        &mut self,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTrade(self, pQryTrade, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPosition(
        &mut self,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(self, pQryInvestorPosition, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestor(
        &mut self,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestor(self, pQryInvestor, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingCode(
        &mut self,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingCode(self, pQryTradingCode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentMarginRate(
        &mut self,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
            self,
            pQryInstrumentMarginRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentCommissionRate(
        &mut self,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
            self,
            pQryInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchange(
        &mut self,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchange(self, pQryExchange, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProduct(
        &mut self,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProduct(self, pQryProduct, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrument(
        &mut self,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrument(self, pQryInstrument, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryDepthMarketData(
        &mut self,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(self, pQryDepthMarketData, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfo(
        &mut self,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(self, pQrySettlementInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferBank(
        &mut self,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferBank(self, pQryTransferBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionDetail(
        &mut self,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
            self,
            pQryInvestorPositionDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryNotice(
        &mut self,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryNotice(self, pQryNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfoConfirm(
        &mut self,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
            self,
            pQrySettlementInfoConfirm,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionCombineDetail(
        &mut self,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
            self,
            pQryInvestorPositionCombineDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCFMMCTradingAccountKey(
        &mut self,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
            self,
            pQryCFMMCTradingAccountKey,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryEWarrantOffset(
        &mut self,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(self, pQryEWarrantOffset, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProductGroupMargin(
        &mut self,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
            self,
            pQryInvestorProductGroupMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRate(
        &mut self,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(self, pQryExchangeMarginRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRateAdjust(
        &mut self,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
            self,
            pQryExchangeMarginRateAdjust,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeRate(
        &mut self,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeRate(self, pQryExchangeRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentACIDMap(
        &mut self,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(self, pQrySecAgentACIDMap, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductExchRate(
        &mut self,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductExchRate(self, pQryProductExchRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductGroup(
        &mut self,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductGroup(self, pQryProductGroup, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMMInstrumentCommissionRate(
        &mut self,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
            self,
            pQryMMInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryMMOptionInstrCommRate(
        &mut self,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
            self,
            pQryMMOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentOrderCommRate(
        &mut self,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
            self,
            pQryInstrumentOrderCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentCheckMode(
        &mut self,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(self, pQrySecAgentCheckMode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradeInfo(
        &mut self,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(self, pQrySecAgentTradeInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrTradeCost(
        &mut self,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
            self,
            pQryOptionInstrTradeCost,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrCommRate(
        &mut self,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
            self,
            pQryOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExecOrder(
        &mut self,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExecOrder(self, pQryExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryForQuote(
        &mut self,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryForQuote(self, pQryForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryQuote(
        &mut self,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryQuote(self, pQryQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionSelfClose(
        &mut self,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(self, pQryOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestUnit(
        &mut self,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestUnit(self, pQryInvestUnit, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryCombInstrumentGuard(
        &mut self,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
            self,
            pQryCombInstrumentGuard,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCombAction(
        &mut self,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombAction(self, pQryCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferSerial(
        &mut self,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferSerial(self, pQryTransferSerial, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryAccountregister(
        &mut self,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryAccountregister(self, pQryAccountregister, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryContractBank(
        &mut self,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryContractBank(self, pQryContractBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrder(
        &mut self,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrder(self, pQryParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrderAction(
        &mut self,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(self, pQryParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingNotice(
        &mut self,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingNotice(self, pQryTradingNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingParams(
        &mut self,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
            self,
            pQryBrokerTradingParams,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingAlgos(
        &mut self,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(self, pQryBrokerTradingAlgos, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryCFMMCTradingAccountToken(
        &mut self,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
            self,
            pQueryCFMMCTradingAccountToken,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqFromBankToFutureByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqFromFutureToBankByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryBankAccountMoneyByFuture(
        &mut self,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
            self,
            pReqQueryAccount,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryClassifiedInstrument(
        &mut self,
        pQryClassifiedInstrument: *mut CThostFtdcQryClassifiedInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryClassifiedInstrument(
            self,
            pQryClassifiedInstrument,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCombPromotionParam(
        &mut self,
        pQryCombPromotionParam: *mut CThostFtdcQryCombPromotionParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombPromotionParam(self, pQryCombPromotionParam, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryRiskSettleInvstPosition(
        &mut self,
        pQryRiskSettleInvstPosition: *mut CThostFtdcQryRiskSettleInvstPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRiskSettleInvstPosition(
            self,
            pQryRiskSettleInvstPosition,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRiskSettleProductStatus(
        &mut self,
        pQryRiskSettleProductStatus: *mut CThostFtdcQryRiskSettleProductStatusField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRiskSettleProductStatus(
            self,
            pQryRiskSettleProductStatus,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcTraderApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderSpi {
    pub _base: CThostFtdcTraderSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcTraderSpi@@QEAA@PEAX@Z"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(
        this: *mut Rust_CThostFtdcTraderSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcTraderSpi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(
        this: *mut Rust_CThostFtdcTraderSpi,
    );
}
impl Rust_CThostFtdcTraderSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?OnFrontConnected@Rust_CThostFtdcTraderSpi@@UEAAXXZ"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?OnFrontDisconnected@Rust_CThostFtdcTraderSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnHeartBeatWarning@Rust_CThostFtdcTraderSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspAuthenticate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspAuthenticateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspAuthenticate(
        this: *mut ::std::os::raw::c_void,
        pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspUserLoginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogout@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcUserLogoutField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserPasswordUpdate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcUserPasswordUpdateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspTradingAccountPasswordUpdate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountPasswordUpdateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspTradingAccountPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserAuthMethod@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspUserAuthMethodField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserAuthMethod(
        this: *mut ::std::os::raw::c_void,
        pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspGenUserCaptcha@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspGenUserCaptchaField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserCaptcha(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspGenUserText@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspGenUserTextField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserText(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserText: *mut CThostFtdcRspGenUserTextField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspParkedOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMaxOrderVolume@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQryMaxOrderVolumeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMaxOrderVolume(
        this: *mut ::std::os::raw::c_void,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSettlementInfoConfirm@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoConfirmField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspSettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspRemoveParkedOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRemoveParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspRemoveParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRemoveParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspExecOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspExecOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspForQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputForQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQuoteAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspBatchOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputBatchOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOptionSelfCloseInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOptionSelfCloseAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspCombActionInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputCombActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTrade@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPosition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPosition(
        this: *mut ::std::os::raw::c_void,
        pInvestorPosition: *mut CThostFtdcInvestorPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingAccount@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestor@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestor(
        this: *mut ::std::os::raw::c_void,
        pInvestor: *mut CThostFtdcInvestorField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingCode@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingCodeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingCode(
        this: *mut ::std::os::raw::c_void,
        pTradingCode: *mut CThostFtdcTradingCodeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentMarginRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentMarginRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentMarginRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentCommissionRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentCommissionRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchange@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchange(
        this: *mut ::std::os::raw::c_void,
        pExchange: *mut CThostFtdcExchangeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProduct@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProduct(
        this: *mut ::std::os::raw::c_void,
        pProduct: *mut CThostFtdcProductField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrument@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrument(
        this: *mut ::std::os::raw::c_void,
        pInstrument: *mut CThostFtdcInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryDepthMarketData@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcDepthMarketDataField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySettlementInfo@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfo(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfo: *mut CThostFtdcSettlementInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTransferBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTransferBankField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferBank(
        this: *mut ::std::os::raw::c_void,
        pTransferBank: *mut CThostFtdcTransferBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPositionDetail@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionDetailField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcNoticeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryNotice(
        this: *mut ::std::os::raw::c_void,
        pNotice: *mut CThostFtdcNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySettlementInfoConfirm@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoConfirmField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPositionCombineDetail@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionCombineDetailField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionCombineDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCFMMCTradingAccountKey@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCFMMCTradingAccountKeyField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCFMMCTradingAccountKey(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryEWarrantOffset@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcEWarrantOffsetField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryEWarrantOffset(
        this: *mut ::std::os::raw::c_void,
        pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorProductGroupMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorProductGroupMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProductGroupMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeMarginRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeMarginRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeMarginRateAdjust@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeMarginRateAdjustField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRateAdjust(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeRate: *mut CThostFtdcExchangeRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentACIDMap@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentACIDMapField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentACIDMap(
        this: *mut ::std::os::raw::c_void,
        pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProductExchRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductExchRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductExchRate(
        this: *mut ::std::os::raw::c_void,
        pProductExchRate: *mut CThostFtdcProductExchRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProductGroup@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductGroupField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductGroup(
        this: *mut ::std::os::raw::c_void,
        pProductGroup: *mut CThostFtdcProductGroupField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMMInstrumentCommissionRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcMMInstrumentCommissionRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMMOptionInstrCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcMMOptionInstrCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentOrderCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentOrderCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentOrderCommRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentTradingAccount@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentCheckMode@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentCheckModeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentCheckMode(
        this: *mut ::std::os::raw::c_void,
        pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentTradeInfo@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentTradeInfoField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradeInfo(
        this: *mut ::std::os::raw::c_void,
        pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionInstrTradeCost@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionInstrTradeCostField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrTradeCost(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionInstrCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionInstrCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExecOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryForQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcForQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryForQuote(
        this: *mut ::std::os::raw::c_void,
        pForQuote: *mut CThostFtdcForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionSelfClose@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestUnit@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestUnitField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestUnit(
        this: *mut ::std::os::raw::c_void,
        pInvestUnit: *mut CThostFtdcInvestUnitField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombInstrumentGuard@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombInstrumentGuardField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombInstrumentGuard(
        this: *mut ::std::os::raw::c_void,
        pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTransferSerial@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTransferSerialField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferSerial(
        this: *mut ::std::os::raw::c_void,
        pTransferSerial: *mut CThostFtdcTransferSerialField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryAccountregister@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcAccountregisterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryAccountregister(
        this: *mut ::std::os::raw::c_void,
        pAccountregister: *mut CThostFtdcAccountregisterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspError@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnTrade@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradeField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderAction(
        this: *mut ::std::os::raw::c_void,
        pOrderAction: *mut CThostFtdcOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnInstrumentStatus@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentStatusField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnInstrumentStatus(
        this: *mut ::std::os::raw::c_void,
        pInstrumentStatus: *mut CThostFtdcInstrumentStatusField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnBulletin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBulletinField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnBulletin(
        this: *mut ::std::os::raw::c_void,
        pBulletin: *mut CThostFtdcBulletinField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnTradingNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingNoticeInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnErrorConditionalOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcErrorConditionalOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnErrorConditionalOrder(
        this: *mut ::std::os::raw::c_void,
        pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnExecOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnExecOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnExecOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pExecOrderAction: *mut CThostFtdcExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnForQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputForQuoteField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQuoteAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pQuoteAction: *mut CThostFtdcQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnForQuoteRsp@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcForQuoteRspField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCFMMCTradingAccountToken@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCFMMCTradingAccountTokenField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnBatchOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBatchOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pBatchOrderAction: *mut CThostFtdcBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOptionSelfClose@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOptionSelfCloseInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOptionSelfCloseAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCombAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombActionField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnCombActionInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputCombActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryContractBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcContractBankField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryContractBank(
        this: *mut ::std::os::raw::c_void,
        pContractBank: *mut CThostFtdcContractBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryParkedOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingNoticeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNotice: *mut CThostFtdcTradingNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryBrokerTradingParams@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBrokerTradingParamsField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingParams(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryBrokerTradingAlgos@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBrokerTradingAlgosField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingAlgos(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQueryCFMMCTradingAccountToken@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQueryCFMMCTradingAccountTokenField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromBankToFutureByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromFutureToBankByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnQueryBankBalanceByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcNotifyQueryAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnRepealBankToFutureByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqRepealField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnRepealFutureToBankByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqRepealField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQueryBankBalanceByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqQueryAccountField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQueryBankAccountMoneyByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqQueryAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryBankAccountMoneyByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOpenAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOpenAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOpenAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pOpenAccount: *mut CThostFtdcOpenAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCancelAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCancelAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCancelAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pCancelAccount: *mut CThostFtdcCancelAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnChangeAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcChangeAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnChangeAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pChangeAccount: *mut CThostFtdcChangeAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryClassifiedInstrument@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryClassifiedInstrument(
        this: *mut ::std::os::raw::c_void,
        pInstrument: *mut CThostFtdcInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombPromotionParam@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombPromotionParamField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombPromotionParam(
        this: *mut ::std::os::raw::c_void,
        pCombPromotionParam: *mut CThostFtdcCombPromotionParamField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRiskSettleInvstPosition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRiskSettleInvstPositionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRiskSettleInvstPosition(
        this: *mut ::std::os::raw::c_void,
        pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRiskSettleProductStatus@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRiskSettleProductStatusField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRiskSettleProductStatus(
        this: *mut ::std::os::raw::c_void,
        pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
#[allow(unused)]
pub trait Rust_CThostFtdcMdSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_multicast_instrument(&mut self, pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspQryMulticastInstrument(trait_obj: *mut ::std::os::raw::c_void, pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_multicast_instrument(pMulticastInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_depth_market_data(pDepthMarketData)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcMdSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}

#[allow(unused)]
pub trait Rust_CThostFtdcTraderSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_authenticate(&mut self, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_password_update(&mut self, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_trading_account_password_update(&mut self, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_auth_method(&mut self, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_captcha(&mut self, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_text(&mut self, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_insert(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_action(&mut self, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_max_order_volume(&mut self, pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order(&mut self, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order_action(&mut self, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_action(&mut self, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_action(&mut self, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_batch_order_action(&mut self, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_action(&mut self, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_order(&mut self, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trade(&mut self, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position(&mut self, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor(&mut self, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_code(&mut self, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_margin_rate(&mut self, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_commission_rate(&mut self, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange(&mut self, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product(&mut self, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument(&mut self, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info(&mut self, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_bank(&mut self, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_detail(&mut self, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_notice(&mut self, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_combine_detail(&mut self, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_cfmmc_trading_account_key(&mut self, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_e_warrant_offset(&mut self, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_product_group_margin(&mut self, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate(&mut self, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate_adjust(&mut self, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_rate(&mut self, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_acid_map(&mut self, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_exch_rate(&mut self, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_group(&mut self, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_instrument_commission_rate(&mut self, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_option_instr_comm_rate(&mut self, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_order_comm_rate(&mut self, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_check_mode(&mut self, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trade_info(&mut self, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_trade_cost(&mut self, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_comm_rate(&mut self, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_for_quote(&mut self, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_quote(&mut self, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_invest_unit(&mut self, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_instrument_guard(&mut self, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_serial(&mut self, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_accountregister(&mut self, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_order(&mut self, pOrder: *mut CThostFtdcOrderField) {  }
    fn on_rtn_trade(&mut self, pTrade: *mut CThostFtdcTradeField) {  }
    fn on_err_rtn_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_order_action(&mut self, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_instrument_status(&mut self, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {  }
    fn on_rtn_bulletin(&mut self, pBulletin: *mut CThostFtdcBulletinField) {  }
    fn on_rtn_trading_notice(&mut self, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {  }
    fn on_rtn_error_conditional_order(&mut self, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {  }
    fn on_rtn_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField) {  }
    fn on_err_rtn_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_exec_order_action(&mut self, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_quote(&mut self, pQuote: *mut CThostFtdcQuoteField) {  }
    fn on_err_rtn_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_quote_action(&mut self, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
    fn on_rtn_cfmmc_trading_account_token(&mut self, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {  }
    fn on_err_rtn_batch_order_action(&mut self, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {  }
    fn on_err_rtn_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_option_self_close_action(&mut self, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField) {  }
    fn on_err_rtn_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rsp_qry_contract_bank(&mut self, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_notice(&mut self, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_params(&mut self, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_algos(&mut self, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_cfmmc_trading_account_token(&mut self, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_from_bank_to_future_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_from_bank_to_future_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_query_bank_balance_by_future(&mut self, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {  }
    fn on_err_rtn_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_bank_to_future_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_future_to_bank_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_query_bank_balance_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rsp_from_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_from_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_bank_account_money_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_open_account_by_bank(&mut self, pOpenAccount: *mut CThostFtdcOpenAccountField) {  }
    fn on_rtn_cancel_account_by_bank(&mut self, pCancelAccount: *mut CThostFtdcCancelAccountField) {  }
    fn on_rtn_change_account_by_bank(&mut self, pChangeAccount: *mut CThostFtdcChangeAccountField) {  }
    fn on_rsp_qry_classified_instrument(&mut self, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_promotion_param(&mut self, pCombPromotionParam: *mut CThostFtdcCombPromotionParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_risk_settle_invst_position(&mut self, pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_risk_settle_product_status(&mut self, pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspAuthenticate(trait_obj: *mut ::std::os::raw::c_void, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_authenticate(pRspAuthenticateField, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_password_update(pUserPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspTradingAccountPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_trading_account_password_update(pTradingAccountPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserAuthMethod(trait_obj: *mut ::std::os::raw::c_void, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_auth_method(pRspUserAuthMethod, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserCaptcha(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_captcha(pRspGenUserCaptcha, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserText(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_text(pRspGenUserText, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_insert(pInputOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_insert(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_action(pInputOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMaxOrderVolume(trait_obj: *mut ::std::os::raw::c_void, pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_max_order_volume(pQryMaxOrderVolume, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspSettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order(pRemoveParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order_action(pRemoveParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_insert(pInputExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_action(pInputExecOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_for_quote_insert(pInputForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_insert(pInputQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_action(pInputQuoteAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_batch_order_action(pInputBatchOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_insert(pInputOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_action(pInputOptionSelfCloseAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_comb_action_insert(pInputCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_order(pOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trade(pTrade, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPosition(trait_obj: *mut ::std::os::raw::c_void, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position(pInvestorPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestor(trait_obj: *mut ::std::os::raw::c_void, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor(pInvestor, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingCode(trait_obj: *mut ::std::os::raw::c_void, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_code(pTradingCode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentMarginRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_margin_rate(pInstrumentMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_commission_rate(pInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchange(trait_obj: *mut ::std::os::raw::c_void, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange(pExchange, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProduct(trait_obj: *mut ::std::os::raw::c_void, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product(pProduct, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrument(trait_obj: *mut ::std::os::raw::c_void, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument(pInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_depth_market_data(pDepthMarketData, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfo(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info(pSettlementInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferBank(trait_obj: *mut ::std::os::raw::c_void, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_bank(pTransferBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_detail(pInvestorPositionDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryNotice(trait_obj: *mut ::std::os::raw::c_void, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_notice(pNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionCombineDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_combine_detail(pInvestorPositionCombineDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCFMMCTradingAccountKey(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_cfmmc_trading_account_key(pCFMMCTradingAccountKey, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryEWarrantOffset(trait_obj: *mut ::std::os::raw::c_void, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_e_warrant_offset(pEWarrantOffset, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProductGroupMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_product_group_margin(pInvestorProductGroupMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate(pExchangeMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRateAdjust(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate_adjust(pExchangeMarginRateAdjust, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_rate(pExchangeRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentACIDMap(trait_obj: *mut ::std::os::raw::c_void, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_acid_map(pSecAgentACIDMap, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductExchRate(trait_obj: *mut ::std::os::raw::c_void, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_exch_rate(pProductExchRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductGroup(trait_obj: *mut ::std::os::raw::c_void, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_group(pProductGroup, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_instrument_commission_rate(pMMInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_option_instr_comm_rate(pMMOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentOrderCommRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_order_comm_rate(pInstrumentOrderCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentCheckMode(trait_obj: *mut ::std::os::raw::c_void, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_check_mode(pSecAgentCheckMode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradeInfo(trait_obj: *mut ::std::os::raw::c_void, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trade_info(pSecAgentTradeInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrTradeCost(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_trade_cost(pOptionInstrTradeCost, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_comm_rate(pOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exec_order(pExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryForQuote(trait_obj: *mut ::std::os::raw::c_void, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_for_quote(pForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_quote(pQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_self_close(pOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestUnit(trait_obj: *mut ::std::os::raw::c_void, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_invest_unit(pInvestUnit, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombInstrumentGuard(trait_obj: *mut ::std::os::raw::c_void, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_instrument_guard(pCombInstrumentGuard, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_action(pCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferSerial(trait_obj: *mut ::std::os::raw::c_void, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_serial(pTransferSerial, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryAccountregister(trait_obj: *mut ::std::os::raw::c_void, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_accountregister(pAccountregister, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_order(pOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trade(pTrade)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_insert(pInputOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderAction(trait_obj: *mut ::std::os::raw::c_void, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_action(pOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnInstrumentStatus(trait_obj: *mut ::std::os::raw::c_void, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_instrument_status(pInstrumentStatus)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnBulletin(trait_obj: *mut ::std::os::raw::c_void, pBulletin: *mut CThostFtdcBulletinField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_bulletin(pBulletin)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trading_notice(pTradingNoticeInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnErrorConditionalOrder(trait_obj: *mut ::std::os::raw::c_void, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_error_conditional_order(pErrorConditionalOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_exec_order(pExecOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_insert(pInputExecOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_action(pExecOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_for_quote_insert(pInputForQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_quote(pQuote)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_insert(pInputQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_action(pQuoteAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cfmmc_trading_account_token(pCFMMCTradingAccountToken)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_batch_order_action(pBatchOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_option_self_close(pOptionSelfClose)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_insert(pInputOptionSelfClose, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_action(pOptionSelfCloseAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_comb_action(pCombAction)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_comb_action_insert(pInputCombAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryContractBank(trait_obj: *mut ::std::os::raw::c_void, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_contract_bank(pContractBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_notice(pTradingNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingParams(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_params(pBrokerTradingParams, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingAlgos(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_algos(pBrokerTradingAlgos, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_cfmmc_trading_account_token(pQueryCFMMCTradingAccountToken, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_query_bank_balance_by_future(pNotifyQueryAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_bank_to_future_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_future_to_bank_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_bank_to_future_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_future_to_bank_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_query_bank_balance_by_future(pReqQueryAccount, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_bank_to_future_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_future_to_bank_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryBankAccountMoneyByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_bank_account_money_by_future(pReqQueryAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOpenAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pOpenAccount: *mut CThostFtdcOpenAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_open_account_by_bank(pOpenAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCancelAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pCancelAccount: *mut CThostFtdcCancelAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cancel_account_by_bank(pCancelAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnChangeAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pChangeAccount: *mut CThostFtdcChangeAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_change_account_by_bank(pChangeAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryClassifiedInstrument(trait_obj: *mut ::std::os::raw::c_void, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_classified_instrument(pInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombPromotionParam(trait_obj: *mut ::std::os::raw::c_void, pCombPromotionParam: *mut CThostFtdcCombPromotionParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_promotion_param(pCombPromotionParam, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRiskSettleInvstPosition(trait_obj: *mut ::std::os::raw::c_void, pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_risk_settle_invst_position(pRiskSettleInvstPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRiskSettleProductStatus(trait_obj: *mut ::std::os::raw::c_void, pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_risk_settle_product_status(pRiskSettleProductStatus, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcTraderSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}
